{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HitContext = exports.SceneContext = exports.Context = void 0;\nconst Util_1 = require(\"./Util\");\nconst Global_1 = require(\"./Global\");\nfunction simplifyArray(arr) {\n  var retArr = [],\n    len = arr.length,\n    util = Util_1.Util,\n    n,\n    val;\n  for (n = 0; n < len; n++) {\n    val = arr[n];\n    if (util._isNumber(val)) {\n      val = Math.round(val * 1000) / 1000;\n    } else if (!util._isString(val)) {\n      val = val + '';\n    }\n    retArr.push(val);\n  }\n  return retArr;\n}\nvar COMMA = ',',\n  OPEN_PAREN = '(',\n  CLOSE_PAREN = ')',\n  OPEN_PAREN_BRACKET = '([',\n  CLOSE_BRACKET_PAREN = '])',\n  SEMICOLON = ';',\n  DOUBLE_PAREN = '()',\n  EQUALS = '=',\n  CONTEXT_METHODS = ['arc', 'arcTo', 'beginPath', 'bezierCurveTo', 'clearRect', 'clip', 'closePath', 'createLinearGradient', 'createPattern', 'createRadialGradient', 'drawImage', 'ellipse', 'fill', 'fillText', 'getImageData', 'createImageData', 'lineTo', 'moveTo', 'putImageData', 'quadraticCurveTo', 'rect', 'restore', 'rotate', 'save', 'scale', 'setLineDash', 'setTransform', 'stroke', 'strokeText', 'transform', 'translate'];\nvar CONTEXT_PROPERTIES = ['fillStyle', 'strokeStyle', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'letterSpacing', 'lineCap', 'lineDashOffset', 'lineJoin', 'lineWidth', 'miterLimit', 'direction', 'font', 'textAlign', 'textBaseline', 'globalAlpha', 'globalCompositeOperation', 'imageSmoothingEnabled'];\nconst traceArrMax = 100;\nclass Context {\n  constructor(canvas) {\n    this.canvas = canvas;\n    if (Global_1.Konva.enableTrace) {\n      this.traceArr = [];\n      this._enableTrace();\n    }\n  }\n  fillShape(shape) {\n    if (shape.fillEnabled()) {\n      this._fill(shape);\n    }\n  }\n  _fill(shape) {}\n  strokeShape(shape) {\n    if (shape.hasStroke()) {\n      this._stroke(shape);\n    }\n  }\n  _stroke(shape) {}\n  fillStrokeShape(shape) {\n    if (shape.attrs.fillAfterStrokeEnabled) {\n      this.strokeShape(shape);\n      this.fillShape(shape);\n    } else {\n      this.fillShape(shape);\n      this.strokeShape(shape);\n    }\n  }\n  getTrace(relaxed, rounded) {\n    var traceArr = this.traceArr,\n      len = traceArr.length,\n      str = '',\n      n,\n      trace,\n      method,\n      args;\n    for (n = 0; n < len; n++) {\n      trace = traceArr[n];\n      method = trace.method;\n      if (method) {\n        args = trace.args;\n        str += method;\n        if (relaxed) {\n          str += DOUBLE_PAREN;\n        } else {\n          if (Util_1.Util._isArray(args[0])) {\n            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n          } else {\n            if (rounded) {\n              args = args.map(a => typeof a === 'number' ? Math.floor(a) : a);\n            }\n            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n          }\n        }\n      } else {\n        str += trace.property;\n        if (!relaxed) {\n          str += EQUALS + trace.val;\n        }\n      }\n      str += SEMICOLON;\n    }\n    return str;\n  }\n  clearTrace() {\n    this.traceArr = [];\n  }\n  _trace(str) {\n    var traceArr = this.traceArr,\n      len;\n    traceArr.push(str);\n    len = traceArr.length;\n    if (len >= traceArrMax) {\n      traceArr.shift();\n    }\n  }\n  reset() {\n    var pixelRatio = this.getCanvas().getPixelRatio();\n    this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n  }\n  getCanvas() {\n    return this.canvas;\n  }\n  clear(bounds) {\n    var canvas = this.getCanvas();\n    if (bounds) {\n      this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n    } else {\n      this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n    }\n  }\n  _applyLineCap(shape) {\n    const lineCap = shape.attrs.lineCap;\n    if (lineCap) {\n      this.setAttr('lineCap', lineCap);\n    }\n  }\n  _applyOpacity(shape) {\n    var absOpacity = shape.getAbsoluteOpacity();\n    if (absOpacity !== 1) {\n      this.setAttr('globalAlpha', absOpacity);\n    }\n  }\n  _applyLineJoin(shape) {\n    const lineJoin = shape.attrs.lineJoin;\n    if (lineJoin) {\n      this.setAttr('lineJoin', lineJoin);\n    }\n  }\n  setAttr(attr, val) {\n    this._context[attr] = val;\n  }\n  arc(x, y, radius, startAngle, endAngle, counterClockwise) {\n    this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n  }\n  arcTo(x1, y1, x2, y2, radius) {\n    this._context.arcTo(x1, y1, x2, y2, radius);\n  }\n  beginPath() {\n    this._context.beginPath();\n  }\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  }\n  clearRect(x, y, width, height) {\n    this._context.clearRect(x, y, width, height);\n  }\n  clip(...args) {\n    this._context.clip.apply(this._context, args);\n  }\n  closePath() {\n    this._context.closePath();\n  }\n  createImageData(width, height) {\n    var a = arguments;\n    if (a.length === 2) {\n      return this._context.createImageData(width, height);\n    } else if (a.length === 1) {\n      return this._context.createImageData(width);\n    }\n  }\n  createLinearGradient(x0, y0, x1, y1) {\n    return this._context.createLinearGradient(x0, y0, x1, y1);\n  }\n  createPattern(image, repetition) {\n    return this._context.createPattern(image, repetition);\n  }\n  createRadialGradient(x0, y0, r0, x1, y1, r1) {\n    return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n  }\n  drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n    var a = arguments,\n      _context = this._context;\n    if (a.length === 3) {\n      _context.drawImage(image, sx, sy);\n    } else if (a.length === 5) {\n      _context.drawImage(image, sx, sy, sWidth, sHeight);\n    } else if (a.length === 9) {\n      _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    }\n  }\n  ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {\n    this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);\n  }\n  isPointInPath(x, y, path, fillRule) {\n    if (path) {\n      return this._context.isPointInPath(path, x, y, fillRule);\n    }\n    return this._context.isPointInPath(x, y, fillRule);\n  }\n  fill(...args) {\n    this._context.fill.apply(this._context, args);\n  }\n  fillRect(x, y, width, height) {\n    this._context.fillRect(x, y, width, height);\n  }\n  strokeRect(x, y, width, height) {\n    this._context.strokeRect(x, y, width, height);\n  }\n  fillText(text, x, y, maxWidth) {\n    if (maxWidth) {\n      this._context.fillText(text, x, y, maxWidth);\n    } else {\n      this._context.fillText(text, x, y);\n    }\n  }\n  measureText(text) {\n    return this._context.measureText(text);\n  }\n  getImageData(sx, sy, sw, sh) {\n    return this._context.getImageData(sx, sy, sw, sh);\n  }\n  lineTo(x, y) {\n    this._context.lineTo(x, y);\n  }\n  moveTo(x, y) {\n    this._context.moveTo(x, y);\n  }\n  rect(x, y, width, height) {\n    this._context.rect(x, y, width, height);\n  }\n  putImageData(imageData, dx, dy) {\n    this._context.putImageData(imageData, dx, dy);\n  }\n  quadraticCurveTo(cpx, cpy, x, y) {\n    this._context.quadraticCurveTo(cpx, cpy, x, y);\n  }\n  restore() {\n    this._context.restore();\n  }\n  rotate(angle) {\n    this._context.rotate(angle);\n  }\n  save() {\n    this._context.save();\n  }\n  scale(x, y) {\n    this._context.scale(x, y);\n  }\n  setLineDash(segments) {\n    if (this._context.setLineDash) {\n      this._context.setLineDash(segments);\n    } else if ('mozDash' in this._context) {\n      this._context['mozDash'] = segments;\n    } else if ('webkitLineDash' in this._context) {\n      this._context['webkitLineDash'] = segments;\n    }\n  }\n  getLineDash() {\n    return this._context.getLineDash();\n  }\n  setTransform(a, b, c, d, e, f) {\n    this._context.setTransform(a, b, c, d, e, f);\n  }\n  stroke(path2d) {\n    if (path2d) {\n      this._context.stroke(path2d);\n    } else {\n      this._context.stroke();\n    }\n  }\n  strokeText(text, x, y, maxWidth) {\n    this._context.strokeText(text, x, y, maxWidth);\n  }\n  transform(a, b, c, d, e, f) {\n    this._context.transform(a, b, c, d, e, f);\n  }\n  translate(x, y) {\n    this._context.translate(x, y);\n  }\n  _enableTrace() {\n    var that = this,\n      len = CONTEXT_METHODS.length,\n      origSetter = this.setAttr,\n      n,\n      args;\n    var func = function (methodName) {\n      var origMethod = that[methodName],\n        ret;\n      that[methodName] = function () {\n        args = simplifyArray(Array.prototype.slice.call(arguments, 0));\n        ret = origMethod.apply(that, arguments);\n        that._trace({\n          method: methodName,\n          args: args\n        });\n        return ret;\n      };\n    };\n    for (n = 0; n < len; n++) {\n      func(CONTEXT_METHODS[n]);\n    }\n    that.setAttr = function () {\n      origSetter.apply(that, arguments);\n      var prop = arguments[0];\n      var val = arguments[1];\n      if (prop === 'shadowOffsetX' || prop === 'shadowOffsetY' || prop === 'shadowBlur') {\n        val = val / this.canvas.getPixelRatio();\n      }\n      that._trace({\n        property: prop,\n        val: val\n      });\n    };\n  }\n  _applyGlobalCompositeOperation(node) {\n    const op = node.attrs.globalCompositeOperation;\n    var def = !op || op === 'source-over';\n    if (!def) {\n      this.setAttr('globalCompositeOperation', op);\n    }\n  }\n}\nexports.Context = Context;\nCONTEXT_PROPERTIES.forEach(function (prop) {\n  Object.defineProperty(Context.prototype, prop, {\n    get() {\n      return this._context[prop];\n    },\n    set(val) {\n      this._context[prop] = val;\n    }\n  });\n});\nclass SceneContext extends Context {\n  constructor(canvas, {\n    willReadFrequently = false\n  } = {}) {\n    super(canvas);\n    this._context = canvas._canvas.getContext('2d', {\n      willReadFrequently\n    });\n  }\n  _fillColor(shape) {\n    var fill = shape.fill();\n    this.setAttr('fillStyle', fill);\n    shape._fillFunc(this);\n  }\n  _fillPattern(shape) {\n    this.setAttr('fillStyle', shape._getFillPattern());\n    shape._fillFunc(this);\n  }\n  _fillLinearGradient(shape) {\n    var grd = shape._getLinearGradient();\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n      shape._fillFunc(this);\n    }\n  }\n  _fillRadialGradient(shape) {\n    const grd = shape._getRadialGradient();\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n      shape._fillFunc(this);\n    }\n  }\n  _fill(shape) {\n    const hasColor = shape.fill(),\n      fillPriority = shape.getFillPriority();\n    if (hasColor && fillPriority === 'color') {\n      this._fillColor(shape);\n      return;\n    }\n    const hasPattern = shape.getFillPatternImage();\n    if (hasPattern && fillPriority === 'pattern') {\n      this._fillPattern(shape);\n      return;\n    }\n    const hasLinearGradient = shape.getFillLinearGradientColorStops();\n    if (hasLinearGradient && fillPriority === 'linear-gradient') {\n      this._fillLinearGradient(shape);\n      return;\n    }\n    const hasRadialGradient = shape.getFillRadialGradientColorStops();\n    if (hasRadialGradient && fillPriority === 'radial-gradient') {\n      this._fillRadialGradient(shape);\n      return;\n    }\n    if (hasColor) {\n      this._fillColor(shape);\n    } else if (hasPattern) {\n      this._fillPattern(shape);\n    } else if (hasLinearGradient) {\n      this._fillLinearGradient(shape);\n    } else if (hasRadialGradient) {\n      this._fillRadialGradient(shape);\n    }\n  }\n  _strokeLinearGradient(shape) {\n    const start = shape.getStrokeLinearGradientStartPoint(),\n      end = shape.getStrokeLinearGradientEndPoint(),\n      colorStops = shape.getStrokeLinearGradientColorStops(),\n      grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n    if (colorStops) {\n      for (var n = 0; n < colorStops.length; n += 2) {\n        grd.addColorStop(colorStops[n], colorStops[n + 1]);\n      }\n      this.setAttr('strokeStyle', grd);\n    }\n  }\n  _stroke(shape) {\n    var dash = shape.dash(),\n      strokeScaleEnabled = shape.getStrokeScaleEnabled();\n    if (shape.hasStroke()) {\n      if (!strokeScaleEnabled) {\n        this.save();\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n      this._applyLineCap(shape);\n      if (dash && shape.dashEnabled()) {\n        this.setLineDash(dash);\n        this.setAttr('lineDashOffset', shape.dashOffset());\n      }\n      this.setAttr('lineWidth', shape.strokeWidth());\n      if (!shape.getShadowForStrokeEnabled()) {\n        this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n      }\n      var hasLinearGradient = shape.getStrokeLinearGradientColorStops();\n      if (hasLinearGradient) {\n        this._strokeLinearGradient(shape);\n      } else {\n        this.setAttr('strokeStyle', shape.stroke());\n      }\n      shape._strokeFunc(this);\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n  _applyShadow(shape) {\n    var _a, _b, _c;\n    var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black',\n      blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5,\n      offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\n        x: 0,\n        y: 0\n      },\n      scale = shape.getAbsoluteScale(),\n      ratio = this.canvas.getPixelRatio(),\n      scaleX = scale.x * ratio,\n      scaleY = scale.y * ratio;\n    this.setAttr('shadowColor', color);\n    this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\n    this.setAttr('shadowOffsetX', offset.x * scaleX);\n    this.setAttr('shadowOffsetY', offset.y * scaleY);\n  }\n}\nexports.SceneContext = SceneContext;\nclass HitContext extends Context {\n  constructor(canvas) {\n    super(canvas);\n    this._context = canvas._canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n  }\n  _fill(shape) {\n    this.save();\n    this.setAttr('fillStyle', shape.colorKey);\n    shape._fillFuncHit(this);\n    this.restore();\n  }\n  strokeShape(shape) {\n    if (shape.hasHitStroke()) {\n      this._stroke(shape);\n    }\n  }\n  _stroke(shape) {\n    if (shape.hasHitStroke()) {\n      const strokeScaleEnabled = shape.getStrokeScaleEnabled();\n      if (!strokeScaleEnabled) {\n        this.save();\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n      this._applyLineCap(shape);\n      var hitStrokeWidth = shape.hitStrokeWidth();\n      var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\n      this.setAttr('lineWidth', strokeWidth);\n      this.setAttr('strokeStyle', shape.colorKey);\n      shape._strokeFuncHit(this);\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n}\nexports.HitContext = HitContext;","map":{"version":3,"names":["require","Object","defineProperty","exports","value","HitContext","SceneContext","Context","Util_1","Global_1","simplifyArray","arr","retArr","len","length","util","Util","n","val","_isNumber","Math","round","_isString","push","COMMA","OPEN_PAREN","CLOSE_PAREN","OPEN_PAREN_BRACKET","CLOSE_BRACKET_PAREN","SEMICOLON","DOUBLE_PAREN","EQUALS","CONTEXT_METHODS","CONTEXT_PROPERTIES","traceArrMax","constructor","canvas","Konva","enableTrace","traceArr","_enableTrace","fillShape","shape","fillEnabled","_fill","strokeShape","hasStroke","_stroke","fillStrokeShape","attrs","fillAfterStrokeEnabled","getTrace","relaxed","rounded","str","trace","method","args","_isArray","join","map","a","floor","property","clearTrace","_trace","shift","reset","pixelRatio","getCanvas","getPixelRatio","setTransform","clear","bounds","clearRect","x","y","width","height","getWidth","getHeight","_applyLineCap","lineCap","setAttr","_applyOpacity","absOpacity","getAbsoluteOpacity","_applyLineJoin","lineJoin","attr","_context","arc","radius","startAngle","endAngle","counterClockwise","arcTo","x1","y1","x2","y2","beginPath","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","clip","apply","closePath","createImageData","arguments","createLinearGradient","x0","y0","createPattern","image","repetition","createRadialGradient","r0","r1","drawImage","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","ellipse","radiusX","radiusY","rotation","counterclockwise","isPointInPath","path","fillRule","fill","fillRect","strokeRect","fillText","text","maxWidth","measureText","getImageData","sw","sh","lineTo","moveTo","rect","putImageData","imageData","quadraticCurveTo","cpx","cpy","restore","rotate","angle","save","scale","setLineDash","segments","getLineDash","b","c","d","e","f","stroke","path2d","strokeText","transform","translate","that","origSetter","func","methodName","origMethod","ret","Array","prototype","slice","call","prop","_applyGlobalCompositeOperation","node","op","globalCompositeOperation","def","forEach","get","set","willReadFrequently","_canvas","getContext","_fillColor","_fillFunc","_fillPattern","_getFillPattern","_fillLinearGradient","grd","_getLinearGradient","_fillRadialGradient","_getRadialGradient","hasColor","fillPriority","getFillPriority","hasPattern","getFillPatternImage","hasLinearGradient","getFillLinearGradientColorStops","hasRadialGradient","getFillRadialGradientColorStops","_strokeLinearGradient","start","getStrokeLinearGradientStartPoint","end","getStrokeLinearGradientEndPoint","colorStops","getStrokeLinearGradientColorStops","addColorStop","dash","strokeScaleEnabled","getStrokeScaleEnabled","dashEnabled","dashOffset","strokeWidth","getShadowForStrokeEnabled","_strokeFunc","_applyShadow","_a","_b","_c","color","getShadowRGBA","blur","getShadowBlur","offset","getShadowOffset","getAbsoluteScale","ratio","scaleX","scaleY","min","abs","colorKey","_fillFuncHit","hasHitStroke","hitStrokeWidth","_strokeFuncHit"],"sources":["C:/Users/Al-Gawad/node_modules/konva/lib/Context.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HitContext = exports.SceneContext = exports.Context = void 0;\nconst Util_1 = require(\"./Util\");\nconst Global_1 = require(\"./Global\");\nfunction simplifyArray(arr) {\n    var retArr = [], len = arr.length, util = Util_1.Util, n, val;\n    for (n = 0; n < len; n++) {\n        val = arr[n];\n        if (util._isNumber(val)) {\n            val = Math.round(val * 1000) / 1000;\n        }\n        else if (!util._isString(val)) {\n            val = val + '';\n        }\n        retArr.push(val);\n    }\n    return retArr;\n}\nvar COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [\n    'arc',\n    'arcTo',\n    'beginPath',\n    'bezierCurveTo',\n    'clearRect',\n    'clip',\n    'closePath',\n    'createLinearGradient',\n    'createPattern',\n    'createRadialGradient',\n    'drawImage',\n    'ellipse',\n    'fill',\n    'fillText',\n    'getImageData',\n    'createImageData',\n    'lineTo',\n    'moveTo',\n    'putImageData',\n    'quadraticCurveTo',\n    'rect',\n    'restore',\n    'rotate',\n    'save',\n    'scale',\n    'setLineDash',\n    'setTransform',\n    'stroke',\n    'strokeText',\n    'transform',\n    'translate',\n];\nvar CONTEXT_PROPERTIES = [\n    'fillStyle',\n    'strokeStyle',\n    'shadowColor',\n    'shadowBlur',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'letterSpacing',\n    'lineCap',\n    'lineDashOffset',\n    'lineJoin',\n    'lineWidth',\n    'miterLimit',\n    'direction',\n    'font',\n    'textAlign',\n    'textBaseline',\n    'globalAlpha',\n    'globalCompositeOperation',\n    'imageSmoothingEnabled',\n];\nconst traceArrMax = 100;\nclass Context {\n    constructor(canvas) {\n        this.canvas = canvas;\n        if (Global_1.Konva.enableTrace) {\n            this.traceArr = [];\n            this._enableTrace();\n        }\n    }\n    fillShape(shape) {\n        if (shape.fillEnabled()) {\n            this._fill(shape);\n        }\n    }\n    _fill(shape) {\n    }\n    strokeShape(shape) {\n        if (shape.hasStroke()) {\n            this._stroke(shape);\n        }\n    }\n    _stroke(shape) {\n    }\n    fillStrokeShape(shape) {\n        if (shape.attrs.fillAfterStrokeEnabled) {\n            this.strokeShape(shape);\n            this.fillShape(shape);\n        }\n        else {\n            this.fillShape(shape);\n            this.strokeShape(shape);\n        }\n    }\n    getTrace(relaxed, rounded) {\n        var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;\n        for (n = 0; n < len; n++) {\n            trace = traceArr[n];\n            method = trace.method;\n            if (method) {\n                args = trace.args;\n                str += method;\n                if (relaxed) {\n                    str += DOUBLE_PAREN;\n                }\n                else {\n                    if (Util_1.Util._isArray(args[0])) {\n                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n                    }\n                    else {\n                        if (rounded) {\n                            args = args.map((a) => typeof a === 'number' ? Math.floor(a) : a);\n                        }\n                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n                    }\n                }\n            }\n            else {\n                str += trace.property;\n                if (!relaxed) {\n                    str += EQUALS + trace.val;\n                }\n            }\n            str += SEMICOLON;\n        }\n        return str;\n    }\n    clearTrace() {\n        this.traceArr = [];\n    }\n    _trace(str) {\n        var traceArr = this.traceArr, len;\n        traceArr.push(str);\n        len = traceArr.length;\n        if (len >= traceArrMax) {\n            traceArr.shift();\n        }\n    }\n    reset() {\n        var pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    clear(bounds) {\n        var canvas = this.getCanvas();\n        if (bounds) {\n            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n        }\n        else {\n            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n        }\n    }\n    _applyLineCap(shape) {\n        const lineCap = shape.attrs.lineCap;\n        if (lineCap) {\n            this.setAttr('lineCap', lineCap);\n        }\n    }\n    _applyOpacity(shape) {\n        var absOpacity = shape.getAbsoluteOpacity();\n        if (absOpacity !== 1) {\n            this.setAttr('globalAlpha', absOpacity);\n        }\n    }\n    _applyLineJoin(shape) {\n        const lineJoin = shape.attrs.lineJoin;\n        if (lineJoin) {\n            this.setAttr('lineJoin', lineJoin);\n        }\n    }\n    setAttr(attr, val) {\n        this._context[attr] = val;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterClockwise) {\n        this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n    }\n    arcTo(x1, y1, x2, y2, radius) {\n        this._context.arcTo(x1, y1, x2, y2, radius);\n    }\n    beginPath() {\n        this._context.beginPath();\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    }\n    clearRect(x, y, width, height) {\n        this._context.clearRect(x, y, width, height);\n    }\n    clip(...args) {\n        this._context.clip.apply(this._context, args);\n    }\n    closePath() {\n        this._context.closePath();\n    }\n    createImageData(width, height) {\n        var a = arguments;\n        if (a.length === 2) {\n            return this._context.createImageData(width, height);\n        }\n        else if (a.length === 1) {\n            return this._context.createImageData(width);\n        }\n    }\n    createLinearGradient(x0, y0, x1, y1) {\n        return this._context.createLinearGradient(x0, y0, x1, y1);\n    }\n    createPattern(image, repetition) {\n        return this._context.createPattern(image, repetition);\n    }\n    createRadialGradient(x0, y0, r0, x1, y1, r1) {\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n    }\n    drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n        var a = arguments, _context = this._context;\n        if (a.length === 3) {\n            _context.drawImage(image, sx, sy);\n        }\n        else if (a.length === 5) {\n            _context.drawImage(image, sx, sy, sWidth, sHeight);\n        }\n        else if (a.length === 9) {\n            _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n        }\n    }\n    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {\n        this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);\n    }\n    isPointInPath(x, y, path, fillRule) {\n        if (path) {\n            return this._context.isPointInPath(path, x, y, fillRule);\n        }\n        return this._context.isPointInPath(x, y, fillRule);\n    }\n    fill(...args) {\n        this._context.fill.apply(this._context, args);\n    }\n    fillRect(x, y, width, height) {\n        this._context.fillRect(x, y, width, height);\n    }\n    strokeRect(x, y, width, height) {\n        this._context.strokeRect(x, y, width, height);\n    }\n    fillText(text, x, y, maxWidth) {\n        if (maxWidth) {\n            this._context.fillText(text, x, y, maxWidth);\n        }\n        else {\n            this._context.fillText(text, x, y);\n        }\n    }\n    measureText(text) {\n        return this._context.measureText(text);\n    }\n    getImageData(sx, sy, sw, sh) {\n        return this._context.getImageData(sx, sy, sw, sh);\n    }\n    lineTo(x, y) {\n        this._context.lineTo(x, y);\n    }\n    moveTo(x, y) {\n        this._context.moveTo(x, y);\n    }\n    rect(x, y, width, height) {\n        this._context.rect(x, y, width, height);\n    }\n    putImageData(imageData, dx, dy) {\n        this._context.putImageData(imageData, dx, dy);\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\n    }\n    restore() {\n        this._context.restore();\n    }\n    rotate(angle) {\n        this._context.rotate(angle);\n    }\n    save() {\n        this._context.save();\n    }\n    scale(x, y) {\n        this._context.scale(x, y);\n    }\n    setLineDash(segments) {\n        if (this._context.setLineDash) {\n            this._context.setLineDash(segments);\n        }\n        else if ('mozDash' in this._context) {\n            this._context['mozDash'] = segments;\n        }\n        else if ('webkitLineDash' in this._context) {\n            this._context['webkitLineDash'] = segments;\n        }\n    }\n    getLineDash() {\n        return this._context.getLineDash();\n    }\n    setTransform(a, b, c, d, e, f) {\n        this._context.setTransform(a, b, c, d, e, f);\n    }\n    stroke(path2d) {\n        if (path2d) {\n            this._context.stroke(path2d);\n        }\n        else {\n            this._context.stroke();\n        }\n    }\n    strokeText(text, x, y, maxWidth) {\n        this._context.strokeText(text, x, y, maxWidth);\n    }\n    transform(a, b, c, d, e, f) {\n        this._context.transform(a, b, c, d, e, f);\n    }\n    translate(x, y) {\n        this._context.translate(x, y);\n    }\n    _enableTrace() {\n        var that = this, len = CONTEXT_METHODS.length, origSetter = this.setAttr, n, args;\n        var func = function (methodName) {\n            var origMethod = that[methodName], ret;\n            that[methodName] = function () {\n                args = simplifyArray(Array.prototype.slice.call(arguments, 0));\n                ret = origMethod.apply(that, arguments);\n                that._trace({\n                    method: methodName,\n                    args: args,\n                });\n                return ret;\n            };\n        };\n        for (n = 0; n < len; n++) {\n            func(CONTEXT_METHODS[n]);\n        }\n        that.setAttr = function () {\n            origSetter.apply(that, arguments);\n            var prop = arguments[0];\n            var val = arguments[1];\n            if (prop === 'shadowOffsetX' ||\n                prop === 'shadowOffsetY' ||\n                prop === 'shadowBlur') {\n                val = val / this.canvas.getPixelRatio();\n            }\n            that._trace({\n                property: prop,\n                val: val,\n            });\n        };\n    }\n    _applyGlobalCompositeOperation(node) {\n        const op = node.attrs.globalCompositeOperation;\n        var def = !op || op === 'source-over';\n        if (!def) {\n            this.setAttr('globalCompositeOperation', op);\n        }\n    }\n}\nexports.Context = Context;\nCONTEXT_PROPERTIES.forEach(function (prop) {\n    Object.defineProperty(Context.prototype, prop, {\n        get() {\n            return this._context[prop];\n        },\n        set(val) {\n            this._context[prop] = val;\n        },\n    });\n});\nclass SceneContext extends Context {\n    constructor(canvas, { willReadFrequently = false } = {}) {\n        super(canvas);\n        this._context = canvas._canvas.getContext('2d', {\n            willReadFrequently,\n        });\n    }\n    _fillColor(shape) {\n        var fill = shape.fill();\n        this.setAttr('fillStyle', fill);\n        shape._fillFunc(this);\n    }\n    _fillPattern(shape) {\n        this.setAttr('fillStyle', shape._getFillPattern());\n        shape._fillFunc(this);\n    }\n    _fillLinearGradient(shape) {\n        var grd = shape._getLinearGradient();\n        if (grd) {\n            this.setAttr('fillStyle', grd);\n            shape._fillFunc(this);\n        }\n    }\n    _fillRadialGradient(shape) {\n        const grd = shape._getRadialGradient();\n        if (grd) {\n            this.setAttr('fillStyle', grd);\n            shape._fillFunc(this);\n        }\n    }\n    _fill(shape) {\n        const hasColor = shape.fill(), fillPriority = shape.getFillPriority();\n        if (hasColor && fillPriority === 'color') {\n            this._fillColor(shape);\n            return;\n        }\n        const hasPattern = shape.getFillPatternImage();\n        if (hasPattern && fillPriority === 'pattern') {\n            this._fillPattern(shape);\n            return;\n        }\n        const hasLinearGradient = shape.getFillLinearGradientColorStops();\n        if (hasLinearGradient && fillPriority === 'linear-gradient') {\n            this._fillLinearGradient(shape);\n            return;\n        }\n        const hasRadialGradient = shape.getFillRadialGradientColorStops();\n        if (hasRadialGradient && fillPriority === 'radial-gradient') {\n            this._fillRadialGradient(shape);\n            return;\n        }\n        if (hasColor) {\n            this._fillColor(shape);\n        }\n        else if (hasPattern) {\n            this._fillPattern(shape);\n        }\n        else if (hasLinearGradient) {\n            this._fillLinearGradient(shape);\n        }\n        else if (hasRadialGradient) {\n            this._fillRadialGradient(shape);\n        }\n    }\n    _strokeLinearGradient(shape) {\n        const start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n        if (colorStops) {\n            for (var n = 0; n < colorStops.length; n += 2) {\n                grd.addColorStop(colorStops[n], colorStops[n + 1]);\n            }\n            this.setAttr('strokeStyle', grd);\n        }\n    }\n    _stroke(shape) {\n        var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();\n        if (shape.hasStroke()) {\n            if (!strokeScaleEnabled) {\n                this.save();\n                var pixelRatio = this.getCanvas().getPixelRatio();\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            }\n            this._applyLineCap(shape);\n            if (dash && shape.dashEnabled()) {\n                this.setLineDash(dash);\n                this.setAttr('lineDashOffset', shape.dashOffset());\n            }\n            this.setAttr('lineWidth', shape.strokeWidth());\n            if (!shape.getShadowForStrokeEnabled()) {\n                this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n            }\n            var hasLinearGradient = shape.getStrokeLinearGradientColorStops();\n            if (hasLinearGradient) {\n                this._strokeLinearGradient(shape);\n            }\n            else {\n                this.setAttr('strokeStyle', shape.stroke());\n            }\n            shape._strokeFunc(this);\n            if (!strokeScaleEnabled) {\n                this.restore();\n            }\n        }\n    }\n    _applyShadow(shape) {\n        var _a, _b, _c;\n        var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black', blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5, offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\n            x: 0,\n            y: 0,\n        }, scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;\n        this.setAttr('shadowColor', color);\n        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\n        this.setAttr('shadowOffsetX', offset.x * scaleX);\n        this.setAttr('shadowOffsetY', offset.y * scaleY);\n    }\n}\nexports.SceneContext = SceneContext;\nclass HitContext extends Context {\n    constructor(canvas) {\n        super(canvas);\n        this._context = canvas._canvas.getContext('2d', {\n            willReadFrequently: true,\n        });\n    }\n    _fill(shape) {\n        this.save();\n        this.setAttr('fillStyle', shape.colorKey);\n        shape._fillFuncHit(this);\n        this.restore();\n    }\n    strokeShape(shape) {\n        if (shape.hasHitStroke()) {\n            this._stroke(shape);\n        }\n    }\n    _stroke(shape) {\n        if (shape.hasHitStroke()) {\n            const strokeScaleEnabled = shape.getStrokeScaleEnabled();\n            if (!strokeScaleEnabled) {\n                this.save();\n                var pixelRatio = this.getCanvas().getPixelRatio();\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            }\n            this._applyLineCap(shape);\n            var hitStrokeWidth = shape.hitStrokeWidth();\n            var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\n            this.setAttr('lineWidth', strokeWidth);\n            this.setAttr('strokeStyle', shape.colorKey);\n            shape._strokeFuncHit(this);\n            if (!strokeScaleEnabled) {\n                this.restore();\n            }\n        }\n    }\n}\nexports.HitContext = HitContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}