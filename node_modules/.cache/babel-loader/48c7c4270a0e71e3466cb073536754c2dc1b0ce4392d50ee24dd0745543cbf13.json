{"ast":null,"code":"import Konva from 'konva';\nvar layer = new Konva.Layer();\nvar newLine = null;\nvar newCircle = null;\nvar newEllipse = null;\nvar newTriangle = null;\nvar newRectangle = null;\nvar newSquare = null;\nvar id = 0;\nlet stage, transformer;\nfunction getColorFromSpan(clickedSpan) {\n  var color = window.getComputedStyle(clickedSpan).backgroundColor;\n  return color;\n}\nexport default {\n  name: 'SideBar',\n  data() {\n    return {\n      shapes: [[], [], [], [], [], []]\n    };\n  },\n  methods: {\n    redo: async function () {\n      layer.destroy();\n\n      //get history from backend\n      const temp = await fetch(\"http://localhost:8080/function/redo\");\n      //get array of objects of r=the desired state\n      const desiredState = await temp.json();\n      this.loadShapes(desiredState);\n    },\n    undo: async function () {\n      layer.destroy();\n\n      //get history from backend\n      const temp = await fetch(\"http://localhost:8080/function/undo\");\n      //get array of objects of r=the desired state\n      const desiredState = await temp.json();\n\n      // console.log(desiredState);\n\n      this.loadShapes(desiredState);\n    },\n    async saveData(e) {\n      e.preventDefault();\n      const userInfo = document.querySelector(\".saveForm\");\n      let formData = new FormData(userInfo);\n      var object = {};\n      formData.forEach((value, key) => {\n        if (value === \"JSON\") object[\"format\"] = 1;else if (value === \"XML\") object[\"format\"] = 2;else if (value === \"BOTH\") object[\"format\"] = 3;else {\n          let loc = value;\n          if (loc.includes(\"Users\")) object[key] = loc;\n        }\n      });\n      var json = JSON.stringify(object);\n      if (formData.get(\"saveLoc\")) {\n        await fetch('http://localhost:8080/function/save', {\n          method: 'post',\n          headers: {\n            'Content-type': \"application/json; charset=UTF-8\"\n          },\n          body: json\n        });\n      }\n    },\n    async loadData() {\n      layer.destroy();\n      await fetch('http://localhost:8080/function/load', {\n        method: 'post',\n        headers: {\n          'Contect-type': 'application/json; charset=UTF-8'\n        },\n        body: this.file\n      });\n      const result = await fetch('http://localhost:8080/function/load/program');\n\n      // console.log( result )\n\n      const desiredState = await result.json();\n\n      // console.log(paint)\n\n      this.loadShapes(desiredState);\n    },\n    loadShapes(desiredState) {\n      let size = desiredState.length;\n      console.log(desiredState[0]);\n      id = size;\n      for (let i = 0; i < size; i++) {\n        let currentShape = desiredState[i];\n        stage = new Konva.Stage({\n          container: 'container',\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n        stage.add(layer);\n        if (currentShape[\"shape\"] === \"rectangle\") {\n          newRectangle = new Konva.Rect({\n            x: currentShape[\"x\"],\n            y: currentShape[\"y\"],\n            width: currentShape[\"width\"],\n            height: currentShape[\"height\"],\n            fill: currentShape[\"fill\"],\n            stroke: currentShape[\"stroke\"],\n            strokeWidth: 2,\n            id: currentShape[\"id\"]\n          });\n          layer.add(newRectangle);\n          let selectedColorSpan = null;\n          stage.on('mousedown', function () {\n            if (newRectangle) {\n              newRectangle.on('transformend', () => {\n                const updatedWidth = newRectangle.width() * newRectangle.scaleX();\n                const updatedHeight = newRectangle.height() * newRectangle.scaleY();\n                const updatedRectangleData = {\n                  shape: 'rectangle',\n                  x: newRectangle.position().x,\n                  y: newRectangle.position().y,\n                  width: updatedWidth,\n                  height: updatedHeight,\n                  fill: newRectangle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newRectangle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedRectangleData)\n                });\n              });\n            }\n          });\n          var colorSpans = document.querySelectorAll('.color-span');\n          colorSpans.forEach(span => {\n            span.addEventListener('click', () => {\n              selectedColorSpan = span;\n              this.changeColor(newRectangle, selectedColorSpan, layer);\n              if (newTriangle) {\n                const updatedWidth = newRectangle.width() * newRectangle.scaleX();\n                const updatedHeight = newRectangle.height() * newRectangle.scaleY();\n                const updatedRectangleData = {\n                  shape: 'rectangle',\n                  x: newRectangle.position().x,\n                  y: newRectangle.position().y,\n                  width: updatedWidth,\n                  height: updatedHeight,\n                  fill: newRectangle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newRectangle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedRectangleData)\n                });\n              }\n            });\n          });\n        } else if (currentShape[\"shape\"] === \"circle\") {\n          newCircle = new Konva.Circle({\n            x: currentShape[\"x\"],\n            y: currentShape[\"y\"],\n            radius: currentShape[\"radius\"],\n            fill: currentShape[\"fill\"],\n            stroke: currentShape[\"stroke\"],\n            strokeWidth: 2,\n            id: currentShape[\"id\"]\n          });\n          layer.add(newCircle);\n          stage.on('mousedown', function () {\n            if (newCircle) {\n              newCircle.on('transformend', () => {\n                const updatedRadius = newCircle.radius() * newCircle.scaleX();\n                const updatedCircleData = {\n                  shape: 'circle',\n                  x: newCircle.position().x,\n                  y: newCircle.position().y,\n                  radius: updatedRadius,\n                  fill: newCircle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newCircle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedCircleData)\n                });\n              });\n            }\n          });\n          var selectedColorSpan = null;\n          colorSpans = document.querySelectorAll('.color-span');\n          colorSpans.forEach(span => {\n            span.addEventListener('click', () => {\n              selectedColorSpan = span;\n              this.changeColor(newCircle, selectedColorSpan, layer);\n              if (newCircle) {\n                const updatedRadius = newCircle.radius() * newCircle.scaleX();\n                const updatedCircleData = {\n                  shape: 'circle',\n                  x: newCircle.position().x,\n                  y: newCircle.position().y,\n                  radius: updatedRadius,\n                  fill: newCircle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newRectangle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedCircleData)\n                });\n              }\n            });\n          });\n        } else if (currentShape[\"shape\"] === \"ellipse\") {\n          newEllipse = new Konva.Ellipse({\n            x: currentShape[\"x\"],\n            y: currentShape[\"y\"],\n            radiusX: currentShape[\"radiusX\"],\n            radiusY: currentShape[\"radiusY\"],\n            fill: currentShape[\"fill\"],\n            stroke: currentShape[\"stroke\"],\n            strokeWidth: 2,\n            id: currentShape[\"id\"]\n          });\n          layer.add(newEllipse);\n          selectedColorSpan = null;\n          stage.on('mousedown', function () {\n            if (newEllipse) {\n              newEllipse.on('transformend', () => {\n                const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX();\n                const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY();\n                const updatedEllipseData = {\n                  shape: 'ellipse',\n                  x: newEllipse.position().x,\n                  y: newEllipse.position().y,\n                  radiusX: updatedRadiusX,\n                  radiusY: updatedRadiusY,\n                  fill: newEllipse.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newEllipse.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedEllipseData)\n                });\n              });\n            }\n          });\n          colorSpans = document.querySelectorAll('.color-span');\n          colorSpans.forEach(span => {\n            span.addEventListener('click', () => {\n              selectedColorSpan = span;\n              this.changeColor(newEllipse, selectedColorSpan, layer);\n              if (newEllipse) {\n                const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX();\n                const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY();\n                const updatedEllipseData = {\n                  shape: 'ellipse',\n                  x: newEllipse.position().x,\n                  y: newEllipse.position().y,\n                  radiusX: updatedRadiusX,\n                  radiusY: updatedRadiusY,\n                  fill: newEllipse.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newEllipse.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedEllipseData)\n                });\n              }\n            });\n          });\n        } else if (currentShape[\"shape\"] === \"line\") {\n          newLine = new Konva.Line({\n            points: currentShape[\"points\"],\n            closed: currentShape[\"closed\"],\n            stroke: 'black',\n            strokeWidth: 5,\n            id: currentShape[\"id\"]\n          });\n          layer.add(newLine);\n        } else if (currentShape[\"shape\"] === \"triangle\") {\n          newTriangle = new Konva.Line({\n            points: currentShape[\"points\"],\n            closed: currentShape[\"closed\"],\n            fill: currentShape[\"fill\"],\n            stroke: currentShape[\"stroke\"],\n            strokeWidth: currentShape[\"strokeWidth\"],\n            id: currentShape[\"id\"]\n          });\n          layer.add(newTriangle);\n          selectedColorSpan = null;\n          stage.on('mousedown', function () {\n            if (newTriangle) {\n              newTriangle.on('transformend', () => {\n                const scaleX = newTriangle.scaleX();\n                const scaleY = newTriangle.scaleY();\n                const originalPoints = [newTriangle.points()[0], newTriangle.points()[1], newTriangle.points()[2], newTriangle.points()[3], newTriangle.points()[4], newTriangle.points()[5]];\n                const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY);\n                const updatedTriangleData = {\n                  shape: 'triangle',\n                  points: updatedPoints,\n                  closed: true,\n                  fill: newTriangle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newTriangle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedTriangleData)\n                });\n              });\n            }\n          });\n          colorSpans = document.querySelectorAll('.color-span');\n          colorSpans.forEach(span => {\n            span.addEventListener('click', () => {\n              selectedColorSpan = span;\n              this.changeColor(newTriangle, selectedColorSpan, layer);\n              if (newTriangle) {\n                const scaleX = newTriangle.scaleX();\n                const scaleY = newTriangle.scaleY();\n                const originalPoints = [newTriangle.points()[0], newTriangle.points()[1], newTriangle.points()[2], newTriangle.points()[3], newTriangle.points()[4], newTriangle.points()[5]];\n                const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY);\n                const updatedTriangleData = {\n                  shape: 'triangle',\n                  points: updatedPoints,\n                  closed: true,\n                  fill: newTriangle.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newTriangle.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedTriangleData)\n                });\n              }\n            });\n          });\n        } else if (currentShape[\"shape\"] === \"square\") {\n          newSquare = new Konva.Rect({\n            x: currentShape[\"x\"],\n            y: currentShape[\"y\"],\n            width: currentShape[\"width\"],\n            height: currentShape[\"height\"],\n            fill: currentShape[\"fill\"],\n            stroke: currentShape[\"stroke\"],\n            strokeWidth: 2,\n            id: currentShape[\"id\"]\n          });\n          layer.add(newSquare);\n          stage.on('mousedown', function () {\n            if (newSquare) {\n              newSquare.on('transformend', () => {\n                const updatedLength = newSquare.width() * newSquare.scaleX();\n                const updatedSquareData = {\n                  shape: 'square',\n                  x: newSquare.position().x,\n                  y: newSquare.position().y,\n                  width: updatedLength,\n                  height: updatedLength,\n                  fill: newSquare.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newSquare.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedSquareData)\n                });\n              });\n            }\n          });\n          colorSpans = document.querySelectorAll('.color-span');\n          colorSpans.forEach(span => {\n            span.addEventListener('click', () => {\n              selectedColorSpan = span;\n              this.changeColor(newSquare, selectedColorSpan, layer);\n              if (newSquare) {\n                const updatedLength = newSquare.width() * newSquare.scaleX();\n                const updatedSquareData = {\n                  shape: 'square',\n                  x: newSquare.position().x,\n                  y: newSquare.position().y,\n                  width: updatedLength,\n                  height: updatedLength,\n                  fill: newSquare.fill(),\n                  stroke: 'black',\n                  strokeWidth: 2,\n                  id: newSquare.id()\n                };\n                fetch('http://localhost:8080/', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(updatedSquareData)\n                });\n              }\n            });\n          });\n        }\n      }\n      layer.draw();\n    },\n    move: function () {\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      stage.add(layer);\n      stage.on('click', function (e) {\n        var clickedShape = e.target;\n        if (!(clickedShape instanceof Konva.Shape)) {\n          console.log('Clicked on an unknown shape');\n          return;\n        }\n        clickedShape.draggable(!clickedShape.draggable());\n\n        // Enable drag for the shape\n        clickedShape.draggable(true);\n\n        // Add dragend event listener\n        clickedShape.on('dragend', function () {\n          if (clickedShape instanceof Konva.Circle) {\n            const updatedRadius = clickedShape.radius() * clickedShape.scaleX();\n            const updatedCircleData = {\n              shape: 'circle',\n              id: clickedShape.id(),\n              x: clickedShape.position().x,\n              y: clickedShape.position().y,\n              radius: updatedRadius,\n              fill: clickedShape.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedCircleData)\n            });\n          } else if (clickedShape instanceof Konva.Ellipse) {\n            const updatedRadiusX = clickedShape.radiusX() * clickedShape.scaleX();\n            const updatedRadiusY = clickedShape.radiusY() * clickedShape.scaleY();\n            const updatedEllipseData = {\n              shape: 'ellipse',\n              id: clickedShape.id(),\n              x: clickedShape.position().x,\n              y: clickedShape.position().y,\n              radiusX: updatedRadiusX,\n              radiusY: updatedRadiusY,\n              fill: clickedShape.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedEllipseData)\n            });\n          } else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6) {\n            // Get the current position and scale values\n            const x = clickedShape.x();\n            const y = clickedShape.y();\n            const scaleX = clickedShape.scaleX();\n            const scaleY = clickedShape.scaleY();\n\n            // Get the original points of the triangle\n            const originalPoints = [clickedShape.points()[0], clickedShape.points()[1], clickedShape.points()[2], clickedShape.points()[3], clickedShape.points()[4], clickedShape.points()[5]];\n\n            // Calculate the updated points based on the position and scale values\n            const updatedPoints = originalPoints.map((point, index) => {\n              if (index % 2 === 0) {\n                // X-coordinate: multiply by scaleX and add the x position\n                return point * scaleX + x;\n              } else {\n                // Y-coordinate: multiply by scaleY and add the y position\n                return point * scaleY + y;\n              }\n            });\n\n            // Create the updated triangle data\n            const updatedTriangleData = {\n              shape: 'triangle',\n              id: clickedShape.id(),\n              points: updatedPoints,\n              closed: true,\n              fill: clickedShape.fill() ? clickedShape.fill() : \"white\",\n              stroke: 'black',\n              strokeWidth: 2\n            };\n\n            // Send the updated data to the server\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedTriangleData)\n            });\n          } else if (clickedShape instanceof Konva.Rect) {\n            const updatedWidth = clickedShape.width() * clickedShape.scaleX();\n            const updatedHeight = clickedShape.height() * clickedShape.scaleY();\n            const updatedRectangleData = {\n              shape: clickedShape.width() === clickedShape.height() ? \"square\" : \"rectangle\",\n              id: clickedShape.id(),\n              x: clickedShape.position().x,\n              y: clickedShape.position().y,\n              width: updatedWidth,\n              height: updatedHeight,\n              fill: clickedShape.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedRectangleData)\n            });\n          } else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 4) {\n            const x = clickedShape.x();\n            const y = clickedShape.y();\n            const scaleX = clickedShape.scaleX();\n            const scaleY = clickedShape.scaleY();\n\n            // Get the original points of the triangle\n            const originalPoints = [clickedShape.points()[0], clickedShape.points()[1], clickedShape.points()[2], clickedShape.points()[3]];\n\n            // Calculate the updated points based on the position and scale values\n            const updatedPoints = originalPoints.map((point, index) => {\n              if (index % 2 === 0) {\n                // X-coordinate: multiply by scaleX and add the x position\n                return point * scaleX + x;\n              } else {\n                // Y-coordinate: multiply by scaleY and add the y position\n                return point * scaleY + y;\n              }\n            });\n            const lineData = {\n              shape: \"line\",\n              id: clickedShape.id(),\n              points: updatedPoints,\n              stroke: 'black',\n              strokeWidth: 5\n            };\n\n            // Send the updated data to the server whenever the shape is dragged\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(lineData)\n            });\n          }\n        });\n      });\n    },\n    deleteShape: function () {\n      stage = new Konva.Stage({\n        container: 'container',\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      stage.add(layer);\n      stage.on('click', function (e) {\n        var clickedShape = e.target;\n        if (clickedShape instanceof Konva.Rect || clickedShape instanceof Konva.Circle || clickedShape instanceof Konva.Line || clickedShape instanceof Konva.Ellipse) {\n          const deletedShapeData = {\n            id: clickedShape.id()\n          };\n          fetch('http://localhost:8080/function/delete', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(deletedShapeData)\n          });\n          clickedShape.remove();\n          layer.draw();\n        } else {\n          console.log('Clicked on an unknown shape to be deleted');\n        }\n      });\n    },\n    copySelectedShape: function () {\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      stage.add(layer);\n      var clickedShape = null;\n      var newShape = null;\n      stage.on('click', function (e) {\n        clickedShape = e.target;\n        if (!(clickedShape instanceof Konva.Shape)) {\n          console.log('Clicked on an unknown shape to be copied');\n          return;\n        }\n        if (clickedShape instanceof Konva.Circle || clickedShape instanceof Konva.Ellipse || clickedShape instanceof Konva.Rect || clickedShape instanceof Konva.Line && clickedShape.points().length === 4) {\n          newShape = clickedShape.clone({\n            x: clickedShape.x(),\n            y: clickedShape.y()\n          });\n          newShape.id(++id);\n        } else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6) {\n          var points = clickedShape.points();\n          newShape = new Konva.Line({\n            id: ++id,\n            points: [points[0], points[1], points[2], points[3], points[4], points[5]],\n            closed: true,\n            stroke: clickedShape.stroke(),\n            strokeWidth: clickedShape.strokeWidth()\n          });\n          layer.add(newShape);\n          layer.draw();\n        } else {\n          console.log('Clicked on an unknown shape to be copied');\n          return;\n        }\n        var pointerPos = stage.getPointerPosition();\n        newShape.x(pointerPos.x);\n        newShape.y(pointerPos.y);\n        layer.add(newShape);\n        layer.draw();\n        if (clickedShape instanceof Konva.Circle) {\n          const updatedRadius = clickedShape.radius() * clickedShape.scaleX();\n          const updatedCircleData = {\n            shape: 'circle',\n            id: newShape.id(),\n            x: newShape.position().x,\n            y: newShape.position().y,\n            radius: updatedRadius,\n            fill: clickedShape.fill(),\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/function/copy', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedCircleData)\n          });\n        } else if (clickedShape instanceof Konva.Ellipse) {\n          const updatedRadiusX = clickedShape.radiusX() * clickedShape.scaleX();\n          const updatedRadiusY = clickedShape.radiusY() * clickedShape.scaleY();\n          const updatedEllipseData = {\n            shape: 'ellipse',\n            id: newShape.id(),\n            x: newShape.position().x,\n            y: newShape.position().y,\n            radiusX: updatedRadiusX,\n            radiusY: updatedRadiusY,\n            fill: clickedShape.fill(),\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/function/copy', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedEllipseData)\n          });\n        } else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6) {\n          // Get the current position and scale values\n          const x = newShape.x();\n          const y = newShape.y();\n          const scaleX = newShape.scaleX();\n          const scaleY = newShape.scaleY();\n\n          // Get the original points of the triangle\n          const originalPoints = [newShape.points()[0], newShape.points()[1], newShape.points()[2], newShape.points()[3], newShape.points()[4], newShape.points()[5]];\n\n          // Calculate the updated points based on the position and scale values\n          const updatedPoints = originalPoints.map((point, index) => {\n            if (index % 2 === 0) {\n              // X-coordinate: multiply by scaleX and add the x position\n              return point * scaleX + x;\n            } else {\n              // Y-coordinate: multiply by scaleY and add the y position\n              return point * scaleY + y;\n            }\n          });\n\n          // Create the updated triangle data\n          const updatedTriangleData = {\n            shape: 'triangle',\n            id: newShape.id(),\n            points: updatedPoints,\n            closed: true,\n            fill: clickedShape.fill() ? clickedShape.fill() : \"white\",\n            stroke: 'black',\n            strokeWidth: 2\n          };\n\n          // Send the updated data to the server\n          fetch('http://localhost:8080/function/copy', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedTriangleData)\n          });\n        } else if (clickedShape instanceof Konva.Rect) {\n          const updatedWidth = clickedShape.width() * clickedShape.scaleX();\n          const updatedHeight = clickedShape.height() * clickedShape.scaleY();\n          const updatedRectangleData = {\n            shape: clickedShape.width() === clickedShape.height() ? \"square\" : \"rectangle\",\n            id: newShape.id(),\n            x: newShape.position().x,\n            y: newShape.position().y,\n            width: updatedWidth,\n            height: updatedHeight,\n            fill: clickedShape.fill(),\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/function/copy', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedRectangleData)\n          });\n        } else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 4) {\n          const x = newShape.x();\n          const y = newShape.y();\n          const scaleX = newShape.scaleX();\n          const scaleY = newShape.scaleY();\n\n          // Get the original points of the triangle\n          const originalPoints = [newShape.points()[0], newShape.points()[1], newShape.points()[2], newShape.points()[3]];\n\n          // Calculate the updated points based on the position and scale values\n          const updatedPoints = originalPoints.map((point, index) => {\n            if (index % 2 === 0) {\n              // X-coordinate: multiply by scaleX and add the x position\n              return point * scaleX + x;\n            } else {\n              // Y-coordinate: multiply by scaleY and add the y position\n              return point * scaleY + y;\n            }\n          });\n          const lineData = {\n            shape: \"line\",\n            id: newShape.id(),\n            points: updatedPoints,\n            stroke: 'black',\n            strokeWidth: 5\n          };\n\n          // Send the updated data to the server whenever the shape is dragged\n          fetch('http://localhost:8080/function/copy', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(lineData)\n          });\n        }\n      });\n    },\n    resize: function () {\n      stage = new Konva.Stage({\n        container: 'container',\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n      stage.add(layer);\n      transformer = new Konva.Transformer({\n        enabledAnchors: ['top-right', 'top-left', 'bottom-right', 'bottom-left'],\n        rotateEnabled: false\n      });\n      layer.add(transformer);\n      stage.draw();\n      stage.on('click', e => this.selectShape(e.target));\n    },\n    selectShape(shape) {\n      if (shape) {\n        transformer.attachTo(shape);\n        const shapeType = shape.getClassName();\n        switch (shapeType) {\n          case 'Rect':\n          case 'Square':\n            transformer.nodes([shape]);\n            break;\n          case 'Circle':\n          case 'Ellipse':\n            transformer.nodes([shape]);\n            break;\n          case 'Line':\n            transformer.nodes([shape]);\n            break;\n          case 'RegularPolygon':\n            transformer.nodes([shape]);\n            break;\n          default:\n            break;\n        }\n        layer.draw();\n      }\n    },\n    deselectShape() {\n      transformer.detach();\n      layer.draw();\n    },\n    changeColor(newShape, selectedColorSpan, layer) {\n      if (newShape && selectedColorSpan) {\n        var color = getColorFromSpan(selectedColorSpan);\n        newShape.fill(color);\n        layer.draw();\n      }\n    },\n    drawLine: function () {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      let line = document.querySelector(\".line\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: width,\n        height: height\n      });\n      line.style.left = \"-11%\";\n      stage.add(layer);\n      var point1, point2;\n      stage.on('mousedown', function () {\n        if (!point1) {\n          point1 = stage.getPointerPosition();\n        } else {\n          point2 = stage.getPointerPosition();\n          newLine = new Konva.Line({\n            id: ++id,\n            points: [point1.x, point1.y, point2.x, point2.y],\n            stroke: 'black',\n            strokeWidth: 5\n          });\n          layer.add(newLine);\n          if (newLine) {\n            console.log(newLine.id);\n            const lineData = {\n              shape: \"line\",\n              id: newLine.id(),\n              points: [point1.x, point1.y, point2.x, point2.y],\n              stroke: 'black',\n              strokeWidth: 5\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(lineData)\n            });\n          }\n          point1 = null;\n          point2 = null;\n        }\n      });\n    },\n    drawCircle() {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      let circle = document.querySelector(\".circle\");\n      let radius = document.querySelector(\"#radius\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: width,\n        height: height\n      });\n      circle.style.left = \"-11%\";\n      radius = parseFloat(radius.value);\n      stage.add(layer);\n      var selectedColorSpan = null;\n      newEllipse = null;\n      newTriangle = null;\n      newRectangle = null;\n      newSquare = null;\n      stage.on('mousedown', () => {\n        var pos = stage.getPointerPosition();\n        newCircle = new Konva.Circle({\n          id: ++id,\n          x: pos.x,\n          y: pos.y,\n          radius: radius,\n          fill: 'white',\n          stroke: 'black',\n          strokeWidth: 2\n        });\n        layer.add(newCircle);\n        if (newCircle) {\n          const CircleData = {\n            shape: 'circle',\n            id: newCircle.id(),\n            x: pos.x,\n            y: pos.y,\n            radius: radius,\n            fill: 'white',\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          console.log(CircleData);\n          fetch('http://localhost:8080/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(CircleData)\n          });\n          newCircle.on('transformend', () => {\n            const updatedRadius = newCircle.radius() * newCircle.scaleX();\n            const updatedCircleData = {\n              shape: 'circle',\n              id: newCircle.id(),\n              x: newCircle.position().x,\n              y: newCircle.position().y,\n              radius: updatedRadius,\n              fill: newCircle.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedCircleData)\n            });\n          });\n        }\n      });\n      var colorSpans = document.querySelectorAll('.color-span');\n      colorSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          selectedColorSpan = span;\n          this.changeColor(newCircle, selectedColorSpan, layer);\n          if (newCircle) {\n            const updatedRadius = newCircle.radius() * newCircle.scaleX();\n            const updatedCircleData = {\n              shape: 'circle',\n              id: newCircle.id(),\n              x: newCircle.position().x,\n              y: newCircle.position().y,\n              radius: updatedRadius,\n              fill: newCircle.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedCircleData)\n            });\n          }\n        });\n      });\n    },\n    drawEllipse: function () {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      let ellipse = document.querySelector(\".ellipse\");\n      let radiusX = document.querySelector(\"#radiusX\");\n      let radiusY = document.querySelector(\"#radiusY\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: width,\n        height: height\n      });\n      ellipse.style.left = \"-11%\";\n      radiusX = parseFloat(radiusX.value);\n      radiusY = parseFloat(radiusY.value);\n      stage.add(layer);\n      var selectedColorSpan = null;\n      newCircle = null;\n      newTriangle = null;\n      newRectangle = null;\n      newSquare = null;\n      stage.on('mousedown', function () {\n        var pos = stage.getPointerPosition();\n        newEllipse = new Konva.Ellipse({\n          id: ++id,\n          x: pos.x,\n          y: pos.y,\n          radiusX: radiusX,\n          radiusY: radiusY,\n          fill: 'white',\n          stroke: 'black',\n          strokeWidth: 2\n        });\n        layer.add(newEllipse);\n        if (newEllipse) {\n          const EllipseData = {\n            shape: 'ellipse',\n            id: newEllipse.id(),\n            x: pos.x,\n            y: pos.y,\n            radiusX: radiusX,\n            radiusY: radiusY,\n            fill: 'white',\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(EllipseData)\n          });\n          newEllipse.on('transformend', () => {\n            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX();\n            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY();\n            const updatedEllipseData = {\n              shape: 'ellipse',\n              id: newEllipse.id(),\n              x: newEllipse.position().x,\n              y: newEllipse.position().y,\n              radiusX: updatedRadiusX,\n              radiusY: updatedRadiusY,\n              fill: newEllipse.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedEllipseData)\n            });\n          });\n        }\n      });\n      var colorSpans = document.querySelectorAll('.color-span');\n      colorSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          selectedColorSpan = span;\n          this.changeColor(newEllipse, selectedColorSpan, layer);\n          if (newEllipse) {\n            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX();\n            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY();\n            const updatedEllipseData = {\n              shape: 'ellipse',\n              id: newEllipse.id(),\n              x: newEllipse.position().x,\n              y: newEllipse.position().y,\n              radiusX: updatedRadiusX,\n              radiusY: updatedRadiusY,\n              fill: newEllipse.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedEllipseData)\n            });\n          }\n        });\n      });\n    },\n    drawTriangle: function () {\n      var width = window.innerWidth;\n      var height = window.innerHeight;\n      let triangle = document.querySelector(\".triangle\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: width,\n        height: height\n      });\n      triangle.style.left = \"-11%\";\n      stage.add(layer);\n      var point1, point2, point3;\n      var selectedColorSpan = null;\n      newCircle = null;\n      newEllipse = null;\n      newRectangle = null;\n      newSquare = null;\n      stage.on('mousedown', function () {\n        if (!point1) point1 = stage.getPointerPosition();else if (!point2) point2 = stage.getPointerPosition();else {\n          point3 = stage.getPointerPosition();\n          newTriangle = new Konva.Line({\n            id: (++id).toString(),\n            points: [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\n            closed: true,\n            stroke: 'black',\n            strokeWidth: 2\n          });\n          layer.add(newTriangle);\n          if (newTriangle) {\n            const TriangleData = {\n              shape: 'triangle',\n              id: newTriangle.id(),\n              points: [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\n              closed: true,\n              fill: 'white',\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(TriangleData)\n            });\n            newTriangle.on('transformend', () => {\n              const scaleX = newTriangle.scaleX();\n              const scaleY = newTriangle.scaleY();\n              const originalPoints = [newTriangle.points()[0], newTriangle.points()[1], newTriangle.points()[2], newTriangle.points()[3], newTriangle.points()[4], newTriangle.points()[5]];\n              const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY);\n              const updatedTriangleData = {\n                shape: 'triangle',\n                id: newTriangle.id(),\n                points: updatedPoints,\n                closed: true,\n                fill: newTriangle.fill(),\n                stroke: 'black',\n                strokeWidth: 2\n              };\n              fetch('http://localhost:8080/', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(updatedTriangleData)\n              });\n            });\n          }\n          point1 = null;\n          point2 = null;\n          point3 = null;\n        }\n      });\n      var colorSpans = document.querySelectorAll('.color-span');\n      colorSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          selectedColorSpan = span;\n          this.changeColor(newTriangle, selectedColorSpan, layer);\n          if (newTriangle) {\n            const scaleX = newTriangle.scaleX();\n            const scaleY = newTriangle.scaleY();\n            const originalPoints = [newTriangle.points()[0], newTriangle.points()[1], newTriangle.points()[2], newTriangle.points()[3], newTriangle.points()[4], newTriangle.points()[5]];\n            const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY);\n            const updatedTriangleData = {\n              shape: 'triangle',\n              id: newTriangle.id(),\n              points: updatedPoints,\n              closed: true,\n              fill: newTriangle.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedTriangleData)\n            });\n          }\n        });\n      });\n      point1 = null;\n      point2 = null;\n      point3 = null;\n    },\n    drawRectangle: function () {\n      var Width = window.innerWidth;\n      var Height = window.innerHeight;\n      let rectangle = document.querySelector(\".rectangle\");\n      let width = document.querySelector(\"#width\");\n      let height = document.querySelector(\"#height\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: Width,\n        height: Height\n      });\n      rectangle.style.left = \"-11%\";\n      width = parseFloat(width.value);\n      height = parseFloat(height.value);\n      stage.add(layer);\n      var selectedColorSpan = null;\n      newCircle = null;\n      newEllipse = null;\n      newTriangle = null;\n      newSquare = null;\n      stage.on('mousedown', function () {\n        var pos = stage.getPointerPosition();\n        newRectangle = new Konva.Rect({\n          id: (++id).toString(),\n          x: pos.x,\n          y: pos.y,\n          width: width,\n          height: height,\n          fill: 'white',\n          stroke: 'black',\n          strokeWidth: 2\n        });\n        layer.add(newRectangle);\n        if (newRectangle) {\n          const RectangleData = {\n            shape: 'rectangle',\n            id: newRectangle.id(),\n            x: pos.x,\n            y: pos.y,\n            width: width,\n            height: height,\n            fill: 'white',\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(RectangleData)\n          });\n          newRectangle.on('transformend', () => {\n            const updatedWidth = newRectangle.width() * newRectangle.scaleX();\n            const updatedHeight = newRectangle.height() * newRectangle.scaleY();\n            const updatedRectangleData = {\n              shape: 'rectangle',\n              id: newRectangle.id(),\n              x: newRectangle.position().x,\n              y: newRectangle.position().y,\n              width: updatedWidth,\n              height: updatedHeight,\n              fill: newRectangle.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedRectangleData)\n            });\n          });\n        }\n      });\n      var colorSpans = document.querySelectorAll('.color-span');\n      colorSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          selectedColorSpan = span;\n          this.changeColor(newRectangle, selectedColorSpan, layer);\n          if (newRectangle) {\n            const updatedWidth = newRectangle.width() * newRectangle.scaleX();\n            const updatedHeight = newRectangle.height() * newRectangle.scaleY();\n            const updatedRectangleData = {\n              shape: 'rectangle',\n              id: newRectangle.id(),\n              x: newRectangle.position().x,\n              y: newRectangle.position().y,\n              width: updatedWidth,\n              height: updatedHeight,\n              fill: newRectangle.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedRectangleData)\n            });\n          }\n        });\n      });\n    },\n    drawSquare: function () {\n      var Width = window.innerWidth;\n      var Height = window.innerHeight;\n      let square = document.querySelector(\".square\");\n      let length = document.querySelector(\"#length\");\n      var stage = new Konva.Stage({\n        container: 'container',\n        width: Width,\n        height: Height\n      });\n      square.style.left = \"-11%\";\n      length = parseFloat(length.value);\n      stage.add(layer);\n      var selectedColorSpan = null;\n      newCircle = null;\n      newEllipse = null;\n      newTriangle = null;\n      newRectangle = null;\n      stage.on('mousedown', function () {\n        var pos = stage.getPointerPosition();\n        newSquare = new Konva.Rect({\n          id: (++id).toString(),\n          x: pos.x,\n          y: pos.y,\n          width: length,\n          height: length,\n          fill: 'white',\n          stroke: 'black',\n          strokeWidth: 2\n        });\n        layer.add(newSquare);\n        if (newSquare) {\n          const SquareData = {\n            shape: 'square',\n            id: newSquare.id(),\n            x: pos.x,\n            y: pos.y,\n            width: length,\n            height: length,\n            fill: 'white',\n            stroke: 'black',\n            strokeWidth: 2\n          };\n          fetch('http://localhost:8080/', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(SquareData)\n          });\n          newSquare.on('transformend', () => {\n            const updatedLength = newSquare.width() * newSquare.scaleX();\n            const updatedSquareData = {\n              shape: 'square',\n              id: newSquare.id(),\n              x: newSquare.position().x,\n              y: newSquare.position().y,\n              width: updatedLength,\n              height: updatedLength,\n              fill: newSquare.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedSquareData)\n            });\n          });\n        }\n      });\n      var colorSpans = document.querySelectorAll('.color-span');\n      colorSpans.forEach(span => {\n        span.addEventListener('click', () => {\n          selectedColorSpan = span;\n          this.changeColor(newSquare, selectedColorSpan, layer);\n          if (newSquare) {\n            const updatedLength = newSquare.width() * newSquare.scaleX();\n            const updatedSquareData = {\n              shape: 'square',\n              id: newSquare.id(),\n              x: newSquare.position().x,\n              y: newSquare.position().y,\n              width: updatedLength,\n              height: updatedLength,\n              fill: newSquare.fill(),\n              stroke: 'black',\n              strokeWidth: 2\n            };\n            fetch('http://localhost:8080/', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedSquareData)\n            });\n          }\n        });\n      });\n    },\n    showHideShapeBar: function () {\n      let loadXML = document.querySelector('.loadXML');\n      let loadJSON = document.querySelector('.loadJSON');\n      let saveXML = document.querySelector('.saveXML');\n      let saveJSON = document.querySelector('.saveJSON');\n      let colorPalette = document.querySelector('.colorPalette');\n      let shapeBar = document.querySelector('.shapeBar');\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (colorPalette.style.opacity === \"1\") {\n        colorPalette.style.opacity = \"0\";\n        if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\") {\n          loadXML.style.left = \"-35%\";\n          loadJSON.style.left = \"-35%\";\n          saveXML.style.left = \"-35%\";\n          saveJSON.style.left = \"-35%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"5%\";\n          }, 600);\n        } else {\n          setTimeout(() => {\n            shapeBar.style.left = \"5%\";\n          }, 500);\n        }\n      } else if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\") {\n        loadXML.style.left = \"-35%\";\n        loadJSON.style.left = \"-35%\";\n        saveXML.style.left = \"-35%\";\n        saveJSON.style.left = \"-35%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"5%\";\n        }, 200);\n      } else if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          shapeBar.style.left = \"-2%\";\n        }, 200);\n      } else {\n        if (shapeBar.style.left === \"5%\") shapeBar.style.left = \"-2%\";else shapeBar.style.left = \"5%\";\n      }\n    },\n    showHideColorPalette: function () {\n      let colorPalette = document.querySelector('.colorPalette');\n      let shapeBar = document.querySelector('.shapeBar');\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (shapeBar.style.left === \"5%\") {\n        if (line.style.left === \"12%\") {\n          line.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else if (circle.style.left === \"12%\") {\n          circle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else if (ellipse.style.left === \"12%\") {\n          ellipse.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else if (triangle.style.left === \"12%\") {\n          triangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else if (rectangle.style.left === \"12%\") {\n          rectangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else if (square.style.left === \"12%\") {\n          square.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 400);\n        } else {\n          shapeBar.style.left = \"-2%\";\n          setTimeout(() => {\n            colorPalette.style.opacity = \"1\";\n          }, 200);\n        }\n      } else {\n        if (colorPalette.style.opacity === \"1\") colorPalette.style.opacity = \"0\";else colorPalette.style.opacity = \"1\";\n      }\n    },\n    showHideLineOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          line.style.left = \"12%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          line.style.left = \"12%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          line.style.left = \"12%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          line.style.left = \"12%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          line.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (line.style.left === \"12%\") line.style.left = \"-11%\";else line.style.left = \"12%\";\n      }\n    },\n    showHideCircleOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          circle.style.left = \"12%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          circle.style.left = \"12%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          circle.style.left = \"12%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          circle.style.left = \"12%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          circle.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (circle.style.left === \"12%\") circle.style.left = \"-11%\";else circle.style.left = \"12%\";\n      }\n    },\n    showHideEllipseOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          ellipse.style.left = \"12%\";\n        }, 200);\n      } else if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          ellipse.style.left = \"12%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          ellipse.style.left = \"12%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          ellipse.style.left = \"12%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          ellipse.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (ellipse.style.left === \"12%\") ellipse.style.left = \"-11%\";else ellipse.style.left = \"12%\";\n      }\n    },\n    showHideTriangleOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          triangle.style.left = \"12%\";\n        }, 200);\n      } else if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          triangle.style.left = \"12%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          triangle.style.left = \"12%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          triangle.style.left = \"12%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          triangle.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (triangle.style.left === \"12%\") triangle.style.left = \"-11%\";else triangle.style.left = \"12%\";\n      }\n    },\n    showHideSave: function () {\n      let saveXML = document.querySelector('.saveXML');\n      let saveJSON = document.querySelector('.saveJSON');\n      let shapeBar = document.querySelector('.shapeBar');\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (shapeBar.style.left === \"5%\") {\n        if (line.style.left === \"12%\") {\n          line.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else if (circle.style.left === \"12%\") {\n          circle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else if (ellipse.style.left === \"12%\") {\n          ellipse.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else if (triangle.style.left === \"12%\") {\n          triangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else if (rectangle.style.left === \"12%\") {\n          rectangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else if (square.style.left === \"12%\") {\n          square.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 700);\n        } else {\n          shapeBar.style.left = \"-2%\";\n          setTimeout(() => {\n            saveXML.style.left = \"5%\";\n            saveJSON.style.left = \"5%\";\n          }, 200);\n        }\n      } else {\n        if (saveXML.style.left === \"5%\") {\n          saveXML.style.left = \"-35%\";\n          saveJSON.style.left = \"-35%\";\n        } else {\n          saveXML.style.left = \"5%\";\n          saveJSON.style.left = \"5%\";\n        }\n      }\n    },\n    showHideLoad: function () {\n      let loadXML = document.querySelector('.loadXML');\n      let loadJSON = document.querySelector('.loadJSON');\n      let shapeBar = document.querySelector('.shapeBar');\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (shapeBar.style.left === \"5%\") {\n        if (line.style.left === \"12%\") {\n          line.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else if (circle.style.left === \"12%\") {\n          circle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else if (ellipse.style.left === \"12%\") {\n          ellipse.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else if (triangle.style.left === \"12%\") {\n          triangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else if (rectangle.style.left === \"12%\") {\n          rectangle.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else if (square.style.left === \"12%\") {\n          square.style.left = \"-11%\";\n          setTimeout(() => {\n            shapeBar.style.left = \"-2%\";\n          }, 200);\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 700);\n        } else {\n          shapeBar.style.left = \"-2%\";\n          setTimeout(() => {\n            loadXML.style.left = \"5%\";\n            loadJSON.style.left = \"5%\";\n          }, 200);\n        }\n      } else {\n        if (loadXML.style.left === \"5%\") {\n          loadXML.style.left = \"-35%\";\n          loadJSON.style.left = \"-35%\";\n        } else {\n          loadXML.style.left = \"5%\";\n          loadJSON.style.left = \"5%\";\n        }\n      }\n    },\n    showHideRectangleOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          rectangle.style.left = \"12%\";\n        }, 200);\n      } else if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          rectangle.style.left = \"12%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          rectangle.style.left = \"12%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          rectangle.style.left = \"12%\";\n        }, 200);\n      } else if (square.style.left === \"12%\") {\n        square.style.left = \"-11%\";\n        setTimeout(() => {\n          rectangle.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (rectangle.style.left === \"12%\") rectangle.style.left = \"-11%\";else rectangle.style.left = \"12%\";\n      }\n    },\n    showHideSquareOption: function () {\n      let line = document.querySelector(\".line\");\n      let circle = document.querySelector(\".circle\");\n      let ellipse = document.querySelector(\".ellipse\");\n      let triangle = document.querySelector(\".triangle\");\n      let rectangle = document.querySelector(\".rectangle\");\n      let square = document.querySelector(\".square\");\n      if (line.style.left === \"12%\") {\n        line.style.left = \"-11%\";\n        setTimeout(() => {\n          square.style.left = \"12%\";\n        }, 200);\n      } else if (circle.style.left === \"12%\") {\n        circle.style.left = \"-11%\";\n        setTimeout(() => {\n          square.style.left = \"12%\";\n        }, 200);\n      } else if (ellipse.style.left === \"12%\") {\n        ellipse.style.left = \"-11%\";\n        setTimeout(() => {\n          square.style.left = \"12%\";\n        }, 200);\n      } else if (triangle.style.left === \"12%\") {\n        triangle.style.left = \"-11%\";\n        setTimeout(() => {\n          square.style.left = \"12%\";\n        }, 200);\n      } else if (rectangle.style.left === \"12%\") {\n        rectangle.style.left = \"-11%\";\n        setTimeout(() => {\n          square.style.left = \"12%\";\n        }, 200);\n      } else {\n        if (square.style.left === \"12%\") square.style.left = \"-11%\";else square.style.left = \"12%\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["Konva","layer","Layer","newLine","newCircle","newEllipse","newTriangle","newRectangle","newSquare","id","stage","transformer","getColorFromSpan","clickedSpan","color","window","getComputedStyle","backgroundColor","name","data","shapes","methods","redo","destroy","temp","fetch","desiredState","json","loadShapes","undo","saveData","e","preventDefault","userInfo","document","querySelector","formData","FormData","object","forEach","value","key","loc","includes","JSON","stringify","get","method","headers","body","loadData","file","result","size","length","console","log","i","currentShape","Stage","container","width","innerWidth","height","innerHeight","add","Rect","x","y","fill","stroke","strokeWidth","selectedColorSpan","on","updatedWidth","scaleX","updatedHeight","scaleY","updatedRectangleData","shape","position","colorSpans","querySelectorAll","span","addEventListener","changeColor","Circle","radius","updatedRadius","updatedCircleData","Ellipse","radiusX","radiusY","updatedRadiusX","updatedRadiusY","updatedEllipseData","Line","points","closed","originalPoints","updatedPoints","map","point","index","updatedTriangleData","updatedLength","updatedSquareData","draw","move","clickedShape","target","Shape","draggable","lineData","deleteShape","deletedShapeData","remove","copySelectedShape","newShape","clone","pointerPos","getPointerPosition","resize","Transformer","enabledAnchors","rotateEnabled","selectShape","attachTo","shapeType","getClassName","nodes","deselectShape","detach","drawLine","line","style","left","point1","point2","drawCircle","circle","parseFloat","pos","CircleData","drawEllipse","ellipse","EllipseData","drawTriangle","triangle","point3","toString","TriangleData","drawRectangle","Width","Height","rectangle","RectangleData","drawSquare","square","SquareData","showHideShapeBar","loadXML","loadJSON","saveXML","saveJSON","colorPalette","shapeBar","opacity","setTimeout","showHideColorPalette","showHideLineOption","showHideCircleOption","showHideEllipseOption","showHideTriangleOption","showHideSave","showHideLoad","showHideRectangleOption","showHideSquareOption"],"sources":["C:\\Users\\Al-Gawad\\IdeaProjects\\Year 2\\OOP\\paint\\front_code\\src\\components\\SideBar.vue"],"sourcesContent":["<template>\r\n    <div id = \"container\"></div> \r\n    <div class = \"colorPalette\">\r\n        <span class = \"black color-span\"             ></span>\r\n        <span class = \"gray color-span\"              ></span>\r\n        <span class = \"intermediateGray color-span\"  ></span>\r\n        <span class = \"lightGray color-span\"         ></span>\r\n        <span class = \"veryLightGray color-span\"     ></span>\r\n        <span class = \"white color-span\"             ></span>\r\n        <span class = \"red color-span\"               ></span>\r\n        <span class = \"lightRed color-span\"          ></span>\r\n        <span class = \"pink color-span\"              ></span>\r\n        <span class = \"lightPurple color-span\"       ></span>\r\n        <span class = \"intermediatePurple color-span\"></span>\r\n        <span class = \"purple color-span\"            ></span>\r\n        <span class = \"sky color-span\"               ></span>\r\n        <span class = \"intermediateSky color-span\"   ></span>\r\n        <span class = \"lightSky color-span\"          ></span>\r\n        <span class = \"lightBlue color-span\"         ></span>\r\n        <span class = \"intermediateBlue color-span\"  ></span>\r\n        <span class = \"blue color-span\"              ></span>\r\n        <span class = \"green color-span\"             ></span>\r\n        <span class = \"intermediateGreen color-span\" ></span>\r\n        <span class = \"lightGreen color-span\"        ></span>\r\n        <span class = \"yellow color-span\"            ></span>\r\n        <span class = \"lightOrange color-span\"       ></span>\r\n        <span class = \"orange color-span\"            ></span>\r\n    </div>\r\n    \r\n    <div class = \"options\">\r\n        <div class = \"line\">\r\n            <p>Specifiy the start point and the end point of the line</p>\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawLine\">OK</button>\r\n        </div>\r\n        <div class = \"circle\">\r\n            <label>radius</label> <input type = \"text\" id = \"radius\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawCircle\">OK</button>\r\n        </div>\r\n        <div class = \"ellipse\">\r\n            <label>radius (x)</label> <input type = \"text\" id = \"radiusX\"> <br>\r\n            <label>radius (y)</label> <input type = \"text\" id = \"radiusY\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawEllipse\">OK</button>\r\n        </div>\r\n        <div class = \"triangle\">\r\n            <p>Specifiy the three vertices of the triangle</p>\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawTriangle\">OK</button>\r\n        </div>\r\n        <div class = \"rectangle\">\r\n            <label>width&nbsp;</label> <input type = \"text\" id = \"width\" ><br>\r\n            <label>height     </label> <input type = \"text\" id = \"height\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawRectangle\">OK</button>\r\n        </div>\r\n        <div class = \"square\">\r\n            <label>length</label> <input type=\"text\" id = \"length\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawSquare\">OK</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class = \"shapeBar\">\r\n        <div @click = \"showHideLineOption\"      ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/line--v1.png\"                     /></div>\r\n        <div @click = \"showHideCircleOption\"    ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/circled.png\"                      /></div>\r\n        <div @click = \"showHideEllipseOption\"   ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/ellipse-stroked--v1.png\"          /></div>\r\n        <div @click = \"showHideTriangleOption\"  ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/trine-120.png\"                    /></div>\r\n        <div @click = \"showHideRectangleOption\" ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/fluency-systems-regular/48/ffffff/rectangle.png\"/></div>\r\n        <div @click = \"showHideSquareOption\"    ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/square-90.png\"                    /></div>\r\n    </div>\r\n\r\n        <!-- <div class = \"save\">\r\n            <div class = \"saveXML\">\r\n                <label>XML&nbsp;&nbsp;</label>\r\n                <input type=\"file\" ref=\"file\"/>\r\n                <button @click=\"$refs.file.click()\">open file dialog</button>\r\n            </div>\r\n            <div class = \"saveJSON\">\r\n                <label>JSON&nbsp;&nbsp;</label>\r\n                <input type=\"file\" ref=\"file\"/>\r\n                <button @click=\"$refs.file.click()\">open file dialog</button>\r\n            </div>\r\n        </div> -->\r\n\r\n        <div class = \"save\">\r\n            <div class = \"saveXML\" style=\"display: none;\">\r\n            </div>\r\n            <div class = \"saveJSON\">\r\n                <form class=\"saveForm\">\r\n                    <label>Folder Location&nbsp;&nbsp;</label>\r\n                    <input type=\"text\" name=\"saveLoc\" required/> <br>\r\n                    <label>File Name&nbsp;&nbsp;</label>\r\n                    <input type=\"text\" name=\"saveName\" required/> <br>\r\n                    <label><input type=\"radio\" name = \"save\" value=\"JSON\">JSON&nbsp;</label>\r\n                    <label><input type=\"radio\" name = \"save\" value=\"XML\">XML&nbsp;</label>\r\n                    <label><input type=\"radio\" name = \"save\" value=\"BOTH\">BOTH </label><br>\r\n                    <button type=\"submit\" @click=\"saveData\">Save</button>\r\n                </form>\r\n                <!-- <button @click=\"$refs.file.click()\">open file dialog</button> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class = \"load\">\r\n            <div class = \"loadXML\" style=\"display: none;\">\r\n            </div>\r\n            <div class = \"loadJSON\">\r\n                <label>File to load&nbsp;&nbsp;</label>\r\n                <!-- <input type=\"file\" ref=\"file\" accept=\"application/json, application/xml\" @change=\"loadFileFn\"/> -->\r\n                <input type=\"text\" v-model=\"file\">\r\n                <button @click=\"loadData\">Load</button>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- <div class = \"load\">\r\n            <div class = \"loadXML\">\r\n                <label>XML&nbsp;&nbsp;</label>\r\n                <input type=\"file\" ref=\"file\"/>\r\n                <button @click=\"$refs.file.click()\">open file dialog</button>\r\n            </div>\r\n            <div class = \"loadJSON\">\r\n                <label>JSON&nbsp;&nbsp;</label>\r\n                <input type=\"file\" ref=\"file\"/>\r\n                <button @click=\"$refs.file.click()\">open file dialog</button>\r\n            </div>\r\n        </div> -->\r\n    \r\n    <div class = \"sideBar\">\r\n        <div @click = \"showHideShapeBar\"    ><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/external-becris-lineal-becris/64/ffffff/external-shapes-coding-programming-becris-lineal-becris.png\"/></div>\r\n        <div @click = \"showHideColorPalette\"><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/ios/50/ffffff/paint.png\"                        /></div>\r\n        <div @click = \"resize\"              ><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/ios/50/ffffff/resize-diagonal--v1.png\"          /></div>\r\n        <div @click = \"move\"                ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/move.png\"                        /></div>\r\n        <div @click = \"copySelectedShape\"   ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/fluency-systems-regular/48/ffffff/copy--v1.png\"/></div>\r\n        <div @click = \"deleteShape\"         ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/carbon-copy/100/ffffff/filled-trash.png\"       /></div>\r\n        <div @click = \"undo\"                ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/undo.png\"                                                        /></div>\r\n        <div @click = \"redo\"                ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/redo--v1.png\"                                                    /></div>\r\n        <div @click = \"showHideSave\"        ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/save--v1.png\"                    /></div>\r\n        <div @click = \"showHideLoad\"        ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/pastel-glyph/64/ffffff/upload--v1.png\"         /></div>\r\n    </div>\r\n</template> \r\n<script> \r\n\r\n    import Konva from 'konva' ;\r\n\r\n    \r\n    var layer            = new Konva.Layer() ;\r\n    var newLine          = null ;\r\n    var newCircle        = null ;\r\n    var newEllipse       = null ;\r\n    var newTriangle      = null ;\r\n    var newRectangle     = null ;\r\n    var newSquare        = null ;\r\n    var id               =  0   ;\r\n    let stage, transformer      ; \r\n\r\n    function getColorFromSpan(clickedSpan) {\r\n        var color = window.getComputedStyle(clickedSpan).backgroundColor ;\r\n        return color ;\r\n    }\r\n\r\n    export default {\r\n        name    : 'SideBar',\r\n\r\n        data() {\r\n            return {\r\n            shapes: [[], [], [], [], [], []]\r\n            }\r\n        },\r\n            \r\n        methods : {\r\n\r\n            redo : async function (){\r\n\r\n                layer.destroy()\r\n\r\n                //get history from backend\r\n                const temp = await fetch(\"http://localhost:8080/function/redo\");\r\n                //get array of objects of r=the desired state\r\n                const desiredState = await temp.json();\r\n\r\n                this.loadShapes(desiredState)\r\n\r\n            },\r\n\r\n            undo : async function (){\r\n\r\n                layer.destroy()\r\n\r\n                //get history from backend\r\n                const temp = await fetch(\"http://localhost:8080/function/undo\");\r\n                //get array of objects of r=the desired state\r\n                const desiredState = await temp.json();\r\n\r\n                // console.log(desiredState);\r\n\r\n                this.loadShapes(desiredState)\r\n\r\n            },\r\n\r\n            async saveData(e){\r\n                \r\n                e.preventDefault();\r\n\r\n                const userInfo = document.querySelector(\".saveForm\");\r\n                let formData = new FormData(userInfo);\r\n\r\n\r\n                var object = {};\r\n                formData.forEach((value, key) => {\r\n\r\n                    if( value === \"JSON\" )\r\n                        object[\"format\"] = 1\r\n                    else if( value === \"XML\" )\r\n                        object[\"format\"] = 2\r\n                    else if( value === \"BOTH\" )\r\n                        object[\"format\"] = 3\r\n                    else{\r\n\r\n                        let loc = value\r\n\r\n                        if( loc.includes(\"Users\") )\r\n                            \r\n                            object[key] = loc\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                var json = JSON.stringify(object);\r\n                \r\n                if( formData.get(\"saveLoc\") ){\r\n                    await fetch( 'http://localhost:8080/function/save', {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Content-type': \"application/json; charset=UTF-8\"\r\n                        },\r\n                        body: json,\r\n                    });\r\n                }\r\n            \r\n            },\r\n\r\n            async loadData(){\r\n                layer.destroy()\r\n                await fetch('http://localhost:8080/function/load', {\r\n                    method: 'post',\r\n                    headers: {\r\n                        'Contect-type': 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: this.file\r\n                });    \r\n\r\n                const result = await fetch('http://localhost:8080/function/load/program');\r\n                \r\n                // console.log( result )\r\n\r\n                const desiredState = await result.json();\r\n\r\n                // console.log(paint)\r\n\r\n                this.loadShapes(desiredState)\r\n\r\n            },\r\n\r\n            loadShapes(desiredState){\r\n\r\n                let size = desiredState.length;\r\n\r\n                console.log(desiredState[0])\r\n\r\n                id = size\r\n\r\n                for(let i=0;i<size;i++){\r\n\r\n                    let currentShape = desiredState[i];\r\n\r\n                    \r\n                    stage = new Konva.Stage({\r\n                        container : 'container',\r\n                        width     : window.innerWidth,\r\n                        height    : window.innerHeight,\r\n                    }) ;\r\n                    \r\n                    stage.add(layer) ;\r\n\r\n\r\n                    if ( currentShape[\"shape\"] === \"rectangle\" ){\r\n                        newRectangle   = new Konva.Rect({\r\n                            x            : currentShape[\"x\"],\r\n                            y            : currentShape[\"y\"],\r\n                            width        : currentShape[\"width\"],\r\n                            height       : currentShape[\"height\"],\r\n                            fill         : currentShape[\"fill\"],\r\n                            stroke       : currentShape[\"stroke\"],\r\n                            strokeWidth  : 2,\r\n                            id           : currentShape[\"id\"]\r\n                        }) ;\r\n                        layer.add(newRectangle ) ;\r\n                        \r\n                        let selectedColorSpan = null;\r\n\r\n                        stage.on('mousedown', function () {\r\n                            if(newRectangle){\r\n                                newRectangle.on('transformend', () => {\r\n\r\n                                    const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                                    const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                                    const updatedRectangleData = {\r\n                                        shape        : 'rectangle',\r\n                                        x            : newRectangle.position().x,\r\n                                        y            : newRectangle.position().y,\r\n                                        width        : updatedWidth,\r\n                                        height       : updatedHeight,\r\n                                        fill         : newRectangle.fill(),\r\n                                        stroke       : 'black',\r\n                                        strokeWidth  : 2,\r\n                                        id           : newRectangle.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedRectangleData),\r\n                                    }) ;\r\n\r\n                                }) ;\r\n                            }\r\n                        })\r\n\r\n                        var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                        colorSpans.forEach((span) => {\r\n                            span.addEventListener('click', () => {\r\n                                selectedColorSpan = span ;\r\n                                this.changeColor(newRectangle, selectedColorSpan, layer) ;\r\n\r\n                                if (newTriangle){\r\n                                \r\n                                    const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                                    const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                                    const updatedRectangleData = {\r\n                                        shape        : 'rectangle',\r\n                                        x            : newRectangle.position().x,\r\n                                        y            : newRectangle.position().y,\r\n                                        width        : updatedWidth,\r\n                                        height       : updatedHeight,\r\n                                        fill         : newRectangle.fill(),\r\n                                        stroke       : 'black',\r\n                                        strokeWidth  : 2,\r\n                                        id           : newRectangle.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedRectangleData),\r\n                                    }) ;\r\n\r\n                                }    \r\n\r\n                            }) ; \r\n                                \r\n                        }) ;\r\n\r\n                    } \r\n                    else if (  currentShape[\"shape\"] === \"circle\" ){\r\n                        newCircle = new Konva.Circle({\r\n                            x           : currentShape[\"x\"],\r\n                            y           : currentShape[\"y\"],\r\n                            radius      : currentShape[\"radius\"],\r\n                            fill        : currentShape[\"fill\"],\r\n                            stroke      : currentShape[\"stroke\"],\r\n                            strokeWidth : 2,\r\n                            id           : currentShape[\"id\"]\r\n                        }) ;\r\n                        layer.add(newCircle) ;\r\n\r\n\r\n                        stage.on('mousedown', function () {\r\n                            if(newCircle){\r\n\r\n                                newCircle.on('transformend', () => {\r\n                                    \r\n                                    const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                                    const updatedCircleData = {\r\n                                        shape       : 'circle',\r\n                                        x           : newCircle.position().x,\r\n                                        y           : newCircle.position().y,\r\n                                        radius      : updatedRadius,\r\n                                        fill        : newCircle.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                        id           : newCircle.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method  : 'POST',\r\n                                        headers : {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedCircleData),\r\n                                    }) ;\r\n                                \r\n                                }) ;    \r\n                            }\r\n                        })\r\n                        \r\n                        var selectedColorSpan = null ;\r\n\r\n                        colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                        colorSpans.forEach((span) => {\r\n                            span.addEventListener('click', () => {\r\n                                selectedColorSpan = span ;\r\n                                this.changeColor(newCircle, selectedColorSpan, layer) ;\r\n                                \r\n                                if (newCircle){\r\n\r\n                                    const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                                    const updatedCircleData = {\r\n                                        shape       : 'circle',\r\n                                        x           : newCircle.position().x,\r\n                                        y           : newCircle.position().y,\r\n                                        radius      : updatedRadius,\r\n                                        fill        : newCircle.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                        id           : newRectangle.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method  : 'POST',\r\n                                        headers : {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedCircleData),\r\n                                    }) ;\r\n\r\n                                }\r\n\r\n                            }) ; \r\n\r\n                        }) ;\r\n\r\n                        \r\n\r\n                    } \r\n                    else if (  currentShape[\"shape\"] === \"ellipse\" ){\r\n                        newEllipse   = new Konva.Ellipse({\r\n                            x           : currentShape[\"x\"],\r\n                            y           : currentShape[\"y\"],\r\n                            radiusX      : currentShape[\"radiusX\"],\r\n                            radiusY      : currentShape[\"radiusY\"],\r\n                            fill        : currentShape[\"fill\"],\r\n                            stroke      : currentShape[\"stroke\"],\r\n                            strokeWidth : 2,\r\n                            id           : currentShape[\"id\"]\r\n                        }) ;\r\n                        layer.add(newEllipse) ;\r\n\r\n                        selectedColorSpan = null ;\r\n                        \r\n                        stage.on('mousedown', function () {\r\n\r\n                            if (newEllipse){\r\n\r\n                                newEllipse.on('transformend', () => {\r\n\r\n                                    const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                                    const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                                    const updatedEllipseData = {\r\n                                        shape       : 'ellipse',\r\n                                        x           : newEllipse.position().x,\r\n                                        y           : newEllipse.position().y,\r\n                                        radiusX     : updatedRadiusX,\r\n                                        radiusY     : updatedRadiusY,\r\n                                        fill        : newEllipse.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                        id           : newEllipse.id()\r\n                                    };\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedEllipseData),\r\n                                    }) ;\r\n\r\n                                }) ;\r\n\r\n                            }\r\n                        })\r\n\r\n                        colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                        colorSpans.forEach((span) => {\r\n                            span.addEventListener('click', () => {\r\n                                selectedColorSpan = span ;\r\n                                this.changeColor(newEllipse, selectedColorSpan, layer) ;\r\n                                \r\n                                if (newEllipse){\r\n\r\n                                    const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                                    const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                                    const updatedEllipseData = {\r\n                                        shape       : 'ellipse',\r\n                                        x           : newEllipse.position().x,\r\n                                        y           : newEllipse.position().y,\r\n                                        radiusX     : updatedRadiusX,\r\n                                        radiusY     : updatedRadiusY,\r\n                                        fill        : newEllipse.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                        id           : newEllipse.id()\r\n                                    };\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedEllipseData),\r\n                                    }) ;\r\n\r\n                                }  \r\n                                    \r\n                            }) ; \r\n\r\n                        }) ;\r\n                    } \r\n                    else if (  currentShape[\"shape\"] === \"line\" ){\r\n                        newLine = new Konva.Line({\r\n                            points      : currentShape[\"points\"],\r\n                            closed      : currentShape[\"closed\"],\r\n                            stroke      : 'black',\r\n                            strokeWidth : 5,\r\n                            id          : currentShape[\"id\"]\r\n                        }); \r\n                        layer.add(newLine) ;\r\n                    }\t\r\n                    else if (  currentShape[\"shape\"] === \"triangle\" ){\r\n                        newTriangle = new Konva.Line({\r\n                            points      : currentShape[\"points\"],\r\n                            closed      : currentShape[\"closed\"],\r\n                            fill        : currentShape[\"fill\"],\r\n                            stroke      : currentShape[\"stroke\"],\r\n                            strokeWidth : currentShape[\"strokeWidth\"],\r\n                            id          : currentShape[\"id\"]\r\n                        }); \r\n                        layer.add(newTriangle) ;\r\n\r\n                        selectedColorSpan = null ;\r\n\r\n                        stage.on('mousedown', function () {\r\n\r\n                            if (newTriangle){    \r\n\r\n                                newTriangle.on('transformend', () => {\r\n\r\n                                    const scaleX = newTriangle.scaleX() ;\r\n                                    const scaleY = newTriangle.scaleY() ;\r\n\r\n                                    const originalPoints = [\r\n                                        newTriangle.points()[0],\r\n                                        newTriangle.points()[1],\r\n                                        newTriangle.points()[2],\r\n                                        newTriangle.points()[3],\r\n                                        newTriangle.points()[4],\r\n                                        newTriangle.points()[5]\r\n                                    ] ;\r\n\r\n                                    const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                                        const updatedTriangleData = {\r\n                                            shape       : 'triangle',\r\n                                            points      : updatedPoints,                                \r\n                                            closed      : true,\r\n                                            fill        : newTriangle.fill(),\r\n                                            stroke      : 'black',\r\n                                            strokeWidth : 2,\r\n                                            id           : newTriangle.id()\r\n                                        } ;\r\n\r\n                                        fetch('http://localhost:8080/', {\r\n                                            method: 'POST',\r\n                                            headers: {\r\n                                                'Content-Type': 'application/json',\r\n                                            },\r\n                                            body: JSON.stringify(updatedTriangleData),\r\n                                        }) ;\r\n                                \r\n                                }) ;\r\n                            \r\n                            } \r\n\r\n                        }) ;\r\n\r\n                        colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                        colorSpans.forEach((span) => {\r\n                            span.addEventListener('click', () => {\r\n                                selectedColorSpan = span ;\r\n                                this.changeColor(newTriangle, selectedColorSpan, layer) ;\r\n\r\n                                if(newTriangle){\r\n\r\n                                    const scaleX = newTriangle.scaleX() ;\r\n                                    const scaleY = newTriangle.scaleY() ;\r\n\r\n                                    const originalPoints = [\r\n                                        newTriangle.points()[0],\r\n                                        newTriangle.points()[1],\r\n                                        newTriangle.points()[2],\r\n                                        newTriangle.points()[3],\r\n                                        newTriangle.points()[4],\r\n                                        newTriangle.points()[5]\r\n                                    ] ;\r\n\r\n                                    const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                                    const updatedTriangleData = {\r\n                                        shape       : 'triangle',\r\n                                        points      : updatedPoints,                                \r\n                                        closed      : true,\r\n                                        fill        : newTriangle.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                        id           : newTriangle.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedTriangleData),\r\n                                    }) ;\r\n\r\n                                }    \r\n\r\n                            }) ;\r\n                            \r\n                        }) ;\r\n\r\n                        \r\n                    }\t\r\n                    else if (  currentShape[\"shape\"] === \"square\" ){\r\n                        newSquare = new Konva.Rect({\r\n                            x            : currentShape[\"x\"],\r\n                            y            : currentShape[\"y\"],\r\n                            width        : currentShape[\"width\"],\r\n                            height       : currentShape[\"height\"],\r\n                            fill         : currentShape[\"fill\"],\r\n                            stroke       : currentShape[\"stroke\"],\r\n                            strokeWidth  : 2,\r\n                            id           : currentShape[\"id\"]\r\n                        }); \r\n                        layer.add(newSquare) ;\r\n\r\n                        stage.on('mousedown', function () {   \r\n                            if (newSquare){\r\n\r\n                                newSquare.on('transformend', () => {\r\n\r\n                                    const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                                    \r\n                                    const updatedSquareData = {\r\n                                        shape        : 'square',\r\n                                        x            : newSquare.position().x,\r\n                                        y            : newSquare.position().y,\r\n                                        width        : updatedLength,\r\n                                        height       : updatedLength,\r\n                                        fill         : newSquare.fill(),\r\n                                        stroke       : 'black',\r\n                                        strokeWidth  : 2,\r\n                                        id           : newSquare.id()\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedSquareData),\r\n                                    }) ;\r\n\r\n                                }) ;\r\n\r\n                            }    \r\n\r\n                        }) ;\r\n\r\n                        colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                        colorSpans.forEach((span) => {\r\n                        span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newSquare, selectedColorSpan, layer) ;\r\n\r\n                        if (newSquare){\r\n\r\n                            const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                            \r\n                            const updatedSquareData = {\r\n                                shape        : 'square',\r\n                                x            : newSquare.position().x,\r\n                                y            : newSquare.position().y,\r\n                                width        : updatedLength,\r\n                                height       : updatedLength,\r\n                                fill         : newSquare.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                                id           : newSquare.id()\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedSquareData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                        }) ; \r\n\r\n                        }) \r\n                    }\t\t\r\n                }\r\n\r\n                    layer.draw() ;\r\n\r\n            },\r\n\r\n            move: function () {\r\n\r\n                var stage = new Konva.Stage({\r\n                    container: 'container',\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n\r\n                stage.add(layer);\r\n\r\n                stage.on('click', function (e) {\r\n                    var clickedShape = e.target;\r\n\r\n                    if (!(clickedShape instanceof Konva.Shape)) {\r\n                        console.log('Clicked on an unknown shape');\r\n                        return;\r\n                    }\r\n\r\n                    clickedShape.draggable(!clickedShape.draggable());\r\n\r\n                            // Enable drag for the shape\r\n                    clickedShape.draggable(true);\r\n\r\n                    // Add dragend event listener\r\n                    clickedShape.on('dragend', function () {\r\n                        if (clickedShape instanceof Konva.Circle){\r\n\r\n                            const updatedRadius = clickedShape.radius() * clickedShape.scaleX() ;\r\n\r\n                            const updatedCircleData = {\r\n                                shape       : 'circle',\r\n                                id          : clickedShape.id(), \r\n                                x           : clickedShape.position().x,\r\n                                y           : clickedShape.position().y,\r\n                                radius      : updatedRadius,\r\n                                fill        : clickedShape.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method  : 'POST',\r\n                                headers : {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedCircleData),\r\n                            }) ;\r\n\r\n\r\n                        }\r\n\r\n                            else if (clickedShape instanceof Konva.Ellipse){\r\n\r\n                            const updatedRadiusX = clickedShape.radiusX() * clickedShape.scaleX() ;\r\n                            const updatedRadiusY = clickedShape.radiusY() * clickedShape.scaleY() ;\r\n\r\n                            const updatedEllipseData = {\r\n                                shape       : 'ellipse',\r\n                                id          : clickedShape.id(), \r\n                                x           : clickedShape.position().x,\r\n                                y           : clickedShape.position().y,\r\n                                radiusX     : updatedRadiusX,\r\n                                radiusY     : updatedRadiusY,\r\n                                fill        : clickedShape.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            };\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedEllipseData),\r\n                            }) ;\r\n\r\n                            \r\n                        }\r\n\r\n                            else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6) {\r\n                                // Get the current position and scale values\r\n                                const x = clickedShape.x();\r\n                                const y = clickedShape.y();\r\n                                const scaleX = clickedShape.scaleX();\r\n                                const scaleY = clickedShape.scaleY();\r\n\r\n                                // Get the original points of the triangle\r\n                                const originalPoints = [\r\n                                    clickedShape.points()[0],\r\n                                    clickedShape.points()[1],\r\n                                    clickedShape.points()[2],\r\n                                    clickedShape.points()[3],\r\n                                    clickedShape.points()[4],\r\n                                    clickedShape.points()[5]\r\n                                ];\r\n\r\n                                // Calculate the updated points based on the position and scale values\r\n                                const updatedPoints = originalPoints.map((point, index) => {\r\n                                    if (index % 2 === 0) {\r\n                                        // X-coordinate: multiply by scaleX and add the x position\r\n                                        return point * scaleX + x;\r\n                                    } else {\r\n                                        // Y-coordinate: multiply by scaleY and add the y position\r\n                                        return point * scaleY + y;\r\n                                    }\r\n                                });\r\n\r\n                                // Create the updated triangle data\r\n                                const updatedTriangleData = {\r\n                                    shape: 'triangle',\r\n                                    id: clickedShape.id(),\r\n                                    points: updatedPoints,\r\n                                    closed: true,\r\n                                    fill: clickedShape.fill() ? clickedShape.fill() : \"white\",\r\n                                    stroke: 'black',\r\n                                    strokeWidth: 2,\r\n                                };\r\n\r\n                                // Send the updated data to the server\r\n                                fetch('http://localhost:8080/', {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify(updatedTriangleData),\r\n                                });\r\n                            }\r\n\r\n                            else if (clickedShape instanceof Konva.Rect){\r\n\r\n                                const updatedWidth  = clickedShape.width()  * clickedShape.scaleX() ;\r\n                                const updatedHeight = clickedShape.height() * clickedShape.scaleY() ;\r\n\r\n                                const updatedRectangleData = {\r\n                                    shape        : clickedShape.width() === clickedShape.height() ? \"square\" : \"rectangle\",\r\n                                    id           : clickedShape.id(), \r\n                                    x            : clickedShape.position().x,\r\n                                    y            : clickedShape.position().y,\r\n                                    width        : updatedWidth,\r\n                                    height       : updatedHeight,\r\n                                    fill         : clickedShape.fill(),\r\n                                    stroke       : 'black',\r\n                                    strokeWidth  : 2,\r\n                                } ;\r\n\r\n                                fetch('http://localhost:8080/', {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                    },\r\n                                    body: JSON.stringify(updatedRectangleData),\r\n                                }) ;\r\n\r\n                                }\r\n\r\n\r\n                            else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 4) {\r\n                                \r\n                                const x = clickedShape.x();\r\n                                const y = clickedShape.y();\r\n                                const scaleX = clickedShape.scaleX();\r\n                                const scaleY = clickedShape.scaleY();\r\n\r\n                                // Get the original points of the triangle\r\n                                const originalPoints = [\r\n                                    clickedShape.points()[0],\r\n                                    clickedShape.points()[1],\r\n                                    clickedShape.points()[2],\r\n                                    clickedShape.points()[3]\r\n                                ];\r\n\r\n                                // Calculate the updated points based on the position and scale values\r\n                                const updatedPoints = originalPoints.map((point, index) => {\r\n                                    if (index % 2 === 0) {\r\n                                        // X-coordinate: multiply by scaleX and add the x position\r\n                                        return point * scaleX + x;\r\n                                    } else {\r\n                                        // Y-coordinate: multiply by scaleY and add the y position\r\n                                        return point * scaleY + y;\r\n                                    }\r\n                                });    \r\n                                \r\n                                const lineData = {\r\n                                        shape: \"line\",\r\n                                        id: clickedShape.id(),\r\n                                        points: updatedPoints,\r\n                                        stroke: 'black',\r\n                                        strokeWidth: 5,\r\n                                    };\r\n\r\n                                    // Send the updated data to the server whenever the shape is dragged\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(lineData),\r\n                                    });\r\n\r\n\r\n                            }\r\n\r\n                    });\r\n                        \r\n                })\r\n                \r\n            },\r\n\r\n            deleteShape: function () {\r\n                stage = new Konva.Stage({\r\n                    container: 'container',\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n\r\n                stage.add(layer);\r\n\r\n                stage.on('click', function (e) {\r\n                    var clickedShape = e.target;\r\n\r\n                    if (clickedShape instanceof Konva.Rect || clickedShape instanceof Konva.Circle || clickedShape instanceof Konva.Line || clickedShape instanceof Konva.Ellipse) {\r\n\r\n                        const deletedShapeData = {\r\n                            id: clickedShape.id(),\r\n                        };\r\n\r\n                        fetch('http://localhost:8080/function/delete', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(deletedShapeData),\r\n                        });\r\n\r\n                        clickedShape.remove();\r\n                        layer.draw();\r\n                    } else {\r\n                        console.log('Clicked on an unknown shape to be deleted');\r\n                    }\r\n                });\r\n            },\r\n\r\n            copySelectedShape: function () {\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : window.innerWidth,\r\n                    height    : window.innerHeight,\r\n                }) ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var clickedShape = null ;\r\n                var newShape     = null ;\r\n\r\n                stage.on('click', function (e) {\r\n                    clickedShape = e.target ;\r\n\r\n                    if (!(clickedShape instanceof Konva.Shape)) {\r\n                        console.log('Clicked on an unknown shape to be copied');\r\n                        return ;\r\n                    }\r\n\r\n                    if (\r\n                        clickedShape instanceof Konva.Circle ||\r\n                        clickedShape instanceof Konva.Ellipse ||\r\n                        clickedShape instanceof Konva.Rect ||\r\n                        (clickedShape instanceof Konva.Line && clickedShape.points().length === 4)\r\n                    ) \r\n                    {\r\n                        newShape = clickedShape.clone({ x: clickedShape.x(), y: clickedShape.y() }) ;\r\n                        newShape.id(++id);\r\n                    } \r\n                    else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6 ) {\r\n                        var points = clickedShape.points() ;\r\n                        newShape   = new Konva.Line({\r\n                            id          : ++id,\r\n                            points      : [points[0], points[1] ,points[2], points[3], points[4], points[5]] ,\r\n                            closed      : true, \r\n                            stroke      : clickedShape.stroke(),\r\n                            strokeWidth : clickedShape.strokeWidth(),\r\n                        }) ;\r\n\r\n                        layer.add(newShape) ;\r\n                        layer.draw() ;\r\n\r\n                    } \r\n                    else {\r\n                        console.log('Clicked on an unknown shape to be copied') ;\r\n                        return ;\r\n                    }\r\n\r\n                    var pointerPos = stage.getPointerPosition() ;\r\n                    newShape.x(pointerPos.x) ;\r\n                    newShape.y(pointerPos.y) ;\r\n                    layer.add(newShape) ;\r\n                    layer.draw() ;\r\n\r\n\r\n                    if (clickedShape instanceof Konva.Circle){\r\n\r\n                        const updatedRadius = clickedShape.radius() * clickedShape.scaleX() ;\r\n\r\n                        const updatedCircleData = {\r\n                            shape       : 'circle',\r\n                            id          : newShape.id(),\r\n                            x           : newShape.position().x,\r\n                            y           : newShape.position().y,\r\n                            radius      : updatedRadius,\r\n                            fill        : clickedShape.fill(),\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        } ;\r\n\r\n                        fetch('http://localhost:8080/function/copy', {\r\n                            method  : 'POST',\r\n                            headers : {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(updatedCircleData),\r\n                        }) ;\r\n\r\n                    }\r\n\r\n                    else if (clickedShape instanceof Konva.Ellipse){\r\n                        \r\n                        const updatedRadiusX = clickedShape.radiusX() * clickedShape.scaleX() ;\r\n                        const updatedRadiusY = clickedShape.radiusY() * clickedShape.scaleY() ;\r\n\r\n                        const updatedEllipseData = {\r\n                            shape       : 'ellipse',\r\n                            id          : newShape.id(),\r\n                            x           : newShape.position().x,\r\n                            y           : newShape.position().y,\r\n                            radiusX     : updatedRadiusX,\r\n                            radiusY     : updatedRadiusY,\r\n                            fill        : clickedShape.fill(),\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        };\r\n\r\n                        fetch('http://localhost:8080/function/copy', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(updatedEllipseData),\r\n                        }) ;\r\n                    \r\n                    }\r\n\r\n                    else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 6) {\r\n                                // Get the current position and scale values\r\n                        const x = newShape.x();\r\n                        const y = newShape.y();\r\n                        const scaleX = newShape.scaleX();\r\n                        const scaleY = newShape.scaleY();\r\n\r\n                        // Get the original points of the triangle\r\n                        const originalPoints = [\r\n                            newShape.points()[0],\r\n                            newShape.points()[1],\r\n                            newShape.points()[2],\r\n                            newShape.points()[3],\r\n                            newShape.points()[4],\r\n                            newShape.points()[5]\r\n                        ];\r\n\r\n                        // Calculate the updated points based on the position and scale values\r\n                        const updatedPoints = originalPoints.map((point, index) => {\r\n                            if (index % 2 === 0) {\r\n                                // X-coordinate: multiply by scaleX and add the x position\r\n                                return point * scaleX + x;\r\n                            } else {\r\n                                // Y-coordinate: multiply by scaleY and add the y position\r\n                                return point * scaleY + y;\r\n                            }\r\n                        });\r\n\r\n                        // Create the updated triangle data\r\n                        const updatedTriangleData = {\r\n                            shape: 'triangle',\r\n                            id: newShape.id(),\r\n                            points: updatedPoints,\r\n                            closed: true,\r\n                            fill: clickedShape.fill() ? clickedShape.fill() : \"white\",\r\n                            stroke: 'black',\r\n                            strokeWidth: 2,\r\n                        };\r\n\r\n                        // Send the updated data to the server\r\n                        fetch('http://localhost:8080/function/copy', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(updatedTriangleData),\r\n                        });\r\n\r\n                    }\r\n\r\n                    else if (clickedShape instanceof Konva.Rect){\r\n\r\n                        const updatedWidth  = clickedShape.width()  * clickedShape.scaleX() ;\r\n                        const updatedHeight = clickedShape.height() * clickedShape.scaleY() ;\r\n\r\n                        const updatedRectangleData = {\r\n                            shape        : clickedShape.width() === clickedShape.height() ? \"square\" : \"rectangle\",\r\n                            id           : newShape.id(),\r\n                            x            : newShape.position().x,\r\n                            y            : newShape.position().y,\r\n                            width        : updatedWidth,\r\n                            height       : updatedHeight,\r\n                            fill         : clickedShape.fill(),\r\n                            stroke       : 'black',\r\n                            strokeWidth  : 2,\r\n                        } ;\r\n\r\n                        fetch('http://localhost:8080/function/copy', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(updatedRectangleData),\r\n                        }) ;\r\n                        \r\n                    }\r\n                    \r\n                    else if (clickedShape instanceof Konva.Line && clickedShape.points().length === 4) {\r\n                                \r\n                                const x = newShape.x();\r\n                                const y = newShape.y();\r\n                                const scaleX = newShape.scaleX();\r\n                                const scaleY = newShape.scaleY();\r\n\r\n                                // Get the original points of the triangle\r\n                                const originalPoints = [\r\n                                    newShape.points()[0],\r\n                                    newShape.points()[1],\r\n                                    newShape.points()[2],\r\n                                    newShape.points()[3]\r\n                                ];\r\n\r\n                                // Calculate the updated points based on the position and scale values\r\n                                const updatedPoints = originalPoints.map((point, index) => {\r\n                                    if (index % 2 === 0) {\r\n                                        // X-coordinate: multiply by scaleX and add the x position\r\n                                        return point * scaleX + x;\r\n                                    } else {\r\n                                        // Y-coordinate: multiply by scaleY and add the y position\r\n                                        return point * scaleY + y;\r\n                                    }\r\n                                });    \r\n                                \r\n                                const lineData = {\r\n                                        shape: \"line\",\r\n                                        id: newShape.id(),\r\n                                        points: updatedPoints,\r\n                                        stroke: 'black',\r\n                                        strokeWidth: 5,\r\n                                    };\r\n\r\n                                    // Send the updated data to the server whenever the shape is dragged\r\n                                    fetch('http://localhost:8080/function/copy', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(lineData),\r\n                                    });\r\n\r\n                            }\r\n\r\n                        }) ;\r\n\r\n                    },\r\n\r\n            resize : function() {\r\n\r\n                stage = new Konva.Stage({\r\n                    container: 'container',\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n\r\n                stage.add(layer);\r\n\r\n                transformer = new Konva.Transformer({\r\n                    enabledAnchors: ['top-right', 'top-left', 'bottom-right', 'bottom-left'],\r\n                    rotateEnabled: false\r\n                });\r\n                \r\n                layer.add(transformer);\r\n\r\n                stage.draw();\r\n\r\n                stage.on('click', (e) => this.selectShape(e.target)) ;\r\n\r\n            },\r\n\r\n            selectShape(shape) {\r\n                if (shape) {\r\n                    transformer.attachTo(shape);\r\n\r\n                    const shapeType = shape.getClassName() ;\r\n\r\n                    switch (shapeType) {\r\n                        case 'Rect'  :\r\n                        case 'Square':\r\n\r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n\r\n                        case 'Circle'  :\r\n                        case 'Ellipse' :\r\n  \r\n                        transformer.nodes([shape]) ;\r\n                            break ;\r\n                        \r\n                        case 'Line':\r\n                            \r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n                        case 'RegularPolygon':\r\n                            \r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n\r\n                        default :\r\n                            break ;\r\n\r\n                    }\r\n\r\n                    layer.draw() ;\r\n                }\r\n            },\r\n\r\n            deselectShape() {\r\n            \r\n                transformer.detach() ;\r\n                layer.draw() ;\r\n            },\r\n                \r\n            changeColor(newShape, selectedColorSpan, layer) {\r\n                if (newShape && selectedColorSpan) {\r\n                    var color = getColorFromSpan(selectedColorSpan) ;\r\n                    newShape.fill(color) ;\r\n                    layer.draw() ;\r\n                }\r\n            },\r\n\r\n            drawLine: function () {\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let line = document.querySelector(\".line\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                line.style.left = \"-11%\" ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var point1, point2 ;\r\n\r\n                stage.on('mousedown', function () {\r\n\r\n                    if (!point1) {\r\n                        point1 = stage.getPointerPosition() ;\r\n                    } \r\n                    else {\r\n                        point2 = stage.getPointerPosition() ;\r\n\r\n                        newLine = new Konva.Line({\r\n                            id          : ++id ,\r\n                            points      : [point1.x, point1.y, point2.x, point2.y],\r\n                            stroke      : 'black',\r\n                            strokeWidth : 5,\r\n                        });\r\n\r\n                        layer.add(newLine) ;\r\n                        \r\n                        if (newLine){\r\n\r\n                            console.log(newLine.id);\r\n                            \r\n                            const lineData = {\r\n                                shape       : \"line\",\r\n                                id          : newLine.id() , \r\n                                points      : [point1.x, point1.y, point2.x, point2.y],\r\n                                stroke      : 'black',\r\n                                strokeWidth : 5, \r\n                            } ;\r\n                            \r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(lineData),\r\n                            })\r\n                        }\r\n\r\n                        point1 = null ;\r\n                        point2 = null ;\r\n                    \r\n                    }\r\n\r\n                }) ;\r\n        \r\n            },\r\n\r\n            drawCircle() {\r\n                \r\n                var width  = window.innerWidth;\r\n                var height = window.innerHeight;\r\n\r\n                let circle = document.querySelector(\".circle\") ;\r\n                let radius = document.querySelector(\"#radius\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                circle.style.left = \"-11%\" ;\r\n\r\n                radius = parseFloat(radius.value);\r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', () => {\r\n                    var pos = stage.getPointerPosition();\r\n\r\n                    newCircle = new Konva.Circle({\r\n                        id          : ++id,\r\n                        x           : pos.x,\r\n                        y           : pos.y,\r\n                        radius      : radius,\r\n                        fill        : 'white',\r\n                        stroke      : 'black',\r\n                        strokeWidth : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newCircle) ;\r\n\r\n                    if (newCircle){\r\n                        \r\n                        const CircleData = {\r\n                            shape       : 'circle',\r\n                            id          : newCircle.id() ,\r\n                            x           : pos.x,\r\n                            y           : pos.y,\r\n                            radius      : radius,\r\n                            fill        : 'white',\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        } ;\r\n\r\n                        console.log(CircleData)\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(CircleData),\r\n                        })\r\n                        \r\n                        newCircle.on('transformend', () => {\r\n                            \r\n                            const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                            const updatedCircleData = {\r\n                                shape       : 'circle',\r\n                                id          : newCircle.id() ,\r\n                                x           : newCircle.position().x,\r\n                                y           : newCircle.position().y,\r\n                                radius      : updatedRadius,\r\n                                fill        : newCircle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method  : 'POST',\r\n                                headers : {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedCircleData),\r\n                            }) ;\r\n                        \r\n                        }) ;    \r\n                    }\r\n    \r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newCircle, selectedColorSpan, layer) ;\r\n                        \r\n                        if (newCircle){\r\n\r\n                            const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                            const updatedCircleData = {\r\n                                shape       : 'circle',\r\n                                id          : newCircle.id() ,\r\n                                x           : newCircle.position().x,\r\n                                y           : newCircle.position().y,\r\n                                radius      : updatedRadius,\r\n                                fill        : newCircle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method  : 'POST',\r\n                                headers : {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedCircleData),\r\n                            }) ;\r\n\r\n                        }\r\n\r\n                    }) ; \r\n\r\n                }) ;\r\n\r\n            },\r\n\r\n            drawEllipse : function (){\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let ellipse = document.querySelector(\".ellipse\") ;\r\n                let radiusX = document.querySelector(\"#radiusX\") ;\r\n                let radiusY = document.querySelector(\"#radiusY\") ;\r\n\r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                ellipse.style.left = \"-11%\"  ;\r\n\r\n                radiusX = parseFloat(radiusX.value) ;\r\n                radiusY = parseFloat(radiusY.value) ; \r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                    newEllipse   = new Konva.Ellipse({\r\n                        id           : ++id,\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        radiusX      : radiusX,\r\n                        radiusY      : radiusY,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newEllipse) ;\r\n\r\n                    if (newEllipse){\r\n\r\n                        const EllipseData = {\r\n                            shape       : 'ellipse',\r\n                            id          : newEllipse.id() ,\r\n                            x           : pos.x,\r\n                            y           : pos.y,\r\n                            radiusX     : radiusX,\r\n                            radiusY     : radiusY,\r\n                            fill        : 'white',\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(EllipseData),\r\n                        })\r\n\r\n                        \r\n                        newEllipse.on('transformend', () => {\r\n\r\n                            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                            const updatedEllipseData = {\r\n                                shape       : 'ellipse',\r\n                                id          : newEllipse.id() ,\r\n                                x           : newEllipse.position().x,\r\n                                y           : newEllipse.position().y,\r\n                                radiusX     : updatedRadiusX,\r\n                                radiusY     : updatedRadiusY,\r\n                                fill        : newEllipse.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            };\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedEllipseData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    }\r\n\r\n                }) ;\r\n                                \r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newEllipse, selectedColorSpan, layer) ;\r\n                        \r\n                        if (newEllipse){\r\n\r\n                            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                            const updatedEllipseData = {\r\n                                shape       : 'ellipse',\r\n                                id          : newEllipse.id() ,\r\n                                x           : newEllipse.position().x,\r\n                                y           : newEllipse.position().y,\r\n                                radiusX     : updatedRadiusX,\r\n                                radiusY     : updatedRadiusY,\r\n                                fill        : newEllipse.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            };\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedEllipseData),\r\n                            }) ;\r\n\r\n                        }  \r\n                            \r\n                    }) ; \r\n\r\n                }) ;\r\n\r\n            },\r\n\r\n            drawTriangle : function(){\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let triangle = document.querySelector(\".triangle\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                triangle.style.left = \"-11%\" ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var point1, point2, point3 ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n\r\n                    if (!point1) \r\n                        point1 = stage.getPointerPosition() ;\r\n                    \r\n                    else if (!point2)\r\n                        point2 = stage.getPointerPosition() ;\r\n\r\n                    else {\r\n                        point3 = stage.getPointerPosition() ;\r\n\r\n                            newTriangle = new Konva.Line({\r\n                                id          : (++id).toString(),\r\n                                points      : [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\r\n                                closed      : true,\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            });  \r\n\r\n                        layer.add(newTriangle) ;\r\n\r\n                        if (newTriangle){    \r\n\r\n                            const TriangleData = {\r\n                                shape       : 'triangle',\r\n                                id          : newTriangle.id(),\r\n                                points      : [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\r\n                                closed      : true,\r\n                                fill        : 'white',\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(TriangleData),\r\n                            })\r\n\r\n                            \r\n                            newTriangle.on('transformend', () => {\r\n\r\n                                const scaleX = newTriangle.scaleX() ;\r\n                                const scaleY = newTriangle.scaleY() ;\r\n\r\n                                const originalPoints = [\r\n                                    newTriangle.points()[0],\r\n                                    newTriangle.points()[1],\r\n                                    newTriangle.points()[2],\r\n                                    newTriangle.points()[3],\r\n                                    newTriangle.points()[4],\r\n                                    newTriangle.points()[5]\r\n                                ] ;\r\n\r\n                                const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                                    const updatedTriangleData = {\r\n                                        shape       : 'triangle',\r\n                                        id          : newTriangle.id() ,\r\n                                        points      : updatedPoints,                                \r\n                                        closed      : true,\r\n                                        fill        : newTriangle.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedTriangleData),\r\n                                    }) ;\r\n                            \r\n                            }) ;\r\n                        \r\n                        }   \r\n\r\n                        point1 = null ;\r\n                        point2 = null ;\r\n                        point3 = null ;\r\n\r\n                    }\r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newTriangle, selectedColorSpan, layer) ;\r\n\r\n                        if(newTriangle){\r\n\r\n                            const scaleX = newTriangle.scaleX() ;\r\n                            const scaleY = newTriangle.scaleY() ;\r\n\r\n                            const originalPoints = [\r\n                                newTriangle.points()[0],\r\n                                newTriangle.points()[1],\r\n                                newTriangle.points()[2],\r\n                                newTriangle.points()[3],\r\n                                newTriangle.points()[4],\r\n                                newTriangle.points()[5]\r\n                            ] ;\r\n\r\n                            const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                            const updatedTriangleData = {\r\n                                shape       : 'triangle',\r\n                                id          : newTriangle.id() ,\r\n                                points      : updatedPoints,                                \r\n                                closed      : true,\r\n                                fill        : newTriangle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedTriangleData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ;\r\n                     \r\n                }) ;\r\n\r\n                point1 = null ;\r\n                point2 = null ;\r\n                point3 = null ;\r\n\r\n            },\r\n\r\n            drawRectangle : function(){\r\n\r\n                var Width  = window.innerWidth  ;\r\n                var Height = window.innerHeight ;\r\n\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let width     = document.querySelector(\"#width\")     ;\r\n                let height    = document.querySelector(\"#height\")    ;\r\n\r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : Width,\r\n                    height    : Height,\r\n                }) ;\r\n\r\n                rectangle.style.left = \"-11%\" ;\r\n\r\n                width  = parseFloat(width.value)  ;\r\n                height = parseFloat(height.value) ; \r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                        newRectangle   = new Konva.Rect({\r\n                        id           : (++id).toString(),\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        width        : width,\r\n                        height       : height,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newRectangle) ;\r\n\r\n                    if (newRectangle){\r\n\r\n                        const RectangleData = {\r\n                            shape        : 'rectangle',\r\n                            id           : newRectangle.id() ,\r\n                            x            : pos.x,\r\n                            y            : pos.y,\r\n                            width        : width,\r\n                            height       : height,\r\n                            fill         : 'white',\r\n                            stroke       : 'black',\r\n                            strokeWidth  : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(RectangleData),\r\n                        })\r\n\r\n                        \r\n                        newRectangle.on('transformend', () => {\r\n\r\n                            const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                            const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                            const updatedRectangleData = {\r\n                                shape        : 'rectangle',\r\n                                id           : newRectangle.id() ,\r\n                                x            : newRectangle.position().x,\r\n                                y            : newRectangle.position().y,\r\n                                width        : updatedWidth,\r\n                                height       : updatedHeight,\r\n                                fill         : newRectangle.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedRectangleData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    } \r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newRectangle, selectedColorSpan, layer) ;\r\n\r\n                        if (newRectangle){\r\n                        \r\n                            const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                            const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                            const updatedRectangleData = {\r\n                                shape        : 'rectangle',\r\n                                id           : newRectangle.id() ,\r\n                                x            : newRectangle.position().x,\r\n                                y            : newRectangle.position().y,\r\n                                width        : updatedWidth,\r\n                                height       : updatedHeight,\r\n                                fill         : newRectangle.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedRectangleData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ; \r\n                        \r\n                }) ;\r\n\r\n            },\r\n\r\n            drawSquare : function(){\r\n\r\n                var Width  = window.innerWidth  ;\r\n                var Height = window.innerHeight ;\r\n\r\n                let square = document.querySelector(\".square\") ;\r\n                let length = document.querySelector(\"#length\") ;\r\n                \r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : Width,\r\n                    height    : Height,\r\n                }) ;\r\n\r\n                square.style.left = \"-11%\" ;\r\n\r\n                length = parseFloat(length.value) ;\r\n                \r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n                \r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                        newSquare   = new Konva.Rect({\r\n                        id           : (++id).toString(),\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        width        : length,\r\n                        height       : length,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newSquare) ;\r\n\r\n                    if (newSquare){\r\n\r\n                        const SquareData = {\r\n                            shape        : 'square',\r\n                            id           : newSquare.id() ,\r\n                            x            : pos.x,\r\n                            y            : pos.y,\r\n                            width        : length,\r\n                            height       : length,\r\n                            fill         : 'white',\r\n                            stroke       : 'black',\r\n                            strokeWidth  : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(SquareData),\r\n                        })\r\n                    \r\n                        newSquare.on('transformend', () => {\r\n\r\n                            const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                            \r\n                            const updatedSquareData = {\r\n                                shape        : 'square',\r\n                                id           : newSquare.id() ,\r\n                                x            : newSquare.position().x,\r\n                                y            : newSquare.position().y,\r\n                                width        : updatedLength,\r\n                                height       : updatedLength,\r\n                                fill         : newSquare.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedSquareData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    }    \r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newSquare, selectedColorSpan, layer) ;\r\n\r\n                        if (newSquare){\r\n\r\n                            const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                            \r\n                            const updatedSquareData = {\r\n                                shape        : 'square',\r\n                                id           : newSquare.id() ,\r\n                                x            : newSquare.position().x,\r\n                                y            : newSquare.position().y,\r\n                                width        : updatedLength,\r\n                                height       : updatedLength,\r\n                                fill         : newSquare.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedSquareData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ; \r\n\r\n                }) \r\n\r\n            },\r\n            \r\n            showHideShapeBar : function (){\r\n                let loadXML      = document.querySelector('.loadXML')      ;\r\n                let loadJSON     = document.querySelector('.loadJSON')     ;\r\n                let saveXML      = document.querySelector('.saveXML')      ;\r\n                let saveJSON     = document.querySelector('.saveJSON')     ;\r\n                let colorPalette = document.querySelector('.colorPalette') ;\r\n                let shapeBar     = document.querySelector('.shapeBar')     ;\r\n                let line         = document.querySelector(\".line\")         ;\r\n                let circle       = document.querySelector(\".circle\")       ;   \r\n                let ellipse      = document.querySelector(\".ellipse\")      ;\r\n                let triangle     = document.querySelector(\".triangle\")     ;\r\n                let rectangle    = document.querySelector(\".rectangle\")    ;\r\n                let square       = document.querySelector(\".square\")       ; \r\n\r\n                if (colorPalette.style.opacity === \"1\"){ \r\n\r\n                    colorPalette.style.opacity = \"0\" ;\r\n\r\n                    if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\"){ \r\n\r\n                        loadXML.style.left  = \"-35%\" ;\r\n                        loadJSON.style.left = \"-35%\" ;\r\n\r\n                        saveXML.style.left  = \"-35%\" ;\r\n                        saveJSON.style.left = \"-35%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"5%\" ;\r\n                        }, 600) ;\r\n                \r\n                    }\r\n\r\n                    else{\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"5%\"   ;\r\n                        }, 500) ;\r\n                    }\r\n\r\n                }\r\n\r\n                else if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\"){ \r\n\r\n                    loadXML.style.left  = \"-35%\" ;\r\n                    loadJSON.style.left = \"-35%\" ;\r\n\r\n                    saveXML.style.left  = \"-35%\" ;\r\n                    saveJSON.style.left = \"-35%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"5%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n                \r\n                else if (line.style.left === \"12%\"){\r\n\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else{\r\n                    if (shapeBar.style.left === \"5%\")\r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    else\r\n                        shapeBar.style.left = \"5%\"   ;\r\n                }\r\n\r\n            },\r\n\r\n            showHideColorPalette : function (){\r\n                let colorPalette = document.querySelector('.colorPalette') ;\r\n                let shapeBar     = document.querySelector('.shapeBar')     ;\r\n                let line         = document.querySelector(\".line\")         ;\r\n                let circle       = document.querySelector(\".circle\")       ;   \r\n                let ellipse      = document.querySelector(\".ellipse\")      ;\r\n                let triangle     = document.querySelector(\".triangle\")     ;\r\n                let rectangle    = document.querySelector(\".rectangle\")    ;\r\n                let square       = document.querySelector(\".square\")       ; \r\n                \r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n                \r\n                else{\r\n                    if (colorPalette.style.opacity === \"1\") \r\n                        colorPalette.style.opacity = \"0\" ;\r\n                    else \r\n                        colorPalette.style.opacity = \"1\" ;\r\n                }\r\n            \r\n            },\r\n\r\n            showHideLineOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (line.style.left === \"12%\")\r\n                        line.style.left = \"-11%\" ;\r\n                    else\r\n                        line.style.left = \"12%\"\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideCircleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (circle.style.left === \"12%\")\r\n                        circle.style.left = \"-11%\" ;\r\n                    else\r\n                        circle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideEllipseOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (ellipse.style.left === \"12%\")\r\n                        ellipse.style.left = \"-11%\" ;\r\n                    else\r\n                        ellipse.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideTriangleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (triangle.style.left === \"12%\")\r\n                        triangle.style.left = \"-11%\" ;\r\n                    else\r\n                        triangle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideSave : function(){\r\n\r\n                let saveXML   = document.querySelector('.saveXML')   ;\r\n                let saveJSON  = document.querySelector('.saveJSON')  ;\r\n                let shapeBar  = document.querySelector('.shapeBar')  ;\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;   \r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ; \r\n\r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n\r\n                else{\r\n                    if (saveXML.style.left === \"5%\" ){\r\n\r\n                        saveXML.style.left  = \"-35%\" ;\r\n                        saveJSON.style.left = \"-35%\" ;\r\n                    } \r\n                    else{\r\n                        saveXML.style.left  = \"5%\" ;\r\n                        saveJSON.style.left = \"5%\" ;\r\n                    }\r\n\r\n                }\r\n\r\n                },\r\n\r\n\r\n            showHideLoad : function(){\r\n\r\n                let loadXML   = document.querySelector('.loadXML')   ;\r\n                let loadJSON  = document.querySelector('.loadJSON')  ;\r\n                let shapeBar  = document.querySelector('.shapeBar')  ;\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;   \r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ; \r\n                \r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n                \r\n                else{\r\n                    if (loadXML.style.left === \"5%\" ){\r\n\r\n                        loadXML.style.left  = \"-35%\" ;\r\n                        loadJSON.style.left = \"-35%\" ;\r\n                    } \r\n                    else{\r\n                        loadXML.style.left  = \"5%\" ;\r\n                        loadJSON.style.left = \"5%\" ;\r\n                    }\r\n\r\n                }\r\n\r\n            },\r\n\r\n            showHideRectangleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (rectangle.style.left === \"12%\")\r\n                        rectangle.style.left = \"-11%\" ;\r\n                    else\r\n                        rectangle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideSquareOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    \r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (square.style.left === \"12%\")\r\n                        square.style.left = \"-11%\" ;\r\n                    else\r\n                        square.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n</script>\r\n  \r\n<style scoped>\r\n    \r\n    @import url('https://fonts.googleapis.com/css2?family=Goldman&display=swap');\r\n\r\n    .save div{\r\n        width       : 35%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left 1s   ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .saveXML{\r\n        left : -35% ;\r\n        top  : 65%  ;\r\n    }\r\n\r\n    .saveJSON{\r\n        left : -35% ;\r\n        top  : 73%  ;   \r\n    }\r\n\r\n    .load div{\r\n        width       : 35%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left 1s   ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .loadXML{\r\n        left : -35% ;\r\n        top  : 92%  ;\r\n    }\r\n\r\n    .loadJSON{\r\n\r\n        left : -35% ;\r\n        top  : 84%  ;   \r\n    }\r\n\r\n    .colorPalette{\r\n        left             : 5.5%         ;\r\n        top              : 15%          ;\r\n        width            : 220px        ;\r\n        height           : 170px        ;\r\n        border           : 1px solid    ;\r\n        position         : fixed        ;\r\n        border-radius    : 10px         ;\r\n        opacity          : 0            ;\r\n        transition       : opacity .5s  ;\r\n        background-color : white      ;\r\n    }  \r\n    .colorPalette span {\r\n        display       : inline-block ;\r\n        width         : 25px         ;\r\n        height        : 25px         ;\r\n        margin        : 5px          ;\r\n        border-radius : 5px          ;\r\n    }\r\n\r\n    .black {\r\n        background-color : black ;\r\n    }\r\n\r\n    .gray {\r\n        background-color : rgb(80, 80, 80) ;\r\n    }\r\n\r\n    .intermediateGray{\r\n        background-color : gray ;\r\n    }\r\n\r\n    .lightGray{\r\n        background-color : rgb(150, 150, 150) ;\r\n    }\r\n\r\n    .veryLightGray{\r\n        background-color : gainsboro ;\r\n    }\r\n\r\n    .white{\r\n        background-color : white    ;\r\n        border           : .1px solid ;\r\n    }\r\n\r\n    .red{\r\n        background-color : red ;\r\n    }\r\n\r\n    .lightRed{\r\n        background-color : rgb(255, 58, 91) ;\r\n    }\r\n\r\n    .pink{\r\n        background-color : rgb(255, 103, 247) ;\r\n    }\r\n\r\n    .lightPurple{\r\n        background-color : rgb(218, 110, 218) ;\r\n    }\r\n\r\n    .intermediatePurple{\r\n        background-color : rgb(167, 72, 255) ;\r\n    }\r\n\r\n    .purple{\r\n        background-color : rgb(94, 22, 177) ;\r\n    }\r\n\r\n    .sky{\r\n        background-color : rgb(2, 138, 192) ;\r\n    }\r\n\r\n    .intermediateSky{\r\n        background-color : rgb(87, 192, 233) ;\r\n    }\r\n\r\n    .lightSky{\r\n        background-color : rgb(127, 255, 255) ;\r\n    }\r\n\r\n    .lightBlue{\r\n        background-color : rgb(23, 186, 250) ;\r\n    }\r\n\r\n    .intermediateBlue{\r\n        background-color : rgb(74, 131, 255) ;\r\n    }\r\n\r\n    .blue{\r\n        background-color : rgb(18, 93, 255) ;\r\n    }\r\n\r\n    .green{\r\n        background-color : rgb(1, 177, 1) ;\r\n    }\r\n\r\n    .intermediateGreen{\r\n        background-color : rgb(147, 219, 40) ;\r\n    }\r\n\r\n    .lightGreen{\r\n        background-color : rgb(201, 255, 121)  ;\r\n    }\r\n\r\n    .yellow{\r\n        background-color : yellow ;\r\n    }\r\n\r\n    .lightOrange{\r\n        background-color : rgb(255, 205, 111) ;\r\n    }\r\n\r\n    .orange{\r\n        background-color : orange ;\r\n    }\r\n\r\n    .colorPalette span:hover{\r\n        opacity    : .6           ;\r\n        transition : opacity .2s  ;\r\n    }\r\n\r\n    .colorPalette span:active{\r\n        opacity    : .3          ;\r\n        transition : opacity .2s ;\r\n    }\r\n\r\n    .options div{\r\n        width       : 15%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left .4s  ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .options input{\r\n        width       : 60%  ;\r\n        margin      : 1px  ;\r\n        margin-left : 10px ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n    }\r\n\r\n    .options .btn {\r\n        margin-top  : 5%  ;\r\n        margin-left : 70% ;\r\n    }\r\n\r\n    .options .line{\r\n        top      : 10%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .circle{\r\n        top      : 26.5%  ;\r\n        left     : -11%   ;\r\n    \r\n    }\r\n\r\n    .options .ellipse{\r\n        top      : 40%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .triangle{\r\n        top      : 55.5%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .rectangle{\r\n        top      : 71%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .square{\r\n        top      : 87%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .shapeBar{\r\n        background-color : rgb(30, 30, 30) ;\r\n        top              : 10%      ;\r\n        left             : -2%      ;\r\n        width            : 7%       ;\r\n        height           : 90vh     ;\r\n        z-index          : 2px      ;\r\n        position         : fixed    ;\r\n        transition       : left .4s ;\r\n    }\r\n    .shapeBar div{\r\n        height          : 17%    ;\r\n        display         : flex   ;\r\n        align-items     : center ;\r\n        justify-content : center ;\r\n    }\r\n\r\n    .shapeBar div:hover{\r\n        background-color : rgb(50, 50, 50)    ;\r\n        transition       : background-color .3s ;\r\n    }\r\n\r\n    .shapeBar div:active{\r\n        background-color: gray ;\r\n        transition      : background-color.2s ;\r\n    }\r\n\r\n    .sideBar{\r\n        background-color : black ;\r\n        top              : 10%     ;\r\n        width            : 5%      ;\r\n        height           : 90vh    ;\r\n        position         : fixed   ;\r\n    }\r\n    .sideBar div{\r\n        height          : 10%    ;\r\n        display         : flex   ;\r\n        align-items     : center ;\r\n        justify-content : center ;\r\n    }\r\n\r\n    .sideBar div:hover{\r\n        background-color : rgb(20, 20, 20)    ;\r\n        transition       : background-color .3s ;\r\n    }\r\n\r\n    .sideBar div:active{\r\n        background-color : gray ;\r\n        transition       : background-color.2s ;\r\n    }\r\n\r\n    #container{\r\n        left             : 5%     ;\r\n        top              : 10%    ;\r\n        width            : 95%    ;\r\n        height           : 100%   ;\r\n        position         : fixed  ;\r\n    }\r\n</style>"],"mappings":"AAyII,OAAOA,KAAI,MAAO,OAAM;AAGxB,IAAIC,KAAI,GAAe,IAAID,KAAK,CAACE,KAAK,CAAC;AACvC,IAAIC,OAAM,GAAa,IAAG;AAC1B,IAAIC,SAAQ,GAAW,IAAG;AAC1B,IAAIC,UAAS,GAAU,IAAG;AAC1B,IAAIC,WAAU,GAAS,IAAG;AAC1B,IAAIC,YAAW,GAAQ,IAAG;AAC1B,IAAIC,SAAQ,GAAW,IAAG;AAC1B,IAAIC,EAAC,GAAmB;AACxB,IAAIC,KAAK,EAAEC,WAAU;AAErB,SAASC,gBAAgBA,CAACC,WAAW,EAAE;EACnC,IAAIC,KAAI,GAAIC,MAAM,CAACC,gBAAgB,CAACH,WAAW,CAAC,CAACI,eAAc;EAC/D,OAAOH,KAAI;AACf;AAEA,eAAe;EACXI,IAAG,EAAO,SAAS;EAEnBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACPC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IAC/B;EACJ,CAAC;EAEDC,OAAM,EAAI;IAENC,IAAG,EAAI,eAAAA,CAAA,EAAiB;MAEpBrB,KAAK,CAACsB,OAAO,CAAC;;MAEd;MACA,MAAMC,IAAG,GAAI,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MAC/D;MACA,MAAMC,YAAW,GAAI,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;MAEtC,IAAI,CAACC,UAAU,CAACF,YAAY;IAEhC,CAAC;IAEDG,IAAG,EAAI,eAAAA,CAAA,EAAiB;MAEpB5B,KAAK,CAACsB,OAAO,CAAC;;MAEd;MACA,MAAMC,IAAG,GAAI,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MAC/D;MACA,MAAMC,YAAW,GAAI,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;;MAEtC;;MAEA,IAAI,CAACC,UAAU,CAACF,YAAY;IAEhC,CAAC;IAED,MAAMI,QAAQA,CAACC,CAAC,EAAC;MAEbA,CAAC,CAACC,cAAc,CAAC,CAAC;MAElB,MAAMC,QAAO,GAAIC,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC;MACpD,IAAIC,QAAO,GAAI,IAAIC,QAAQ,CAACJ,QAAQ,CAAC;MAGrC,IAAIK,MAAK,GAAI,CAAC,CAAC;MACfF,QAAQ,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;QAE7B,IAAID,KAAI,KAAM,MAAK,EACfF,MAAM,CAAC,QAAQ,IAAI,OAClB,IAAIE,KAAI,KAAM,KAAI,EACnBF,MAAM,CAAC,QAAQ,IAAI,OAClB,IAAIE,KAAI,KAAM,MAAK,EACpBF,MAAM,CAAC,QAAQ,IAAI,OACnB;UAEA,IAAII,GAAE,GAAIF,KAAI;UAEd,IAAIE,GAAG,CAACC,QAAQ,CAAC,OAAO,GAEpBL,MAAM,CAACG,GAAG,IAAIC,GAAE;QAExB;MAEJ,CAAC,CAAC;MAEF,IAAIf,IAAG,GAAIiB,IAAI,CAACC,SAAS,CAACP,MAAM,CAAC;MAEjC,IAAIF,QAAQ,CAACU,GAAG,CAAC,SAAS,GAAG;QACzB,MAAMrB,KAAK,CAAE,qCAAqC,EAAE;UAChDsB,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEtB;QACV,CAAC,CAAC;MACN;IAEJ,CAAC;IAED,MAAMuB,QAAQA,CAAA,EAAE;MACZjD,KAAK,CAACsB,OAAO,CAAC;MACd,MAAME,KAAK,CAAC,qCAAqC,EAAE;QAC/CsB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAE,IAAI,CAACE;MACf,CAAC,CAAC;MAEF,MAAMC,MAAK,GAAI,MAAM3B,KAAK,CAAC,6CAA6C,CAAC;;MAEzE;;MAEA,MAAMC,YAAW,GAAI,MAAM0B,MAAM,CAACzB,IAAI,CAAC,CAAC;;MAExC;;MAEA,IAAI,CAACC,UAAU,CAACF,YAAY;IAEhC,CAAC;IAEDE,UAAUA,CAACF,YAAY,EAAC;MAEpB,IAAI2B,IAAG,GAAI3B,YAAY,CAAC4B,MAAM;MAE9BC,OAAO,CAACC,GAAG,CAAC9B,YAAY,CAAC,CAAC,CAAC;MAE3BjB,EAAC,GAAI4C,IAAG;MAER,KAAI,IAAII,CAAC,GAAC,CAAC,EAACA,CAAC,GAACJ,IAAI,EAACI,CAAC,EAAE,EAAC;QAEnB,IAAIC,YAAW,GAAIhC,YAAY,CAAC+B,CAAC,CAAC;QAGlC/C,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;UACpBC,SAAQ,EAAI,WAAW;UACvBC,KAAI,EAAQ9C,MAAM,CAAC+C,UAAU;UAC7BC,MAAK,EAAOhD,MAAM,CAACiD;QACvB,CAAC;QAEDtD,KAAK,CAACuD,GAAG,CAAChE,KAAK;QAGf,IAAKyD,YAAY,CAAC,OAAO,MAAM,WAAU,EAAG;UACxCnD,YAAW,GAAM,IAAIP,KAAK,CAACkE,IAAI,CAAC;YAC5BC,CAAA,EAAeT,YAAY,CAAC,GAAG,CAAC;YAChCU,CAAA,EAAeV,YAAY,CAAC,GAAG,CAAC;YAChCG,KAAI,EAAWH,YAAY,CAAC,OAAO,CAAC;YACpCK,MAAK,EAAUL,YAAY,CAAC,QAAQ,CAAC;YACrCW,IAAG,EAAYX,YAAY,CAAC,MAAM,CAAC;YACnCY,MAAK,EAAUZ,YAAY,CAAC,QAAQ,CAAC;YACrCa,WAAU,EAAK,CAAC;YAChB9D,EAAC,EAAciD,YAAY,CAAC,IAAI;UACpC,CAAC;UACDzD,KAAK,CAACgE,GAAG,CAAC1D,YAAa;UAEvB,IAAIiE,iBAAgB,GAAI,IAAI;UAE5B9D,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;YAC9B,IAAGlE,YAAY,EAAC;cACZA,YAAY,CAACkE,EAAE,CAAC,cAAc,EAAE,MAAM;gBAElC,MAAMC,YAAW,GAAKnE,YAAY,CAACsD,KAAK,CAAC,IAAKtD,YAAY,CAACoE,MAAM,CAAC;gBAClE,MAAMC,aAAY,GAAIrE,YAAY,CAACwD,MAAM,CAAC,IAAIxD,YAAY,CAACsE,MAAM,CAAC;gBAElE,MAAMC,oBAAmB,GAAI;kBACzBC,KAAI,EAAW,WAAW;kBAC1BZ,CAAA,EAAe5D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACxCC,CAAA,EAAe7D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACxCP,KAAI,EAAWa,YAAY;kBAC3BX,MAAK,EAAUa,aAAa;kBAC5BP,IAAG,EAAY9D,YAAY,CAAC8D,IAAI,CAAC,CAAC;kBAClCC,MAAK,EAAU,OAAO;kBACtBC,WAAU,EAAK,CAAC;kBAChB9D,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;gBACnC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;gBAC7C,CAAC;cAEL,CAAC;YACL;UACJ,CAAC;UAED,IAAIG,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;UAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;YACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;cACjCZ,iBAAgB,GAAIW,IAAG;cACvB,IAAI,CAACE,WAAW,CAAC9E,YAAY,EAAEiE,iBAAiB,EAAEvE,KAAK;cAEvD,IAAIK,WAAW,EAAC;gBAEZ,MAAMoE,YAAW,GAAKnE,YAAY,CAACsD,KAAK,CAAC,IAAKtD,YAAY,CAACoE,MAAM,CAAC;gBAClE,MAAMC,aAAY,GAAIrE,YAAY,CAACwD,MAAM,CAAC,IAAIxD,YAAY,CAACsE,MAAM,CAAC;gBAElE,MAAMC,oBAAmB,GAAI;kBACzBC,KAAI,EAAW,WAAW;kBAC1BZ,CAAA,EAAe5D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACxCC,CAAA,EAAe7D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACxCP,KAAI,EAAWa,YAAY;kBAC3BX,MAAK,EAAUa,aAAa;kBAC5BP,IAAG,EAAY9D,YAAY,CAAC8D,IAAI,CAAC,CAAC;kBAClCC,MAAK,EAAU,OAAO;kBACtBC,WAAU,EAAK,CAAC;kBAChB9D,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;gBACnC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;gBAC7C,CAAC;cAEL;YAEJ,CAAC;UAEL,CAAC;QAEL,OACK,IAAMpB,YAAY,CAAC,OAAO,MAAM,QAAO,EAAG;UAC3CtD,SAAQ,GAAI,IAAIJ,KAAK,CAACsF,MAAM,CAAC;YACzBnB,CAAA,EAAcT,YAAY,CAAC,GAAG,CAAC;YAC/BU,CAAA,EAAcV,YAAY,CAAC,GAAG,CAAC;YAC/B6B,MAAK,EAAS7B,YAAY,CAAC,QAAQ,CAAC;YACpCW,IAAG,EAAWX,YAAY,CAAC,MAAM,CAAC;YAClCY,MAAK,EAASZ,YAAY,CAAC,QAAQ,CAAC;YACpCa,WAAU,EAAI,CAAC;YACf9D,EAAC,EAAciD,YAAY,CAAC,IAAI;UACpC,CAAC;UACDzD,KAAK,CAACgE,GAAG,CAAC7D,SAAS;UAGnBM,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;YAC9B,IAAGrE,SAAS,EAAC;cAETA,SAAS,CAACqE,EAAE,CAAC,cAAc,EAAE,MAAM;gBAE/B,MAAMe,aAAY,GAAIpF,SAAS,CAACmF,MAAM,CAAC,IAAInF,SAAS,CAACuE,MAAM,CAAC;gBAE5D,MAAMc,iBAAgB,GAAI;kBACtBV,KAAI,EAAU,QAAQ;kBACtBZ,CAAA,EAAc/D,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACpCC,CAAA,EAAchE,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACpCmB,MAAK,EAASC,aAAa;kBAC3BnB,IAAG,EAAWjE,SAAS,CAACiE,IAAI,CAAC,CAAC;kBAC9BC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcL,SAAS,CAACK,EAAE,CAAC;gBAChC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAK,EAAK,MAAM;kBAChBC,OAAM,EAAI;oBACN,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;gBAC1C,CAAC;cAEL,CAAC;YACL;UACJ,CAAC;UAED,IAAIjB,iBAAgB,GAAI,IAAG;UAE3BS,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;UAEpDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;YACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;cACjCZ,iBAAgB,GAAIW,IAAG;cACvB,IAAI,CAACE,WAAW,CAACjF,SAAS,EAAEoE,iBAAiB,EAAEvE,KAAK;cAEpD,IAAIG,SAAS,EAAC;gBAEV,MAAMoF,aAAY,GAAIpF,SAAS,CAACmF,MAAM,CAAC,IAAInF,SAAS,CAACuE,MAAM,CAAC;gBAE5D,MAAMc,iBAAgB,GAAI;kBACtBV,KAAI,EAAU,QAAQ;kBACtBZ,CAAA,EAAc/D,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACpCC,CAAA,EAAchE,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACpCmB,MAAK,EAASC,aAAa;kBAC3BnB,IAAG,EAAWjE,SAAS,CAACiE,IAAI,CAAC,CAAC;kBAC9BC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;gBACnC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAK,EAAK,MAAM;kBAChBC,OAAM,EAAI;oBACN,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;gBAC1C,CAAC;cAEL;YAEJ,CAAC;UAEL,CAAC;QAIL,OACK,IAAM/B,YAAY,CAAC,OAAO,MAAM,SAAQ,EAAG;UAC5CrD,UAAS,GAAM,IAAIL,KAAK,CAAC0F,OAAO,CAAC;YAC7BvB,CAAA,EAAcT,YAAY,CAAC,GAAG,CAAC;YAC/BU,CAAA,EAAcV,YAAY,CAAC,GAAG,CAAC;YAC/BiC,OAAM,EAASjC,YAAY,CAAC,SAAS,CAAC;YACtCkC,OAAM,EAASlC,YAAY,CAAC,SAAS,CAAC;YACtCW,IAAG,EAAWX,YAAY,CAAC,MAAM,CAAC;YAClCY,MAAK,EAASZ,YAAY,CAAC,QAAQ,CAAC;YACpCa,WAAU,EAAI,CAAC;YACf9D,EAAC,EAAciD,YAAY,CAAC,IAAI;UACpC,CAAC;UACDzD,KAAK,CAACgE,GAAG,CAAC5D,UAAU;UAEpBmE,iBAAgB,GAAI,IAAG;UAEvB9D,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;YAE9B,IAAIpE,UAAU,EAAC;cAEXA,UAAU,CAACoE,EAAE,CAAC,cAAc,EAAE,MAAM;gBAEhC,MAAMoB,cAAa,GAAIxF,UAAU,CAACsF,OAAO,CAAC,IAAItF,UAAU,CAACsE,MAAM,CAAC;gBAChE,MAAMmB,cAAa,GAAIzF,UAAU,CAACuF,OAAO,CAAC,IAAIvF,UAAU,CAACwE,MAAM,CAAC;gBAEhE,MAAMkB,kBAAiB,GAAI;kBACvBhB,KAAI,EAAU,SAAS;kBACvBZ,CAAA,EAAc9D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACrCC,CAAA,EAAc/D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACrCuB,OAAM,EAAQE,cAAc;kBAC5BD,OAAM,EAAQE,cAAc;kBAC5BzB,IAAG,EAAWhE,UAAU,CAACgE,IAAI,CAAC,CAAC;kBAC/BC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcJ,UAAU,CAACI,EAAE,CAAC;gBACjC,CAAC;gBAEDgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;gBAC3C,CAAC;cAEL,CAAC;YAEL;UACJ,CAAC;UAEDd,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;UAEpDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;YACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;cACjCZ,iBAAgB,GAAIW,IAAG;cACvB,IAAI,CAACE,WAAW,CAAChF,UAAU,EAAEmE,iBAAiB,EAAEvE,KAAK;cAErD,IAAII,UAAU,EAAC;gBAEX,MAAMwF,cAAa,GAAIxF,UAAU,CAACsF,OAAO,CAAC,IAAItF,UAAU,CAACsE,MAAM,CAAC;gBAChE,MAAMmB,cAAa,GAAIzF,UAAU,CAACuF,OAAO,CAAC,IAAIvF,UAAU,CAACwE,MAAM,CAAC;gBAEhE,MAAMkB,kBAAiB,GAAI;kBACvBhB,KAAI,EAAU,SAAS;kBACvBZ,CAAA,EAAc9D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACrCC,CAAA,EAAc/D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACrCuB,OAAM,EAAQE,cAAc;kBAC5BD,OAAM,EAAQE,cAAc;kBAC5BzB,IAAG,EAAWhE,UAAU,CAACgE,IAAI,CAAC,CAAC;kBAC/BC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcJ,UAAU,CAACI,EAAE,CAAC;gBACjC,CAAC;gBAEDgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;gBAC3C,CAAC;cAEL;YAEJ,CAAC;UAEL,CAAC;QACL,OACK,IAAMrC,YAAY,CAAC,OAAO,MAAM,MAAK,EAAG;UACzCvD,OAAM,GAAI,IAAIH,KAAK,CAACgG,IAAI,CAAC;YACrBC,MAAK,EAASvC,YAAY,CAAC,QAAQ,CAAC;YACpCwC,MAAK,EAASxC,YAAY,CAAC,QAAQ,CAAC;YACpCY,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI,CAAC;YACf9D,EAAC,EAAaiD,YAAY,CAAC,IAAI;UACnC,CAAC,CAAC;UACFzD,KAAK,CAACgE,GAAG,CAAC9D,OAAO;QACrB,OACK,IAAMuD,YAAY,CAAC,OAAO,MAAM,UAAS,EAAG;UAC7CpD,WAAU,GAAI,IAAIN,KAAK,CAACgG,IAAI,CAAC;YACzBC,MAAK,EAASvC,YAAY,CAAC,QAAQ,CAAC;YACpCwC,MAAK,EAASxC,YAAY,CAAC,QAAQ,CAAC;YACpCW,IAAG,EAAWX,YAAY,CAAC,MAAM,CAAC;YAClCY,MAAK,EAASZ,YAAY,CAAC,QAAQ,CAAC;YACpCa,WAAU,EAAIb,YAAY,CAAC,aAAa,CAAC;YACzCjD,EAAC,EAAaiD,YAAY,CAAC,IAAI;UACnC,CAAC,CAAC;UACFzD,KAAK,CAACgE,GAAG,CAAC3D,WAAW;UAErBkE,iBAAgB,GAAI,IAAG;UAEvB9D,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;YAE9B,IAAInE,WAAW,EAAC;cAEZA,WAAW,CAACmE,EAAE,CAAC,cAAc,EAAE,MAAM;gBAEjC,MAAME,MAAK,GAAIrE,WAAW,CAACqE,MAAM,CAAC;gBAClC,MAAME,MAAK,GAAIvE,WAAW,CAACuE,MAAM,CAAC;gBAElC,MAAMsB,cAAa,GAAI,CACnB7F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;gBAEA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAI,GAAI,MAAM,IAAID,KAAI,GAAI3B,MAAK,GAAI2B,KAAI,GAAIzB,MAAM;gBAExG,MAAM2B,mBAAkB,GAAI;kBACxBzB,KAAI,EAAU,UAAU;kBACxBkB,MAAK,EAASG,aAAa;kBAC3BF,MAAK,EAAS,IAAI;kBAClB7B,IAAG,EAAW/D,WAAW,CAAC+D,IAAI,CAAC,CAAC;kBAChCC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcH,WAAW,CAACG,EAAE,CAAC;gBAClC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;gBAC5C,CAAC;cAET,CAAC;YAEL;UAEJ,CAAC;UAEDvB,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;UAEpDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;YACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;cACjCZ,iBAAgB,GAAIW,IAAG;cACvB,IAAI,CAACE,WAAW,CAAC/E,WAAW,EAAEkE,iBAAiB,EAAEvE,KAAK;cAEtD,IAAGK,WAAW,EAAC;gBAEX,MAAMqE,MAAK,GAAIrE,WAAW,CAACqE,MAAM,CAAC;gBAClC,MAAME,MAAK,GAAIvE,WAAW,CAACuE,MAAM,CAAC;gBAElC,MAAMsB,cAAa,GAAI,CACnB7F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;gBAEA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAI,GAAI,MAAM,IAAID,KAAI,GAAI3B,MAAK,GAAI2B,KAAI,GAAIzB,MAAM;gBAE5G,MAAM2B,mBAAkB,GAAI;kBACxBzB,KAAI,EAAU,UAAU;kBACxBkB,MAAK,EAASG,aAAa;kBAC3BF,MAAK,EAAS,IAAI;kBAClB7B,IAAG,EAAW/D,WAAW,CAAC+D,IAAI,CAAC,CAAC;kBAChCC,MAAK,EAAS,OAAO;kBACrBC,WAAU,EAAI,CAAC;kBACf9D,EAAC,EAAcH,WAAW,CAACG,EAAE,CAAC;gBAClC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;gBAC5C,CAAC;cAEL;YAEJ,CAAC;UAEL,CAAC;QAGL,OACK,IAAM9C,YAAY,CAAC,OAAO,MAAM,QAAO,EAAG;UAC3ClD,SAAQ,GAAI,IAAIR,KAAK,CAACkE,IAAI,CAAC;YACvBC,CAAA,EAAeT,YAAY,CAAC,GAAG,CAAC;YAChCU,CAAA,EAAeV,YAAY,CAAC,GAAG,CAAC;YAChCG,KAAI,EAAWH,YAAY,CAAC,OAAO,CAAC;YACpCK,MAAK,EAAUL,YAAY,CAAC,QAAQ,CAAC;YACrCW,IAAG,EAAYX,YAAY,CAAC,MAAM,CAAC;YACnCY,MAAK,EAAUZ,YAAY,CAAC,QAAQ,CAAC;YACrCa,WAAU,EAAK,CAAC;YAChB9D,EAAC,EAAciD,YAAY,CAAC,IAAI;UACpC,CAAC,CAAC;UACFzD,KAAK,CAACgE,GAAG,CAACzD,SAAS;UAEnBE,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;YAC9B,IAAIjE,SAAS,EAAC;cAEVA,SAAS,CAACiE,EAAE,CAAC,cAAc,EAAE,MAAM;gBAE/B,MAAMgC,aAAY,GAAKjG,SAAS,CAACqD,KAAK,CAAC,IAAIrD,SAAS,CAACmE,MAAM,CAAC;gBAE5D,MAAM+B,iBAAgB,GAAI;kBACtB3B,KAAI,EAAW,QAAQ;kBACvBZ,CAAA,EAAe3D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACrCC,CAAA,EAAe5D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACrCP,KAAI,EAAW4C,aAAa;kBAC5B1C,MAAK,EAAU0C,aAAa;kBAC5BpC,IAAG,EAAY7D,SAAS,CAAC6D,IAAI,CAAC,CAAC;kBAC/BC,MAAK,EAAU,OAAO;kBACtBC,WAAU,EAAK,CAAC;kBAChB9D,EAAC,EAAcD,SAAS,CAACC,EAAE,CAAC;gBAChC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC6D,iBAAiB;gBAC1C,CAAC;cAEL,CAAC;YAEL;UAEJ,CAAC;UAEDzB,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;UAEpDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;YAC7BA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;cACrCZ,iBAAgB,GAAIW,IAAG;cACvB,IAAI,CAACE,WAAW,CAAC7E,SAAS,EAAEgE,iBAAiB,EAAEvE,KAAK;cAEpD,IAAIO,SAAS,EAAC;gBAEV,MAAMiG,aAAY,GAAKjG,SAAS,CAACqD,KAAK,CAAC,IAAIrD,SAAS,CAACmE,MAAM,CAAC;gBAE5D,MAAM+B,iBAAgB,GAAI;kBACtB3B,KAAI,EAAW,QAAQ;kBACvBZ,CAAA,EAAe3D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACb,CAAC;kBACrCC,CAAA,EAAe5D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACZ,CAAC;kBACrCP,KAAI,EAAW4C,aAAa;kBAC5B1C,MAAK,EAAU0C,aAAa;kBAC5BpC,IAAG,EAAY7D,SAAS,CAAC6D,IAAI,CAAC,CAAC;kBAC/BC,MAAK,EAAU,OAAO;kBACtBC,WAAU,EAAK,CAAC;kBAChB9D,EAAC,EAAcD,SAAS,CAACC,EAAE,CAAC;gBAChC;gBAEAgB,KAAK,CAAC,wBAAwB,EAAE;kBAC5BsB,MAAM,EAAE,MAAM;kBACdC,OAAO,EAAE;oBACL,cAAc,EAAE;kBACpB,CAAC;kBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC6D,iBAAiB;gBAC1C,CAAC;cAEL;YAEA,CAAC;UAED,CAAC;QACL;MACJ;MAEIzG,KAAK,CAAC0G,IAAI,CAAC;IAEnB,CAAC;IAEDC,IAAI,EAAE,SAAAA,CAAA,EAAY;MAEd,IAAIlG,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACxBC,SAAS,EAAE,WAAW;QACtBC,KAAK,EAAE9C,MAAM,CAAC+C,UAAU;QACxBC,MAAM,EAAEhD,MAAM,CAACiD;MACnB,CAAC,CAAC;MAEFtD,KAAK,CAACuD,GAAG,CAAChE,KAAK,CAAC;MAEhBS,KAAK,CAAC+D,EAAE,CAAC,OAAO,EAAE,UAAU1C,CAAC,EAAE;QAC3B,IAAI8E,YAAW,GAAI9E,CAAC,CAAC+E,MAAM;QAE3B,IAAI,EAAED,YAAW,YAAa7G,KAAK,CAAC+G,KAAK,CAAC,EAAE;UACxCxD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC1C;QACJ;QAEAqD,YAAY,CAACG,SAAS,CAAC,CAACH,YAAY,CAACG,SAAS,CAAC,CAAC,CAAC;;QAEzC;QACRH,YAAY,CAACG,SAAS,CAAC,IAAI,CAAC;;QAE5B;QACAH,YAAY,CAACpC,EAAE,CAAC,SAAS,EAAE,YAAY;UACnC,IAAIoC,YAAW,YAAa7G,KAAK,CAACsF,MAAM,EAAC;YAErC,MAAME,aAAY,GAAIqB,YAAY,CAACtB,MAAM,CAAC,IAAIsB,YAAY,CAAClC,MAAM,CAAC;YAElE,MAAMc,iBAAgB,GAAI;cACtBV,KAAI,EAAU,QAAQ;cACtBtE,EAAC,EAAaoG,YAAY,CAACpG,EAAE,CAAC,CAAC;cAC/B0D,CAAA,EAAc0C,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACb,CAAC;cACvCC,CAAA,EAAcyC,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACvCmB,MAAK,EAASC,aAAa;cAC3BnB,IAAG,EAAWwC,YAAY,CAACxC,IAAI,CAAC,CAAC;cACjCC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAK,EAAK,MAAM;cAChBC,OAAM,EAAI;gBACN,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;YAC1C,CAAC;UAGL,OAES,IAAIoB,YAAW,YAAa7G,KAAK,CAAC0F,OAAO,EAAC;YAE/C,MAAMG,cAAa,GAAIgB,YAAY,CAAClB,OAAO,CAAC,IAAIkB,YAAY,CAAClC,MAAM,CAAC;YACpE,MAAMmB,cAAa,GAAIe,YAAY,CAACjB,OAAO,CAAC,IAAIiB,YAAY,CAAChC,MAAM,CAAC;YAEpE,MAAMkB,kBAAiB,GAAI;cACvBhB,KAAI,EAAU,SAAS;cACvBtE,EAAC,EAAaoG,YAAY,CAACpG,EAAE,CAAC,CAAC;cAC/B0D,CAAA,EAAc0C,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACb,CAAC;cACvCC,CAAA,EAAcyC,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACvCuB,OAAM,EAAQE,cAAc;cAC5BD,OAAM,EAAQE,cAAc;cAC5BzB,IAAG,EAAWwC,YAAY,CAACxC,IAAI,CAAC,CAAC;cACjCC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB,CAAC;YAED9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;YAC3C,CAAC;UAGL,OAES,IAAIc,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,CAAC,EAAE;YAC/E;YACA,MAAMa,CAAA,GAAI0C,YAAY,CAAC1C,CAAC,CAAC,CAAC;YAC1B,MAAMC,CAAA,GAAIyC,YAAY,CAACzC,CAAC,CAAC,CAAC;YAC1B,MAAMO,MAAK,GAAIkC,YAAY,CAAClC,MAAM,CAAC,CAAC;YACpC,MAAME,MAAK,GAAIgC,YAAY,CAAChC,MAAM,CAAC,CAAC;;YAEpC;YACA,MAAMsB,cAAa,GAAI,CACnBU,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;;YAED;YACA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;cACvD,IAAIA,KAAI,GAAI,MAAM,CAAC,EAAE;gBACjB;gBACA,OAAOD,KAAI,GAAI3B,MAAK,GAAIR,CAAC;cAC7B,OAAO;gBACH;gBACA,OAAOmC,KAAI,GAAIzB,MAAK,GAAIT,CAAC;cAC7B;YACJ,CAAC,CAAC;;YAEF;YACA,MAAMoC,mBAAkB,GAAI;cACxBzB,KAAK,EAAE,UAAU;cACjBtE,EAAE,EAAEoG,YAAY,CAACpG,EAAE,CAAC,CAAC;cACrBwF,MAAM,EAAEG,aAAa;cACrBF,MAAM,EAAE,IAAI;cACZ7B,IAAI,EAAEwC,YAAY,CAACxC,IAAI,CAAC,IAAIwC,YAAY,CAACxC,IAAI,CAAC,IAAI,OAAO;cACzDC,MAAM,EAAE,OAAO;cACfC,WAAW,EAAE;YACjB,CAAC;;YAED;YACA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;YAC5C,CAAC,CAAC;UACN,OAEK,IAAIK,YAAW,YAAa7G,KAAK,CAACkE,IAAI,EAAC;YAExC,MAAMQ,YAAW,GAAKmC,YAAY,CAAChD,KAAK,CAAC,IAAKgD,YAAY,CAAClC,MAAM,CAAC;YAClE,MAAMC,aAAY,GAAIiC,YAAY,CAAC9C,MAAM,CAAC,IAAI8C,YAAY,CAAChC,MAAM,CAAC;YAElE,MAAMC,oBAAmB,GAAI;cACzBC,KAAI,EAAW8B,YAAY,CAAChD,KAAK,CAAC,MAAMgD,YAAY,CAAC9C,MAAM,CAAC,IAAI,QAAO,GAAI,WAAW;cACtFtD,EAAC,EAAcoG,YAAY,CAACpG,EAAE,CAAC,CAAC;cAChC0D,CAAA,EAAe0C,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACb,CAAC;cACxCC,CAAA,EAAeyC,YAAY,CAAC7B,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACxCP,KAAI,EAAWa,YAAY;cAC3BX,MAAK,EAAUa,aAAa;cAC5BP,IAAG,EAAYwC,YAAY,CAACxC,IAAI,CAAC,CAAC;cAClCC,MAAK,EAAU,OAAO;cACtBC,WAAU,EAAK;YACnB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;YAC7C,CAAC;UAED,OAGC,IAAI+B,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,CAAC,EAAE;YAE/E,MAAMa,CAAA,GAAI0C,YAAY,CAAC1C,CAAC,CAAC,CAAC;YAC1B,MAAMC,CAAA,GAAIyC,YAAY,CAACzC,CAAC,CAAC,CAAC;YAC1B,MAAMO,MAAK,GAAIkC,YAAY,CAAClC,MAAM,CAAC,CAAC;YACpC,MAAME,MAAK,GAAIgC,YAAY,CAAChC,MAAM,CAAC,CAAC;;YAEpC;YACA,MAAMsB,cAAa,GAAI,CACnBU,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACxBY,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;;YAED;YACA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;cACvD,IAAIA,KAAI,GAAI,MAAM,CAAC,EAAE;gBACjB;gBACA,OAAOD,KAAI,GAAI3B,MAAK,GAAIR,CAAC;cAC7B,OAAO;gBACH;gBACA,OAAOmC,KAAI,GAAIzB,MAAK,GAAIT,CAAC;cAC7B;YACJ,CAAC,CAAC;YAEF,MAAM6C,QAAO,GAAI;cACTlC,KAAK,EAAE,MAAM;cACbtE,EAAE,EAAEoG,YAAY,CAACpG,EAAE,CAAC,CAAC;cACrBwF,MAAM,EAAEG,aAAa;cACrB9B,MAAM,EAAE,OAAO;cACfC,WAAW,EAAE;YACjB,CAAC;;YAED;YACA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACoE,QAAQ;YACjC,CAAC,CAAC;UAGV;QAER,CAAC,CAAC;MAEN,CAAC;IAEL,CAAC;IAEDC,WAAW,EAAE,SAAAA,CAAA,EAAY;MACrBxG,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACpBC,SAAS,EAAE,WAAW;QACtBC,KAAK,EAAE9C,MAAM,CAAC+C,UAAU;QACxBC,MAAM,EAAEhD,MAAM,CAACiD;MACnB,CAAC,CAAC;MAEFtD,KAAK,CAACuD,GAAG,CAAChE,KAAK,CAAC;MAEhBS,KAAK,CAAC+D,EAAE,CAAC,OAAO,EAAE,UAAU1C,CAAC,EAAE;QAC3B,IAAI8E,YAAW,GAAI9E,CAAC,CAAC+E,MAAM;QAE3B,IAAID,YAAW,YAAa7G,KAAK,CAACkE,IAAG,IAAK2C,YAAW,YAAa7G,KAAK,CAACsF,MAAK,IAAKuB,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAW,YAAa7G,KAAK,CAAC0F,OAAO,EAAE;UAE3J,MAAMyB,gBAAe,GAAI;YACrB1G,EAAE,EAAEoG,YAAY,CAACpG,EAAE,CAAC;UACxB,CAAC;UAEDgB,KAAK,CAAC,uCAAuC,EAAE;YAC3CsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACsE,gBAAgB;UACzC,CAAC,CAAC;UAEFN,YAAY,CAACO,MAAM,CAAC,CAAC;UACrBnH,KAAK,CAAC0G,IAAI,CAAC,CAAC;QAChB,OAAO;UACHpD,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;QAC5D;MACJ,CAAC,CAAC;IACN,CAAC;IAED6D,iBAAiB,EAAE,SAAAA,CAAA,EAAY;MAC3B,IAAI3G,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACxBC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQ9C,MAAM,CAAC+C,UAAU;QAC7BC,MAAK,EAAOhD,MAAM,CAACiD;MACvB,CAAC;MAEDtD,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAI4G,YAAW,GAAI,IAAG;MACtB,IAAIS,QAAO,GAAQ,IAAG;MAEtB5G,KAAK,CAAC+D,EAAE,CAAC,OAAO,EAAE,UAAU1C,CAAC,EAAE;QAC3B8E,YAAW,GAAI9E,CAAC,CAAC+E,MAAK;QAEtB,IAAI,EAAED,YAAW,YAAa7G,KAAK,CAAC+G,KAAK,CAAC,EAAE;UACxCxD,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;UACvD;QACJ;QAEA,IACIqD,YAAW,YAAa7G,KAAK,CAACsF,MAAK,IACnCuB,YAAW,YAAa7G,KAAK,CAAC0F,OAAM,IACpCmB,YAAW,YAAa7G,KAAK,CAACkE,IAAG,IAChC2C,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,CAAC,EAE7E;UACIgE,QAAO,GAAIT,YAAY,CAACU,KAAK,CAAC;YAAEpD,CAAC,EAAE0C,YAAY,CAAC1C,CAAC,CAAC,CAAC;YAAEC,CAAC,EAAEyC,YAAY,CAACzC,CAAC,CAAC;UAAE,CAAC;UAC1EkD,QAAQ,CAAC7G,EAAE,CAAC,EAAEA,EAAE,CAAC;QACrB,OACK,IAAIoG,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,GAAI;UAChF,IAAI2C,MAAK,GAAIY,YAAY,CAACZ,MAAM,CAAC;UACjCqB,QAAO,GAAM,IAAItH,KAAK,CAACgG,IAAI,CAAC;YACxBvF,EAAC,EAAa,EAAEA,EAAE;YAClBwF,MAAK,EAAS,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC;YAC/EC,MAAK,EAAS,IAAI;YAClB5B,MAAK,EAASuC,YAAY,CAACvC,MAAM,CAAC,CAAC;YACnCC,WAAU,EAAIsC,YAAY,CAACtC,WAAW,CAAC;UAC3C,CAAC;UAEDtE,KAAK,CAACgE,GAAG,CAACqD,QAAQ;UAClBrH,KAAK,CAAC0G,IAAI,CAAC;QAEf,OACK;UACDpD,OAAO,CAACC,GAAG,CAAC,0CAA0C;UACtD;QACJ;QAEA,IAAIgE,UAAS,GAAI9G,KAAK,CAAC+G,kBAAkB,CAAC;QAC1CH,QAAQ,CAACnD,CAAC,CAACqD,UAAU,CAACrD,CAAC;QACvBmD,QAAQ,CAAClD,CAAC,CAACoD,UAAU,CAACpD,CAAC;QACvBnE,KAAK,CAACgE,GAAG,CAACqD,QAAQ;QAClBrH,KAAK,CAAC0G,IAAI,CAAC;QAGX,IAAIE,YAAW,YAAa7G,KAAK,CAACsF,MAAM,EAAC;UAErC,MAAME,aAAY,GAAIqB,YAAY,CAACtB,MAAM,CAAC,IAAIsB,YAAY,CAAClC,MAAM,CAAC;UAElE,MAAMc,iBAAgB,GAAI;YACtBV,KAAI,EAAU,QAAQ;YACtBtE,EAAC,EAAa6G,QAAQ,CAAC7G,EAAE,CAAC,CAAC;YAC3B0D,CAAA,EAAcmD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACb,CAAC;YACnCC,CAAA,EAAckD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACZ,CAAC;YACnCmB,MAAK,EAASC,aAAa;YAC3BnB,IAAG,EAAWwC,YAAY,CAACxC,IAAI,CAAC,CAAC;YACjCC,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB;UAEA9C,KAAK,CAAC,qCAAqC,EAAE;YACzCsB,MAAK,EAAK,MAAM;YAChBC,OAAM,EAAI;cACN,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;UAC1C,CAAC;QAEL,OAEK,IAAIoB,YAAW,YAAa7G,KAAK,CAAC0F,OAAO,EAAC;UAE3C,MAAMG,cAAa,GAAIgB,YAAY,CAAClB,OAAO,CAAC,IAAIkB,YAAY,CAAClC,MAAM,CAAC;UACpE,MAAMmB,cAAa,GAAIe,YAAY,CAACjB,OAAO,CAAC,IAAIiB,YAAY,CAAChC,MAAM,CAAC;UAEpE,MAAMkB,kBAAiB,GAAI;YACvBhB,KAAI,EAAU,SAAS;YACvBtE,EAAC,EAAa6G,QAAQ,CAAC7G,EAAE,CAAC,CAAC;YAC3B0D,CAAA,EAAcmD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACb,CAAC;YACnCC,CAAA,EAAckD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACZ,CAAC;YACnCuB,OAAM,EAAQE,cAAc;YAC5BD,OAAM,EAAQE,cAAc;YAC5BzB,IAAG,EAAWwC,YAAY,CAACxC,IAAI,CAAC,CAAC;YACjCC,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB,CAAC;UAED9C,KAAK,CAAC,qCAAqC,EAAE;YACzCsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;UAC3C,CAAC;QAEL,OAEK,IAAIc,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,CAAC,EAAE;UACvE;UACR,MAAMa,CAAA,GAAImD,QAAQ,CAACnD,CAAC,CAAC,CAAC;UACtB,MAAMC,CAAA,GAAIkD,QAAQ,CAAClD,CAAC,CAAC,CAAC;UACtB,MAAMO,MAAK,GAAI2C,QAAQ,CAAC3C,MAAM,CAAC,CAAC;UAChC,MAAME,MAAK,GAAIyC,QAAQ,CAACzC,MAAM,CAAC,CAAC;;UAEhC;UACA,MAAMsB,cAAa,GAAI,CACnBmB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB;;UAED;UACA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;YACvD,IAAIA,KAAI,GAAI,MAAM,CAAC,EAAE;cACjB;cACA,OAAOD,KAAI,GAAI3B,MAAK,GAAIR,CAAC;YAC7B,OAAO;cACH;cACA,OAAOmC,KAAI,GAAIzB,MAAK,GAAIT,CAAC;YAC7B;UACJ,CAAC,CAAC;;UAEF;UACA,MAAMoC,mBAAkB,GAAI;YACxBzB,KAAK,EAAE,UAAU;YACjBtE,EAAE,EAAE6G,QAAQ,CAAC7G,EAAE,CAAC,CAAC;YACjBwF,MAAM,EAAEG,aAAa;YACrBF,MAAM,EAAE,IAAI;YACZ7B,IAAI,EAAEwC,YAAY,CAACxC,IAAI,CAAC,IAAIwC,YAAY,CAACxC,IAAI,CAAC,IAAI,OAAO;YACzDC,MAAM,EAAE,OAAO;YACfC,WAAW,EAAE;UACjB,CAAC;;UAED;UACA9C,KAAK,CAAC,qCAAqC,EAAE;YACzCsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;UAC5C,CAAC,CAAC;QAEN,OAEK,IAAIK,YAAW,YAAa7G,KAAK,CAACkE,IAAI,EAAC;UAExC,MAAMQ,YAAW,GAAKmC,YAAY,CAAChD,KAAK,CAAC,IAAKgD,YAAY,CAAClC,MAAM,CAAC;UAClE,MAAMC,aAAY,GAAIiC,YAAY,CAAC9C,MAAM,CAAC,IAAI8C,YAAY,CAAChC,MAAM,CAAC;UAElE,MAAMC,oBAAmB,GAAI;YACzBC,KAAI,EAAW8B,YAAY,CAAChD,KAAK,CAAC,MAAMgD,YAAY,CAAC9C,MAAM,CAAC,IAAI,QAAO,GAAI,WAAW;YACtFtD,EAAC,EAAc6G,QAAQ,CAAC7G,EAAE,CAAC,CAAC;YAC5B0D,CAAA,EAAemD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACb,CAAC;YACpCC,CAAA,EAAekD,QAAQ,CAACtC,QAAQ,CAAC,CAAC,CAACZ,CAAC;YACpCP,KAAI,EAAWa,YAAY;YAC3BX,MAAK,EAAUa,aAAa;YAC5BP,IAAG,EAAYwC,YAAY,CAACxC,IAAI,CAAC,CAAC;YAClCC,MAAK,EAAU,OAAO;YACtBC,WAAU,EAAK;UACnB;UAEA9C,KAAK,CAAC,qCAAqC,EAAE;YACzCsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;UAC7C,CAAC;QAEL,OAEK,IAAI+B,YAAW,YAAa7G,KAAK,CAACgG,IAAG,IAAKa,YAAY,CAACZ,MAAM,CAAC,CAAC,CAAC3C,MAAK,KAAM,CAAC,EAAE;UAEvE,MAAMa,CAAA,GAAImD,QAAQ,CAACnD,CAAC,CAAC,CAAC;UACtB,MAAMC,CAAA,GAAIkD,QAAQ,CAAClD,CAAC,CAAC,CAAC;UACtB,MAAMO,MAAK,GAAI2C,QAAQ,CAAC3C,MAAM,CAAC,CAAC;UAChC,MAAME,MAAK,GAAIyC,QAAQ,CAACzC,MAAM,CAAC,CAAC;;UAEhC;UACA,MAAMsB,cAAa,GAAI,CACnBmB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACpBqB,QAAQ,CAACrB,MAAM,CAAC,CAAC,CAAC,CAAC,EACtB;;UAED;UACA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;YACvD,IAAIA,KAAI,GAAI,MAAM,CAAC,EAAE;cACjB;cACA,OAAOD,KAAI,GAAI3B,MAAK,GAAIR,CAAC;YAC7B,OAAO;cACH;cACA,OAAOmC,KAAI,GAAIzB,MAAK,GAAIT,CAAC;YAC7B;UACJ,CAAC,CAAC;UAEF,MAAM6C,QAAO,GAAI;YACTlC,KAAK,EAAE,MAAM;YACbtE,EAAE,EAAE6G,QAAQ,CAAC7G,EAAE,CAAC,CAAC;YACjBwF,MAAM,EAAEG,aAAa;YACrB9B,MAAM,EAAE,OAAO;YACfC,WAAW,EAAE;UACjB,CAAC;;UAED;UACA9C,KAAK,CAAC,qCAAqC,EAAE;YACzCsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACoE,QAAQ;UACjC,CAAC,CAAC;QAEV;MAEJ,CAAC;IAEL,CAAC;IAETS,MAAK,EAAI,SAAAA,CAAA,EAAW;MAEhBhH,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACpBC,SAAS,EAAE,WAAW;QACtBC,KAAK,EAAE9C,MAAM,CAAC+C,UAAU;QACxBC,MAAM,EAAEhD,MAAM,CAACiD;MACnB,CAAC,CAAC;MAEFtD,KAAK,CAACuD,GAAG,CAAChE,KAAK,CAAC;MAEhBU,WAAU,GAAI,IAAIX,KAAK,CAAC2H,WAAW,CAAC;QAChCC,cAAc,EAAE,CAAC,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,CAAC;QACxEC,aAAa,EAAE;MACnB,CAAC,CAAC;MAEF5H,KAAK,CAACgE,GAAG,CAACtD,WAAW,CAAC;MAEtBD,KAAK,CAACiG,IAAI,CAAC,CAAC;MAEZjG,KAAK,CAAC+D,EAAE,CAAC,OAAO,EAAG1C,CAAC,IAAK,IAAI,CAAC+F,WAAW,CAAC/F,CAAC,CAAC+E,MAAM,CAAC;IAEvD,CAAC;IAEDgB,WAAWA,CAAC/C,KAAK,EAAE;MACf,IAAIA,KAAK,EAAE;QACPpE,WAAW,CAACoH,QAAQ,CAAChD,KAAK,CAAC;QAE3B,MAAMiD,SAAQ,GAAIjD,KAAK,CAACkD,YAAY,CAAC;QAErC,QAAQD,SAAS;UACb,KAAK,MAAK;UACV,KAAK,QAAQ;YAETrH,WAAW,CAACuH,KAAK,CAAC,CAACnD,KAAK,CAAC;YACzB;UAEJ,KAAK,QAAO;UACZ,KAAK,SAAQ;YAEbpE,WAAW,CAACuH,KAAK,CAAC,CAACnD,KAAK,CAAC;YACrB;UAEJ,KAAK,MAAM;YAEPpE,WAAW,CAACuH,KAAK,CAAC,CAACnD,KAAK,CAAC;YACzB;UACJ,KAAK,gBAAgB;YAEjBpE,WAAW,CAACuH,KAAK,CAAC,CAACnD,KAAK,CAAC;YACzB;UAEJ;YACI;QAER;QAEA9E,KAAK,CAAC0G,IAAI,CAAC;MACf;IACJ,CAAC;IAEDwB,aAAaA,CAAA,EAAG;MAEZxH,WAAW,CAACyH,MAAM,CAAC;MACnBnI,KAAK,CAAC0G,IAAI,CAAC;IACf,CAAC;IAEDtB,WAAWA,CAACiC,QAAQ,EAAE9C,iBAAiB,EAAEvE,KAAK,EAAE;MAC5C,IAAIqH,QAAO,IAAK9C,iBAAiB,EAAE;QAC/B,IAAI1D,KAAI,GAAIF,gBAAgB,CAAC4D,iBAAiB;QAC9C8C,QAAQ,CAACjD,IAAI,CAACvD,KAAK;QACnBb,KAAK,CAAC0G,IAAI,CAAC;MACf;IACJ,CAAC;IAED0B,QAAQ,EAAE,SAAAA,CAAA,EAAY;MAElB,IAAIxE,KAAI,GAAK9C,MAAM,CAAC+C,UAAS;MAC7B,IAAIC,MAAK,GAAIhD,MAAM,CAACiD,WAAU;MAE9B,IAAIsE,IAAG,GAAIpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAEzC,IAAIzB,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACxBC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQA,KAAK;QACjBE,MAAK,EAAOA;MAChB,CAAC;MAEDuE,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;MAEvB9H,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIwI,MAAM,EAAEC,MAAK;MAEjBhI,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;QAE9B,IAAI,CAACgE,MAAM,EAAE;UACTA,MAAK,GAAI/H,KAAK,CAAC+G,kBAAkB,CAAC;QACtC,OACK;UACDiB,MAAK,GAAIhI,KAAK,CAAC+G,kBAAkB,CAAC;UAElCtH,OAAM,GAAI,IAAIH,KAAK,CAACgG,IAAI,CAAC;YACrBvF,EAAC,EAAa,EAAEA,EAAC;YACjBwF,MAAK,EAAS,CAACwC,MAAM,CAACtE,CAAC,EAAEsE,MAAM,CAACrE,CAAC,EAAEsE,MAAM,CAACvE,CAAC,EAAEuE,MAAM,CAACtE,CAAC,CAAC;YACtDE,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB,CAAC,CAAC;UAEFtE,KAAK,CAACgE,GAAG,CAAC9D,OAAO;UAEjB,IAAIA,OAAO,EAAC;YAERoD,OAAO,CAACC,GAAG,CAACrD,OAAO,CAACM,EAAE,CAAC;YAEvB,MAAMwG,QAAO,GAAI;cACblC,KAAI,EAAU,MAAM;cACpBtE,EAAC,EAAaN,OAAO,CAACM,EAAE,CAAC;cACzBwF,MAAK,EAAS,CAACwC,MAAM,CAACtE,CAAC,EAAEsE,MAAM,CAACrE,CAAC,EAAEsE,MAAM,CAACvE,CAAC,EAAEuE,MAAM,CAACtE,CAAC,CAAC;cACtDE,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACoE,QAAQ;YACjC,CAAC;UACL;UAEAwB,MAAK,GAAI,IAAG;UACZC,MAAK,GAAI,IAAG;QAEhB;MAEJ,CAAC;IAEL,CAAC;IAEDC,UAAUA,CAAA,EAAG;MAET,IAAI9E,KAAI,GAAK9C,MAAM,CAAC+C,UAAU;MAC9B,IAAIC,MAAK,GAAIhD,MAAM,CAACiD,WAAW;MAE/B,IAAI4E,MAAK,GAAI1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAC7C,IAAIoD,MAAK,GAAIrD,QAAQ,CAACC,aAAa,CAAC,SAAS;MAE7C,IAAIzB,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACxBC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQA,KAAK;QACjBE,MAAK,EAAOA;MAChB,CAAC;MAED6E,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;MAEzBjD,MAAK,GAAIsD,UAAU,CAACtD,MAAM,CAAC/C,KAAK,CAAC;MAEjC9B,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIuE,iBAAgB,GAAI,IAAG;MAE3BnE,UAAS,GAAM,IAAG;MAClBC,WAAU,GAAK,IAAG;MAClBC,YAAW,GAAI,IAAG;MAClBC,SAAQ,GAAO,IAAG;MAElBE,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,MAAM;QACxB,IAAIqE,GAAE,GAAIpI,KAAK,CAAC+G,kBAAkB,CAAC,CAAC;QAEpCrH,SAAQ,GAAI,IAAIJ,KAAK,CAACsF,MAAM,CAAC;UACzB7E,EAAC,EAAa,EAAEA,EAAE;UAClB0D,CAAA,EAAc2E,GAAG,CAAC3E,CAAC;UACnBC,CAAA,EAAc0E,GAAG,CAAC1E,CAAC;UACnBmB,MAAK,EAASA,MAAM;UACpBlB,IAAG,EAAW,OAAO;UACrBC,MAAK,EAAS,OAAO;UACrBC,WAAU,EAAI;QAClB,CAAC;QAEDtE,KAAK,CAACgE,GAAG,CAAC7D,SAAS;QAEnB,IAAIA,SAAS,EAAC;UAEV,MAAM2I,UAAS,GAAI;YACfhE,KAAI,EAAU,QAAQ;YACtBtE,EAAC,EAAaL,SAAS,CAACK,EAAE,CAAC;YAC3B0D,CAAA,EAAc2E,GAAG,CAAC3E,CAAC;YACnBC,CAAA,EAAc0E,GAAG,CAAC1E,CAAC;YACnBmB,MAAK,EAASA,MAAM;YACpBlB,IAAG,EAAW,OAAO;YACrBC,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB;UAEAhB,OAAO,CAACC,GAAG,CAACuF,UAAU;UAEtBtH,KAAK,CAAC,wBAAwB,EAAE;YAC5BsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkG,UAAU;UACnC,CAAC;UAED3I,SAAS,CAACqE,EAAE,CAAC,cAAc,EAAE,MAAM;YAE/B,MAAMe,aAAY,GAAIpF,SAAS,CAACmF,MAAM,CAAC,IAAInF,SAAS,CAACuE,MAAM,CAAC;YAE5D,MAAMc,iBAAgB,GAAI;cACtBV,KAAI,EAAU,QAAQ;cACtBtE,EAAC,EAAaL,SAAS,CAACK,EAAE,CAAC;cAC3B0D,CAAA,EAAc/D,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACb,CAAC;cACpCC,CAAA,EAAchE,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACpCmB,MAAK,EAASC,aAAa;cAC3BnB,IAAG,EAAWjE,SAAS,CAACiE,IAAI,CAAC,CAAC;cAC9BC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAK,EAAK,MAAM;cAChBC,OAAM,EAAI;gBACN,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;YAC1C,CAAC;UAEL,CAAC;QACL;MAEJ,CAAC;MAED,IAAIR,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;MAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;QACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACjCZ,iBAAgB,GAAIW,IAAG;UACvB,IAAI,CAACE,WAAW,CAACjF,SAAS,EAAEoE,iBAAiB,EAAEvE,KAAK;UAEpD,IAAIG,SAAS,EAAC;YAEV,MAAMoF,aAAY,GAAIpF,SAAS,CAACmF,MAAM,CAAC,IAAInF,SAAS,CAACuE,MAAM,CAAC;YAE5D,MAAMc,iBAAgB,GAAI;cACtBV,KAAI,EAAU,QAAQ;cACtBtE,EAAC,EAAaL,SAAS,CAACK,EAAE,CAAC;cAC3B0D,CAAA,EAAc/D,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACb,CAAC;cACpCC,CAAA,EAAchE,SAAS,CAAC4E,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACpCmB,MAAK,EAASC,aAAa;cAC3BnB,IAAG,EAAWjE,SAAS,CAACiE,IAAI,CAAC,CAAC;cAC9BC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAK,EAAK,MAAM;cAChBC,OAAM,EAAI;gBACN,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC4C,iBAAiB;YAC1C,CAAC;UAEL;QAEJ,CAAC;MAEL,CAAC;IAEL,CAAC;IAEDuD,WAAU,EAAI,SAAAA,CAAA,EAAW;MAErB,IAAInF,KAAI,GAAK9C,MAAM,CAAC+C,UAAS;MAC7B,IAAIC,MAAK,GAAIhD,MAAM,CAACiD,WAAU;MAE9B,IAAIiF,OAAM,GAAI/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MAC/C,IAAIwD,OAAM,GAAIzD,QAAQ,CAACC,aAAa,CAAC,UAAU;MAC/C,IAAIyD,OAAM,GAAI1D,QAAQ,CAACC,aAAa,CAAC,UAAU;MAE/C,IAAIzB,KAAI,GAAQ,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QAC5BC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQA,KAAK;QACjBE,MAAK,EAAOA;MAChB,CAAC;MAEDkF,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;MAE1B7C,OAAM,GAAIkD,UAAU,CAAClD,OAAO,CAACnD,KAAK;MAClCoD,OAAM,GAAIiD,UAAU,CAACjD,OAAO,CAACpD,KAAK;MAElC9B,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIuE,iBAAgB,GAAI,IAAG;MAE3BpE,SAAQ,GAAO,IAAG;MAClBE,WAAU,GAAK,IAAG;MAClBC,YAAW,GAAI,IAAG;MAClBC,SAAQ,GAAO,IAAG;MAElBE,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;QAC9B,IAAIqE,GAAE,GAAIpI,KAAK,CAAC+G,kBAAkB,CAAC;QACnCpH,UAAS,GAAM,IAAIL,KAAK,CAAC0F,OAAO,CAAC;UAC7BjF,EAAC,EAAc,EAAEA,EAAE;UACnB0D,CAAA,EAAe2E,GAAG,CAAC3E,CAAC;UACpBC,CAAA,EAAe0E,GAAG,CAAC1E,CAAC;UACpBuB,OAAM,EAASA,OAAO;UACtBC,OAAM,EAASA,OAAO;UACtBvB,IAAG,EAAY,OAAO;UACtBC,MAAK,EAAU,OAAO;UACtBC,WAAU,EAAK;QACnB,CAAC;QAEDtE,KAAK,CAACgE,GAAG,CAAC5D,UAAU;QAEpB,IAAIA,UAAU,EAAC;UAEX,MAAM6I,WAAU,GAAI;YAChBnE,KAAI,EAAU,SAAS;YACvBtE,EAAC,EAAaJ,UAAU,CAACI,EAAE,CAAC;YAC5B0D,CAAA,EAAc2E,GAAG,CAAC3E,CAAC;YACnBC,CAAA,EAAc0E,GAAG,CAAC1E,CAAC;YACnBuB,OAAM,EAAQA,OAAO;YACrBC,OAAM,EAAQA,OAAO;YACrBvB,IAAG,EAAW,OAAO;YACrBC,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB;UAEA9C,KAAK,CAAC,wBAAwB,EAAE;YAC5BsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACqG,WAAW;UACpC,CAAC;UAGD7I,UAAU,CAACoE,EAAE,CAAC,cAAc,EAAE,MAAM;YAEhC,MAAMoB,cAAa,GAAIxF,UAAU,CAACsF,OAAO,CAAC,IAAItF,UAAU,CAACsE,MAAM,CAAC;YAChE,MAAMmB,cAAa,GAAIzF,UAAU,CAACuF,OAAO,CAAC,IAAIvF,UAAU,CAACwE,MAAM,CAAC;YAEhE,MAAMkB,kBAAiB,GAAI;cACvBhB,KAAI,EAAU,SAAS;cACvBtE,EAAC,EAAaJ,UAAU,CAACI,EAAE,CAAC;cAC5B0D,CAAA,EAAc9D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACb,CAAC;cACrCC,CAAA,EAAc/D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACrCuB,OAAM,EAAQE,cAAc;cAC5BD,OAAM,EAAQE,cAAc;cAC5BzB,IAAG,EAAWhE,UAAU,CAACgE,IAAI,CAAC,CAAC;cAC/BC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB,CAAC;YAED9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;YAC3C,CAAC;UAEL,CAAC;QAEL;MAEJ,CAAC;MAED,IAAId,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;MAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;QACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACjCZ,iBAAgB,GAAIW,IAAG;UACvB,IAAI,CAACE,WAAW,CAAChF,UAAU,EAAEmE,iBAAiB,EAAEvE,KAAK;UAErD,IAAII,UAAU,EAAC;YAEX,MAAMwF,cAAa,GAAIxF,UAAU,CAACsF,OAAO,CAAC,IAAItF,UAAU,CAACsE,MAAM,CAAC;YAChE,MAAMmB,cAAa,GAAIzF,UAAU,CAACuF,OAAO,CAAC,IAAIvF,UAAU,CAACwE,MAAM,CAAC;YAEhE,MAAMkB,kBAAiB,GAAI;cACvBhB,KAAI,EAAU,SAAS;cACvBtE,EAAC,EAAaJ,UAAU,CAACI,EAAE,CAAC;cAC5B0D,CAAA,EAAc9D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACb,CAAC;cACrCC,CAAA,EAAc/D,UAAU,CAAC2E,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACrCuB,OAAM,EAAQE,cAAc;cAC5BD,OAAM,EAAQE,cAAc;cAC5BzB,IAAG,EAAWhE,UAAU,CAACgE,IAAI,CAAC,CAAC;cAC/BC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB,CAAC;YAED9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkD,kBAAkB;YAC3C,CAAC;UAEL;QAEJ,CAAC;MAEL,CAAC;IAEL,CAAC;IAEDoD,YAAW,EAAI,SAAAA,CAAA,EAAU;MAErB,IAAItF,KAAI,GAAK9C,MAAM,CAAC+C,UAAS;MAC7B,IAAIC,MAAK,GAAIhD,MAAM,CAACiD,WAAU;MAE9B,IAAIoF,QAAO,GAAIlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAEjD,IAAIzB,KAAI,GAAI,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QACxBC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQA,KAAK;QACjBE,MAAK,EAAOA;MAChB,CAAC;MAEDqF,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;MAE3B9H,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIwI,MAAM,EAAEC,MAAM,EAAEW,MAAK;MAEzB,IAAI7E,iBAAgB,GAAI,IAAG;MAE3BpE,SAAQ,GAAO,IAAG;MAClBC,UAAS,GAAM,IAAG;MAClBE,YAAW,GAAI,IAAG;MAClBC,SAAQ,GAAO,IAAG;MAElBE,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;QAE9B,IAAI,CAACgE,MAAM,EACPA,MAAK,GAAI/H,KAAK,CAAC+G,kBAAkB,CAAC,EAAE,KAEnC,IAAI,CAACiB,MAAM,EACZA,MAAK,GAAIhI,KAAK,CAAC+G,kBAAkB,CAAC,EAAE,KAEnC;UACD4B,MAAK,GAAI3I,KAAK,CAAC+G,kBAAkB,CAAC;UAE9BnH,WAAU,GAAI,IAAIN,KAAK,CAACgG,IAAI,CAAC;YACzBvF,EAAC,EAAa,CAAC,EAAEA,EAAE,EAAE6I,QAAQ,CAAC,CAAC;YAC/BrD,MAAK,EAAS,CAACwC,MAAM,CAACtE,CAAC,EAAEsE,MAAM,CAACrE,CAAC,EAAEsE,MAAM,CAACvE,CAAC,EAAEuE,MAAM,CAACtE,CAAC,EAAEiF,MAAM,CAAClF,CAAC,EAAEkF,MAAM,CAACjF,CAAC,CAAC;YAC1E8B,MAAK,EAAS,IAAI;YAClB5B,MAAK,EAAS,OAAO;YACrBC,WAAU,EAAI;UAClB,CAAC,CAAC;UAENtE,KAAK,CAACgE,GAAG,CAAC3D,WAAW;UAErB,IAAIA,WAAW,EAAC;YAEZ,MAAMiJ,YAAW,GAAI;cACjBxE,KAAI,EAAU,UAAU;cACxBtE,EAAC,EAAaH,WAAW,CAACG,EAAE,CAAC,CAAC;cAC9BwF,MAAK,EAAS,CAACwC,MAAM,CAACtE,CAAC,EAAEsE,MAAM,CAACrE,CAAC,EAAEsE,MAAM,CAACvE,CAAC,EAAEuE,MAAM,CAACtE,CAAC,EAAEiF,MAAM,CAAClF,CAAC,EAAEkF,MAAM,CAACjF,CAAC,CAAC;cAC1E8B,MAAK,EAAS,IAAI;cAClB7B,IAAG,EAAW,OAAO;cACrBC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC0G,YAAY;YACrC,CAAC;YAGDjJ,WAAW,CAACmE,EAAE,CAAC,cAAc,EAAE,MAAM;cAEjC,MAAME,MAAK,GAAIrE,WAAW,CAACqE,MAAM,CAAC;cAClC,MAAME,MAAK,GAAIvE,WAAW,CAACuE,MAAM,CAAC;cAElC,MAAMsB,cAAa,GAAI,CACnB7F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;cAEA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAI,GAAI,MAAM,IAAID,KAAI,GAAI3B,MAAK,GAAI2B,KAAI,GAAIzB,MAAM;cAExG,MAAM2B,mBAAkB,GAAI;gBACxBzB,KAAI,EAAU,UAAU;gBACxBtE,EAAC,EAAaH,WAAW,CAACG,EAAE,CAAC;gBAC7BwF,MAAK,EAASG,aAAa;gBAC3BF,MAAK,EAAS,IAAI;gBAClB7B,IAAG,EAAW/D,WAAW,CAAC+D,IAAI,CAAC,CAAC;gBAChCC,MAAK,EAAS,OAAO;gBACrBC,WAAU,EAAI;cAClB;cAEA9C,KAAK,CAAC,wBAAwB,EAAE;gBAC5BsB,MAAM,EAAE,MAAM;gBACdC,OAAO,EAAE;kBACL,cAAc,EAAE;gBACpB,CAAC;gBACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;cAC5C,CAAC;YAET,CAAC;UAEL;UAEAiC,MAAK,GAAI,IAAG;UACZC,MAAK,GAAI,IAAG;UACZW,MAAK,GAAI,IAAG;QAEhB;MAEJ,CAAC;MAED,IAAIpE,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;MAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;QACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACjCZ,iBAAgB,GAAIW,IAAG;UACvB,IAAI,CAACE,WAAW,CAAC/E,WAAW,EAAEkE,iBAAiB,EAAEvE,KAAK;UAEtD,IAAGK,WAAW,EAAC;YAEX,MAAMqE,MAAK,GAAIrE,WAAW,CAACqE,MAAM,CAAC;YAClC,MAAME,MAAK,GAAIvE,WAAW,CAACuE,MAAM,CAAC;YAElC,MAAMsB,cAAa,GAAI,CACnB7F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EACvB3F,WAAW,CAAC2F,MAAM,CAAC,CAAC,CAAC,CAAC,EAC1B;YAEA,MAAMG,aAAY,GAAID,cAAc,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAKA,KAAI,GAAI,MAAM,IAAID,KAAI,GAAI3B,MAAK,GAAI2B,KAAI,GAAIzB,MAAM;YAE5G,MAAM2B,mBAAkB,GAAI;cACxBzB,KAAI,EAAU,UAAU;cACxBtE,EAAC,EAAaH,WAAW,CAACG,EAAE,CAAC;cAC7BwF,MAAK,EAASG,aAAa;cAC3BF,MAAK,EAAS,IAAI;cAClB7B,IAAG,EAAW/D,WAAW,CAAC+D,IAAI,CAAC,CAAC;cAChCC,MAAK,EAAS,OAAO;cACrBC,WAAU,EAAI;YAClB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC2D,mBAAmB;YAC5C,CAAC;UAEL;QAEJ,CAAC;MAEL,CAAC;MAEDiC,MAAK,GAAI,IAAG;MACZC,MAAK,GAAI,IAAG;MACZW,MAAK,GAAI,IAAG;IAEhB,CAAC;IAEDG,aAAY,EAAI,SAAAA,CAAA,EAAU;MAEtB,IAAIC,KAAI,GAAK1I,MAAM,CAAC+C,UAAS;MAC7B,IAAI4F,MAAK,GAAI3I,MAAM,CAACiD,WAAU;MAE9B,IAAI2F,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI0B,KAAI,GAAQ3B,QAAQ,CAACC,aAAa,CAAC,QAAQ;MAC/C,IAAI4B,MAAK,GAAO7B,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAIzB,KAAI,GAAQ,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QAC5BC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQ4F,KAAK;QACjB1F,MAAK,EAAO2F;MAChB,CAAC;MAEDC,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;MAE5B3E,KAAI,GAAKgF,UAAU,CAAChF,KAAK,CAACrB,KAAK;MAC/BuB,MAAK,GAAI8E,UAAU,CAAC9E,MAAM,CAACvB,KAAK;MAEhC9B,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIuE,iBAAgB,GAAI,IAAG;MAE3BpE,SAAQ,GAAO,IAAG;MAClBC,UAAS,GAAM,IAAG;MAClBC,WAAU,GAAK,IAAG;MAClBE,SAAQ,GAAO,IAAG;MAElBE,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;QAC9B,IAAIqE,GAAE,GAAIpI,KAAK,CAAC+G,kBAAkB,CAAC;QAC/BlH,YAAW,GAAM,IAAIP,KAAK,CAACkE,IAAI,CAAC;UAChCzD,EAAC,EAAc,CAAC,EAAEA,EAAE,EAAE6I,QAAQ,CAAC,CAAC;UAChCnF,CAAA,EAAe2E,GAAG,CAAC3E,CAAC;UACpBC,CAAA,EAAe0E,GAAG,CAAC1E,CAAC;UACpBP,KAAI,EAAWA,KAAK;UACpBE,MAAK,EAAUA,MAAM;UACrBM,IAAG,EAAY,OAAO;UACtBC,MAAK,EAAU,OAAO;UACtBC,WAAU,EAAK;QACnB,CAAC;QAEDtE,KAAK,CAACgE,GAAG,CAAC1D,YAAY;QAEtB,IAAIA,YAAY,EAAC;UAEb,MAAMqJ,aAAY,GAAI;YAClB7E,KAAI,EAAW,WAAW;YAC1BtE,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;YAC/B0D,CAAA,EAAe2E,GAAG,CAAC3E,CAAC;YACpBC,CAAA,EAAe0E,GAAG,CAAC1E,CAAC;YACpBP,KAAI,EAAWA,KAAK;YACpBE,MAAK,EAAUA,MAAM;YACrBM,IAAG,EAAY,OAAO;YACtBC,MAAK,EAAU,OAAO;YACtBC,WAAU,EAAK;UACnB;UAEA9C,KAAK,CAAC,wBAAwB,EAAE;YAC5BsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC+G,aAAa;UACtC,CAAC;UAGDrJ,YAAY,CAACkE,EAAE,CAAC,cAAc,EAAE,MAAM;YAElC,MAAMC,YAAW,GAAKnE,YAAY,CAACsD,KAAK,CAAC,IAAKtD,YAAY,CAACoE,MAAM,CAAC;YAClE,MAAMC,aAAY,GAAIrE,YAAY,CAACwD,MAAM,CAAC,IAAIxD,YAAY,CAACsE,MAAM,CAAC;YAElE,MAAMC,oBAAmB,GAAI;cACzBC,KAAI,EAAW,WAAW;cAC1BtE,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;cAC/B0D,CAAA,EAAe5D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACb,CAAC;cACxCC,CAAA,EAAe7D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACxCP,KAAI,EAAWa,YAAY;cAC3BX,MAAK,EAAUa,aAAa;cAC5BP,IAAG,EAAY9D,YAAY,CAAC8D,IAAI,CAAC,CAAC;cAClCC,MAAK,EAAU,OAAO;cACtBC,WAAU,EAAK;YACnB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;YAC7C,CAAC;UAEL,CAAC;QAEL;MAEJ,CAAC;MAED,IAAIG,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;MAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;QACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACjCZ,iBAAgB,GAAIW,IAAG;UACvB,IAAI,CAACE,WAAW,CAAC9E,YAAY,EAAEiE,iBAAiB,EAAEvE,KAAK;UAEvD,IAAIM,YAAY,EAAC;YAEb,MAAMmE,YAAW,GAAKnE,YAAY,CAACsD,KAAK,CAAC,IAAKtD,YAAY,CAACoE,MAAM,CAAC;YAClE,MAAMC,aAAY,GAAIrE,YAAY,CAACwD,MAAM,CAAC,IAAIxD,YAAY,CAACsE,MAAM,CAAC;YAElE,MAAMC,oBAAmB,GAAI;cACzBC,KAAI,EAAW,WAAW;cAC1BtE,EAAC,EAAcF,YAAY,CAACE,EAAE,CAAC;cAC/B0D,CAAA,EAAe5D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACb,CAAC;cACxCC,CAAA,EAAe7D,YAAY,CAACyE,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACxCP,KAAI,EAAWa,YAAY;cAC3BX,MAAK,EAAUa,aAAa;cAC5BP,IAAG,EAAY9D,YAAY,CAAC8D,IAAI,CAAC,CAAC;cAClCC,MAAK,EAAU,OAAO;cACtBC,WAAU,EAAK;YACnB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACiC,oBAAoB;YAC7C,CAAC;UAEL;QAEJ,CAAC;MAEL,CAAC;IAEL,CAAC;IAED+E,UAAS,EAAI,SAAAA,CAAA,EAAU;MAEnB,IAAIJ,KAAI,GAAK1I,MAAM,CAAC+C,UAAS;MAC7B,IAAI4F,MAAK,GAAI3I,MAAM,CAACiD,WAAU;MAE9B,IAAI8F,MAAK,GAAI5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAC7C,IAAImB,MAAK,GAAIpB,QAAQ,CAACC,aAAa,CAAC,SAAS;MAE7C,IAAIzB,KAAI,GAAQ,IAAIV,KAAK,CAAC2D,KAAK,CAAC;QAC5BC,SAAQ,EAAI,WAAW;QACvBC,KAAI,EAAQ4F,KAAK;QACjB1F,MAAK,EAAO2F;MAChB,CAAC;MAEDI,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;MAEzBlF,MAAK,GAAIuF,UAAU,CAACvF,MAAM,CAACd,KAAK;MAEhC9B,KAAK,CAACuD,GAAG,CAAChE,KAAK;MAEf,IAAIuE,iBAAgB,GAAI,IAAG;MAE3BpE,SAAQ,GAAO,IAAG;MAClBC,UAAS,GAAM,IAAG;MAClBC,WAAU,GAAK,IAAG;MAClBC,YAAW,GAAI,IAAG;MAElBG,KAAK,CAAC+D,EAAE,CAAC,WAAW,EAAE,YAAY;QAC9B,IAAIqE,GAAE,GAAIpI,KAAK,CAAC+G,kBAAkB,CAAC;QAC/BjH,SAAQ,GAAM,IAAIR,KAAK,CAACkE,IAAI,CAAC;UAC7BzD,EAAC,EAAc,CAAC,EAAEA,EAAE,EAAE6I,QAAQ,CAAC,CAAC;UAChCnF,CAAA,EAAe2E,GAAG,CAAC3E,CAAC;UACpBC,CAAA,EAAe0E,GAAG,CAAC1E,CAAC;UACpBP,KAAI,EAAWP,MAAM;UACrBS,MAAK,EAAUT,MAAM;UACrBe,IAAG,EAAY,OAAO;UACtBC,MAAK,EAAU,OAAO;UACtBC,WAAU,EAAK;QACnB,CAAC;QAEDtE,KAAK,CAACgE,GAAG,CAACzD,SAAS;QAEnB,IAAIA,SAAS,EAAC;UAEV,MAAMuJ,UAAS,GAAI;YACfhF,KAAI,EAAW,QAAQ;YACvBtE,EAAC,EAAcD,SAAS,CAACC,EAAE,CAAC;YAC5B0D,CAAA,EAAe2E,GAAG,CAAC3E,CAAC;YACpBC,CAAA,EAAe0E,GAAG,CAAC1E,CAAC;YACpBP,KAAI,EAAWP,MAAM;YACrBS,MAAK,EAAUT,MAAM;YACrBe,IAAG,EAAY,OAAO;YACtBC,MAAK,EAAU,OAAO;YACtBC,WAAU,EAAK;UACnB;UAEA9C,KAAK,CAAC,wBAAwB,EAAE;YAC5BsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAACkH,UAAU;UACnC,CAAC;UAEDvJ,SAAS,CAACiE,EAAE,CAAC,cAAc,EAAE,MAAM;YAE/B,MAAMgC,aAAY,GAAKjG,SAAS,CAACqD,KAAK,CAAC,IAAIrD,SAAS,CAACmE,MAAM,CAAC;YAE5D,MAAM+B,iBAAgB,GAAI;cACtB3B,KAAI,EAAW,QAAQ;cACvBtE,EAAC,EAAcD,SAAS,CAACC,EAAE,CAAC;cAC5B0D,CAAA,EAAe3D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACb,CAAC;cACrCC,CAAA,EAAe5D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACrCP,KAAI,EAAW4C,aAAa;cAC5B1C,MAAK,EAAU0C,aAAa;cAC5BpC,IAAG,EAAY7D,SAAS,CAAC6D,IAAI,CAAC,CAAC;cAC/BC,MAAK,EAAU,OAAO;cACtBC,WAAU,EAAK;YACnB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC6D,iBAAiB;YAC1C,CAAC;UAEL,CAAC;QAEL;MAEJ,CAAC;MAED,IAAIzB,UAAS,GAAI/C,QAAQ,CAACgD,gBAAgB,CAAC,aAAa;MAExDD,UAAU,CAAC1C,OAAO,CAAE4C,IAAI,IAAK;QACzBA,IAAI,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACjCZ,iBAAgB,GAAIW,IAAG;UACvB,IAAI,CAACE,WAAW,CAAC7E,SAAS,EAAEgE,iBAAiB,EAAEvE,KAAK;UAEpD,IAAIO,SAAS,EAAC;YAEV,MAAMiG,aAAY,GAAKjG,SAAS,CAACqD,KAAK,CAAC,IAAIrD,SAAS,CAACmE,MAAM,CAAC;YAE5D,MAAM+B,iBAAgB,GAAI;cACtB3B,KAAI,EAAW,QAAQ;cACvBtE,EAAC,EAAcD,SAAS,CAACC,EAAE,CAAC;cAC5B0D,CAAA,EAAe3D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACb,CAAC;cACrCC,CAAA,EAAe5D,SAAS,CAACwE,QAAQ,CAAC,CAAC,CAACZ,CAAC;cACrCP,KAAI,EAAW4C,aAAa;cAC5B1C,MAAK,EAAU0C,aAAa;cAC5BpC,IAAG,EAAY7D,SAAS,CAAC6D,IAAI,CAAC,CAAC;cAC/BC,MAAK,EAAU,OAAO;cACtBC,WAAU,EAAK;YACnB;YAEA9C,KAAK,CAAC,wBAAwB,EAAE;cAC5BsB,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACL,cAAc,EAAE;cACpB,CAAC;cACDC,IAAI,EAAEL,IAAI,CAACC,SAAS,CAAC6D,iBAAiB;YAC1C,CAAC;UAEL;QAEJ,CAAC;MAEL,CAAC;IAEL,CAAC;IAEDsD,gBAAe,EAAI,SAAAA,CAAA,EAAW;MAC1B,IAAIC,OAAM,GAAS/H,QAAQ,CAACC,aAAa,CAAC,UAAU;MACpD,IAAI+H,QAAO,GAAQhI,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAIgI,OAAM,GAASjI,QAAQ,CAACC,aAAa,CAAC,UAAU;MACpD,IAAIiI,QAAO,GAAQlI,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAIkI,YAAW,GAAInI,QAAQ,CAACC,aAAa,CAAC,eAAe;MACzD,IAAImI,QAAO,GAAQpI,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAImG,IAAG,GAAYpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MACjD,IAAIyG,MAAK,GAAU1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MACnD,IAAI8G,OAAM,GAAS/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACpD,IAAIiH,QAAO,GAAQlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAIwH,SAAQ,GAAOzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACtD,IAAI2H,MAAK,GAAU5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEnD,IAAIkI,YAAY,CAAC9B,KAAK,CAACgC,OAAM,KAAM,GAAG,EAAC;QAEnCF,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;QAE/B,IAAIN,OAAO,CAAC1B,KAAK,CAACC,IAAG,KAAM,IAAG,IAAK2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,KAAM,IAAI,EAAC;UAE3DyB,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,MAAK;UAC3B0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,MAAK;UAE3B2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,MAAK;UAC3B4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,MAAK;UAE3BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEI;UACAgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QACV;MAEJ,OAEK,IAAIyB,OAAO,CAAC1B,KAAK,CAACC,IAAG,KAAM,IAAG,IAAK2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,KAAM,IAAI,EAAC;QAEhEyB,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,MAAK;QAC3B0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3B2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,MAAK;QAC3B4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,IAAG;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIF,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAE/BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEI;QACA,IAAI8B,QAAQ,CAAC/B,KAAK,CAACC,IAAG,KAAM,IAAI,EAC5B8B,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI,CAAE,KAE5B8B,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,IAAG;MACjC;IAEJ,CAAC;IAEDiC,oBAAmB,EAAI,SAAAA,CAAA,EAAW;MAC9B,IAAIJ,YAAW,GAAInI,QAAQ,CAACC,aAAa,CAAC,eAAe;MACzD,IAAImI,QAAO,GAAQpI,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAImG,IAAG,GAAYpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MACjD,IAAIyG,MAAK,GAAU1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MACnD,IAAI8G,OAAM,GAAS/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACpD,IAAIiH,QAAO,GAAQlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MACrD,IAAIwH,SAAQ,GAAOzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACtD,IAAI2H,MAAK,GAAU5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEnD,IAAImI,QAAQ,CAAC/B,KAAK,CAACC,IAAG,KAAM,IAAI,EAAC;QAE7B,IAAIF,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAE1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;UAEvBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAEV,OAEK,IAAI3B,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAEV,OAEK,IAAItB,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;UAE1BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAEV,OAEK,IAAInB,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;UAE3BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAGV,OAEK,IAAIZ,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;UAE5BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAGV,OAEK,IAAIT,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAGV,OAEI;UAEAD,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAE1BgC,UAAU,CAAC,MAAM;YACbH,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;UACnC,CAAC,EAAE,GAAG;QAEV;MAEJ,OAEI;QACA,IAAIF,YAAY,CAAC9B,KAAK,CAACgC,OAAM,KAAM,GAAG,EAClCF,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE,CAAE,KAEjCF,YAAY,CAAC9B,KAAK,CAACgC,OAAM,GAAI,GAAE;MACvC;IAEJ,CAAC;IAEDG,kBAAiB,EAAI,SAAAA,CAAA,EAAU;MAC3B,IAAIpC,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAIyG,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC5BI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACblC,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;QAC1B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACblC,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;QAC1B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACblC,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;QAC1B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACblC,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;QAC1B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACblC,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;QAC1B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAIF,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EACzBF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAEzBF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,KAAI;MAE9B;IAEJ,CAAC;IAEDmC,oBAAmB,EAAI,SAAAA,CAAA,EAAU;MAC7B,IAAIrC,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImG,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACb5B,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACb5B,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACb5B,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACb5B,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACb5B,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAC3BI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAE3BI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,KAAI;MAEhC;IAEJ,CAAC;IAEDoC,qBAAoB,EAAI,SAAAA,CAAA,EAAU;MAC9B,IAAItC,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImG,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACbvB,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbvB,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACbvB,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACbvB,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbvB,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;QAC7B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAC5BS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAE5BS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,KAAI;MAEjC;IAEJ,CAAC;IAEDqC,sBAAqB,EAAI,SAAAA,CAAA,EAAU;MAC/B,IAAIvC,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImG,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACbpB,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbpB,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACbpB,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACbpB,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbpB,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;QAC9B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAC7BY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAE7BY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,KAAI;MAElC;IAEJ,CAAC;IAEDsC,YAAW,EAAI,SAAAA,CAAA,EAAU;MAErB,IAAIX,OAAM,GAAMjI,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiI,QAAO,GAAKlI,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAImI,QAAO,GAAKpI,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAImG,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImI,QAAQ,CAAC/B,KAAK,CAACC,IAAG,KAAM,IAAI,EAAC;QAE7B,IAAIF,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAE1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;UAEvBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;UAE1BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;UAE3BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAGV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;UAE5BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAGV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAGV,OAEI;UAEA8B,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAE1BgC,UAAU,CAAC,MAAM;YACbL,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV;MAEJ,OAEI;QACA,IAAI2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,KAAM,IAAG,EAAG;UAE7B2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,MAAK;UAC3B4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,MAAK;QAC/B,OACI;UACA2B,OAAO,CAAC5B,KAAK,CAACC,IAAG,GAAK,IAAG;UACzB4B,QAAQ,CAAC7B,KAAK,CAACC,IAAG,GAAI,IAAG;QAC7B;MAEJ;IAEA,CAAC;IAGLuC,YAAW,EAAI,SAAAA,CAAA,EAAU;MAErB,IAAId,OAAM,GAAM/H,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAI+H,QAAO,GAAKhI,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAImI,QAAO,GAAKpI,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAImG,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImI,QAAQ,CAAC/B,KAAK,CAACC,IAAG,KAAM,IAAI,EAAC;QAE7B,IAAIF,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAE1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;UAEvBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;UAE1BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;UAE3BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAGV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;UAE5BgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAGV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;UACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;UAEzBgC,UAAU,CAAC,MAAM;YACbF,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAC9B,CAAC,EAAE,GAAG;UAENgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV,OAEI;UAEA8B,QAAQ,CAAC/B,KAAK,CAACC,IAAG,GAAI,KAAI;UAE1BgC,UAAU,CAAC,MAAM;YACbP,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;YACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;UAC7B,CAAC,EAAE,GAAG;QAEV;MAEJ,OAEI;QACA,IAAIyB,OAAO,CAAC1B,KAAK,CAACC,IAAG,KAAM,IAAG,EAAG;UAE7ByB,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,MAAK;UAC3B0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,MAAK;QAC/B,OACI;UACAyB,OAAO,CAAC1B,KAAK,CAACC,IAAG,GAAK,IAAG;UACzB0B,QAAQ,CAAC3B,KAAK,CAACC,IAAG,GAAI,IAAG;QAC7B;MAEJ;IAEJ,CAAC;IAEDwC,uBAAsB,EAAI,SAAAA,CAAA,EAAU;MAChC,IAAI1C,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImG,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACbb,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC/B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbb,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC/B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACbb,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC/B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACbb,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC/B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACjCsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbb,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC/B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAC9BmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAE9BmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,KAAI;MAEnC;IAEJ,CAAC;IAEDyC,oBAAmB,EAAI,SAAAA,CAAA,EAAU;MAC7B,IAAI3C,IAAG,GAASpG,QAAQ,CAACC,aAAa,CAAC,OAAO;MAC9C,IAAIyG,MAAK,GAAO1G,QAAQ,CAACC,aAAa,CAAC,SAAS;MAChD,IAAI8G,OAAM,GAAM/G,QAAQ,CAACC,aAAa,CAAC,UAAU;MACjD,IAAIiH,QAAO,GAAKlH,QAAQ,CAACC,aAAa,CAAC,WAAW;MAClD,IAAIwH,SAAQ,GAAIzH,QAAQ,CAACC,aAAa,CAAC,YAAY;MACnD,IAAI2H,MAAK,GAAO5H,QAAQ,CAACC,aAAa,CAAC,SAAS;MAEhD,IAAImG,IAAI,CAACC,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAC1BF,IAAI,CAACC,KAAK,CAACC,IAAG,GAAI,MAAK;QAEvBgC,UAAU,CAAC,MAAM;UACbV,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAII,MAAM,CAACL,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAEjCI,MAAM,CAACL,KAAK,CAACC,IAAG,GAAI,MAAK;QAEzBgC,UAAU,CAAC,MAAM;UACbV,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIS,OAAO,CAACV,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QAClCS,OAAO,CAACV,KAAK,CAACC,IAAG,GAAI,MAAK;QAE1BgC,UAAU,CAAC,MAAM;UACbV,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAIY,QAAQ,CAACb,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACnCY,QAAQ,CAACb,KAAK,CAACC,IAAG,GAAI,MAAK;QAE3BgC,UAAU,CAAC,MAAM;UACbV,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK,IAAImB,SAAS,CAACpB,KAAK,CAACC,IAAG,KAAM,KAAK,EAAC;QACpCmB,SAAS,CAACpB,KAAK,CAACC,IAAG,GAAI,MAAK;QAE5BgC,UAAU,CAAC,MAAM;UACbV,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;QAC5B,CAAC,EAAE,GAAG;MAEV,OAEK;QAED,IAAIsB,MAAM,CAACvB,KAAK,CAACC,IAAG,KAAM,KAAK,EAC3BsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,MAAK,CAAE,KAE3BsB,MAAM,CAACvB,KAAK,CAACC,IAAG,GAAI,KAAI;MAEhC;IAEJ;EAEJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}