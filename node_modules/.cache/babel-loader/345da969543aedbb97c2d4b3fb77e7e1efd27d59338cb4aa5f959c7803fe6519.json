{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, createStaticVNode as _createStaticVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-3eca7188\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div id=\\\"container\\\" data-v-3eca7188></div><div class=\\\"colorPalette\\\" data-v-3eca7188><span class=\\\"black color-span\\\" data-v-3eca7188></span><span class=\\\"gray color-span\\\" data-v-3eca7188></span><span class=\\\"intermediateGray color-span\\\" data-v-3eca7188></span><span class=\\\"lightGray color-span\\\" data-v-3eca7188></span><span class=\\\"veryLightGray color-span\\\" data-v-3eca7188></span><span class=\\\"white color-span\\\" data-v-3eca7188></span><span class=\\\"red color-span\\\" data-v-3eca7188></span><span class=\\\"lightRed color-span\\\" data-v-3eca7188></span><span class=\\\"pink color-span\\\" data-v-3eca7188></span><span class=\\\"lightPurple color-span\\\" data-v-3eca7188></span><span class=\\\"intermediatePurple color-span\\\" data-v-3eca7188></span><span class=\\\"purple color-span\\\" data-v-3eca7188></span><span class=\\\"sky color-span\\\" data-v-3eca7188></span><span class=\\\"intermediateSky color-span\\\" data-v-3eca7188></span><span class=\\\"lightSky color-span\\\" data-v-3eca7188></span><span class=\\\"lightBlue color-span\\\" data-v-3eca7188></span><span class=\\\"intermediateBlue color-span\\\" data-v-3eca7188></span><span class=\\\"blue color-span\\\" data-v-3eca7188></span><span class=\\\"green color-span\\\" data-v-3eca7188></span><span class=\\\"intermediateGreen color-span\\\" data-v-3eca7188></span><span class=\\\"lightGreen color-span\\\" data-v-3eca7188></span><span class=\\\"yellow color-span\\\" data-v-3eca7188></span><span class=\\\"lightOrange color-span\\\" data-v-3eca7188></span><span class=\\\"orange color-span\\\" data-v-3eca7188></span></div>\", 2);\nconst _hoisted_3 = {\n  class: \"options\"\n};\nconst _hoisted_4 = {\n  class: \"line\"\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Specifiy the start point and the end point of the line\", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  class: \"circle\"\n};\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"radius\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"radius\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"ellipse\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"radius (x)\", -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"radiusX\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_13 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"radius (y)\", -1 /* HOISTED */));\nconst _hoisted_14 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"radiusY\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_15 = {\n  class: \"triangle\"\n};\nconst _hoisted_16 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Specifiy the three vertices of the triangle\", -1 /* HOISTED */));\nconst _hoisted_17 = {\n  class: \"rectangle\"\n};\nconst _hoisted_18 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"width \", -1 /* HOISTED */));\nconst _hoisted_19 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"width\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_20 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_21 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"height\", -1 /* HOISTED */));\nconst _hoisted_22 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"height\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_23 = {\n  class: \"square\"\n};\nconst _hoisted_24 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"length\", -1 /* HOISTED */));\nconst _hoisted_25 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  id: \"length\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_26 = {\n  class: \"shapeBar\"\n};\nconst _hoisted_27 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/ios/50/ffffff/line--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_28 = [_hoisted_27];\nconst _hoisted_29 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/ios/50/ffffff/circled.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_30 = [_hoisted_29];\nconst _hoisted_31 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/ios/50/ffffff/ellipse-stroked--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_32 = [_hoisted_31];\nconst _hoisted_33 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/ios/50/ffffff/trine-120.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_34 = [_hoisted_33];\nconst _hoisted_35 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/fluency-systems-regular/48/ffffff/rectangle.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_36 = [_hoisted_35];\nconst _hoisted_37 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"60\",\n  height: \"60\",\n  src: \"https://img.icons8.com/ios/50/ffffff/square-90.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_38 = [_hoisted_37];\nconst _hoisted_39 = {\n  class: \"save\"\n};\nconst _hoisted_40 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"saveXML\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_41 = {\n  class: \"saveJSON\"\n};\nconst _hoisted_42 = {\n  class: \"saveForm\"\n};\nconst _hoisted_43 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"Enter Location\", -1 /* HOISTED */));\nconst _hoisted_44 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"text\",\n  name: \"saveLoc\",\n  required: \"\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_45 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, [/*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"radio\",\n  name: \"JSON\"\n}), /*#__PURE__*/_createTextVNode(\"JSON \")], -1 /* HOISTED */));\nconst _hoisted_46 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, [/*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"radio\",\n  name: \"XML\"\n}), /*#__PURE__*/_createTextVNode(\"XML \")], -1 /* HOISTED */));\nconst _hoisted_47 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, [/*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"radio\",\n  name: \"BOTH\"\n}), /*#__PURE__*/_createTextVNode(\"BOTH \")], -1 /* HOISTED */));\nconst _hoisted_48 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_49 = {\n  class: \"load\"\n};\nconst _hoisted_50 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"loadXML\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_51 = {\n  class: \"loadJSON\"\n};\nconst _hoisted_52 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"File to load  \", -1 /* HOISTED */));\nconst _hoisted_53 = {\n  class: \"sideBar\"\n};\nconst _hoisted_54 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/external-becris-lineal-becris/64/ffffff/external-shapes-coding-programming-becris-lineal-becris.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_55 = [_hoisted_54];\nconst _hoisted_56 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/paint.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_57 = [_hoisted_56];\nconst _hoisted_58 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/resize-diagonal--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_59 = [_hoisted_58];\nconst _hoisted_60 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/move.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_61 = [_hoisted_60];\nconst _hoisted_62 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/fluency-systems-regular/48/ffffff/copy--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_63 = [_hoisted_62];\nconst _hoisted_64 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/carbon-copy/100/ffffff/filled-trash.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_65 = [_hoisted_64];\nconst _hoisted_66 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/undo.png\"\n})], -1 /* HOISTED */));\nconst _hoisted_67 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/redo--v1.png\"\n})], -1 /* HOISTED */));\nconst _hoisted_68 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/ios/50/ffffff/save--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_69 = [_hoisted_68];\nconst _hoisted_70 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  width: \"40\",\n  height: \"40\",\n  src: \"https://img.icons8.com/pastel-glyph/64/ffffff/upload--v1.png\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_71 = [_hoisted_70];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.drawLine && $options.drawLine(...args))\n  }, \"OK\")]), _createElementVNode(\"div\", _hoisted_6, [_hoisted_7, _createTextVNode(), _hoisted_8, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.drawCircle && $options.drawCircle(...args))\n  }, \"OK\")]), _createElementVNode(\"div\", _hoisted_9, [_hoisted_10, _createTextVNode(), _hoisted_11, _createTextVNode(), _hoisted_12, _hoisted_13, _createTextVNode(), _hoisted_14, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.drawEllipse && $options.drawEllipse(...args))\n  }, \"OK\")]), _createElementVNode(\"div\", _hoisted_15, [_hoisted_16, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.drawTriangle && $options.drawTriangle(...args))\n  }, \"OK\")]), _createElementVNode(\"div\", _hoisted_17, [_hoisted_18, _createTextVNode(), _hoisted_19, _createTextVNode(), _hoisted_20, _hoisted_21, _createTextVNode(), _hoisted_22, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.drawRectangle && $options.drawRectangle(...args))\n  }, \"OK\")]), _createElementVNode(\"div\", _hoisted_23, [_hoisted_24, _createTextVNode(), _hoisted_25, _createElementVNode(\"button\", {\n    class: \"btn btn-outline-primary\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.drawSquare && $options.drawSquare(...args))\n  }, \"OK\")])]), _createElementVNode(\"div\", _hoisted_26, [_createElementVNode(\"div\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.showHideLineOption && $options.showHideLineOption(...args))\n  }, [..._hoisted_28]), _createElementVNode(\"div\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $options.showHideCircleOption && $options.showHideCircleOption(...args))\n  }, [..._hoisted_30]), _createElementVNode(\"div\", {\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.showHideEllipseOption && $options.showHideEllipseOption(...args))\n  }, [..._hoisted_32]), _createElementVNode(\"div\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.showHideTriangleOption && $options.showHideTriangleOption(...args))\n  }, [..._hoisted_34]), _createElementVNode(\"div\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => $options.showHideRectangleOption && $options.showHideRectangleOption(...args))\n  }, [..._hoisted_36]), _createElementVNode(\"div\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.showHideSquareOption && $options.showHideSquareOption(...args))\n  }, [..._hoisted_38])]), _createElementVNode(\"div\", _hoisted_39, [_hoisted_40, _createElementVNode(\"div\", _hoisted_41, [_createElementVNode(\"form\", _hoisted_42, [_hoisted_43, _hoisted_44, _hoisted_45, _hoisted_46, _hoisted_47, _hoisted_48, _createElementVNode(\"button\", {\n    type: \"submit\",\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.saveData && $options.saveData(...args))\n  }, \"Save\")]), _createCommentVNode(\" <button @click=\\\"$refs.file.click()\\\">open file dialog</button> \")])]), _createElementVNode(\"div\", _hoisted_49, [_hoisted_50, _createElementVNode(\"div\", _hoisted_51, [_hoisted_52, _createCommentVNode(\" <input type=\\\"file\\\" ref=\\\"file\\\" accept=\\\"application/json, application/xml\\\" @change=\\\"loadFileFn\\\"/> \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[13] || (_cache[13] = $event => $data.file = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.file]]), _createElementVNode(\"button\", {\n    onClick: _cache[14] || (_cache[14] = (...args) => $options.loadData && $options.loadData(...args))\n  }, \"Load\")])]), _createElementVNode(\"div\", _hoisted_53, [_createElementVNode(\"div\", {\n    onClick: _cache[15] || (_cache[15] = (...args) => $options.showHideShapeBar && $options.showHideShapeBar(...args))\n  }, [..._hoisted_55]), _createElementVNode(\"div\", {\n    onClick: _cache[16] || (_cache[16] = (...args) => $options.showHideColorPalette && $options.showHideColorPalette(...args))\n  }, [..._hoisted_57]), _createElementVNode(\"div\", {\n    onClick: _cache[17] || (_cache[17] = (...args) => $options.resize && $options.resize(...args))\n  }, [..._hoisted_59]), _createElementVNode(\"div\", {\n    onClick: _cache[18] || (_cache[18] = (...args) => $options.move && $options.move(...args))\n  }, [..._hoisted_61]), _createElementVNode(\"div\", {\n    onClick: _cache[19] || (_cache[19] = (...args) => $options.copySelectedShape && $options.copySelectedShape(...args))\n  }, [..._hoisted_63]), _createElementVNode(\"div\", {\n    onClick: _cache[20] || (_cache[20] = (...args) => $options.deleteShape && $options.deleteShape(...args))\n  }, [..._hoisted_65]), _hoisted_66, _hoisted_67, _createElementVNode(\"div\", {\n    onClick: _cache[21] || (_cache[21] = (...args) => $options.showHideSave && $options.showHideSave(...args))\n  }, [..._hoisted_69]), _createElementVNode(\"div\", {\n    onClick: _cache[22] || (_cache[22] = (...args) => $options.showHideLoad && $options.showHideLoad(...args))\n  }, [..._hoisted_71])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","type","id","width","height","src","_hoisted_27","_hoisted_29","_hoisted_31","_hoisted_33","_hoisted_35","_hoisted_37","name","required","_hoisted_54","_hoisted_56","_hoisted_58","_hoisted_60","_hoisted_62","_hoisted_64","_hoisted_68","_hoisted_70","_hoisted_1","_hoisted_3","_hoisted_4","_hoisted_5","onClick","_cache","args","$options","drawLine","_hoisted_6","_hoisted_7","_hoisted_8","drawCircle","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","drawEllipse","_hoisted_15","_hoisted_16","drawTriangle","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","drawRectangle","_hoisted_23","_hoisted_24","_hoisted_25","drawSquare","_hoisted_26","showHideLineOption","showHideCircleOption","showHideEllipseOption","showHideTriangleOption","showHideRectangleOption","showHideSquareOption","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","saveData","_createCommentVNode","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","$data","file","$event","loadData","_hoisted_53","showHideShapeBar","showHideColorPalette","resize","move","copySelectedShape","deleteShape","_hoisted_66","_hoisted_67","showHideSave","showHideLoad"],"sources":["C:\\Users\\Al-Gawad\\IdeaProjects\\Year 2\\OOP\\paint\\front_code\\src\\components\\SideBar.vue"],"sourcesContent":["<template>\r\n    <div id = \"container\"></div> \r\n    <div class = \"colorPalette\">\r\n        <span class = \"black color-span\"             ></span>\r\n        <span class = \"gray color-span\"              ></span>\r\n        <span class = \"intermediateGray color-span\"  ></span>\r\n        <span class = \"lightGray color-span\"         ></span>\r\n        <span class = \"veryLightGray color-span\"     ></span>\r\n        <span class = \"white color-span\"             ></span>\r\n        <span class = \"red color-span\"               ></span>\r\n        <span class = \"lightRed color-span\"          ></span>\r\n        <span class = \"pink color-span\"              ></span>\r\n        <span class = \"lightPurple color-span\"       ></span>\r\n        <span class = \"intermediatePurple color-span\"></span>\r\n        <span class = \"purple color-span\"            ></span>\r\n        <span class = \"sky color-span\"               ></span>\r\n        <span class = \"intermediateSky color-span\"   ></span>\r\n        <span class = \"lightSky color-span\"          ></span>\r\n        <span class = \"lightBlue color-span\"         ></span>\r\n        <span class = \"intermediateBlue color-span\"  ></span>\r\n        <span class = \"blue color-span\"              ></span>\r\n        <span class = \"green color-span\"             ></span>\r\n        <span class = \"intermediateGreen color-span\" ></span>\r\n        <span class = \"lightGreen color-span\"        ></span>\r\n        <span class = \"yellow color-span\"            ></span>\r\n        <span class = \"lightOrange color-span\"       ></span>\r\n        <span class = \"orange color-span\"            ></span>\r\n    </div>\r\n    \r\n    <div class = \"options\">\r\n        <div class = \"line\">\r\n            <p>Specifiy the start point and the end point of the line</p>\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawLine\">OK</button>\r\n        </div>\r\n        <div class = \"circle\">\r\n            <label>radius</label> <input type = \"text\" id = \"radius\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawCircle\">OK</button>\r\n        </div>\r\n        <div class = \"ellipse\">\r\n            <label>radius (x)</label> <input type = \"text\" id = \"radiusX\"> <br>\r\n            <label>radius (y)</label> <input type = \"text\" id = \"radiusY\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawEllipse\">OK</button>\r\n        </div>\r\n        <div class = \"triangle\">\r\n            <p>Specifiy the three vertices of the triangle</p>\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawTriangle\">OK</button>\r\n        </div>\r\n        <div class = \"rectangle\">\r\n            <label>width </label> <input type = \"text\" id = \"width\"> <br>\r\n            <label>height</label> <input type = \"text\" id = \"height\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawRectangle\">OK</button>\r\n        </div>\r\n        <div class = \"square\">\r\n            <label>length</label> <input type=\"text\" id = \"length\">\r\n            <button class = \"btn btn-outline-primary\" @click = \"drawSquare\">OK</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class = \"shapeBar\">\r\n        <div @click = \"showHideLineOption\"      ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/line--v1.png\"                     /></div>\r\n        <div @click = \"showHideCircleOption\"    ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/circled.png\"                      /></div>\r\n        <div @click = \"showHideEllipseOption\"   ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/ellipse-stroked--v1.png\"          /></div>\r\n        <div @click = \"showHideTriangleOption\"  ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/trine-120.png\"                    /></div>\r\n        <div @click = \"showHideRectangleOption\" ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/fluency-systems-regular/48/ffffff/rectangle.png\"/></div>\r\n        <div @click = \"showHideSquareOption\"    ><img width = \"60\" height = \"60\" src = \"https://img.icons8.com/ios/50/ffffff/square-90.png\"                    /></div>\r\n    </div>\r\n\r\n        <div class = \"save\">\r\n            <div class = \"saveXML\">\r\n            </div>\r\n            <div class = \"saveJSON\">\r\n                <form class=\"saveForm\">\r\n                    <label>Enter Location</label>\r\n                    <input type=\"text\" name=\"saveLoc\" required/>\r\n                    <label><input type=\"radio\" name=\"JSON\">JSON&nbsp;</label>\r\n                    <label><input type=\"radio\" name=\"XML\">XML&nbsp;</label>\r\n                    <label><input type=\"radio\" name=\"BOTH\">BOTH </label><br>\r\n                    <button type=\"submit\" @click=\"saveData\">Save</button>\r\n                </form>\r\n                <!-- <button @click=\"$refs.file.click()\">open file dialog</button> -->\r\n            </div>\r\n        </div>\r\n\r\n        <div class = \"load\">\r\n            <div class = \"loadXML\">\r\n            </div>\r\n            <div class = \"loadJSON\">\r\n                <label>File to load&nbsp;&nbsp;</label>\r\n                <!-- <input type=\"file\" ref=\"file\" accept=\"application/json, application/xml\" @change=\"loadFileFn\"/> -->\r\n                <input type=\"text\" v-model=\"file\">\r\n                <button @click=\"loadData\">Load</button>\r\n            </div>\r\n        </div>\r\n    \r\n    <div class = \"sideBar\">\r\n        <div @click = \"showHideShapeBar\"    ><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/external-becris-lineal-becris/64/ffffff/external-shapes-coding-programming-becris-lineal-becris.png\"/></div>\r\n        <div @click = \"showHideColorPalette\"><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/ios/50/ffffff/paint.png\"                        /></div>\r\n        <div @click = \"resize\"              ><img width = \"40\" height = \"40\" src = \"https://img.icons8.com/ios/50/ffffff/resize-diagonal--v1.png\"          /></div>\r\n        <div @click = \"move\"                ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/move.png\"                        /></div>\r\n        <div @click = \"copySelectedShape\"   ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/fluency-systems-regular/48/ffffff/copy--v1.png\"/></div>\r\n        <div @click = \"deleteShape\"         ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/carbon-copy/100/ffffff/filled-trash.png\"       /></div>\r\n        <div><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/undo.png\"                                                        /></div>\r\n        <div><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/redo--v1.png\"                                                    /></div>\r\n        <div @click = \"showHideSave\"        ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/ios/50/ffffff/save--v1.png\"                    /></div>\r\n        <div @click = \"showHideLoad\"        ><img width = \"40\" height = \"40\"  src = \"https://img.icons8.com/pastel-glyph/64/ffffff/upload--v1.png\"         /></div>\r\n    </div>\r\n</template> \r\n<script> \r\n\r\n    import Konva from 'konva' ;\r\n    \r\n    var layer            = new Konva.Layer() ;\r\n    var newLine          = null ;\r\n    var newCircle        = null ;\r\n    var newEllipse       = null ;\r\n    var newTriangle      = null ;\r\n    var newRectangle     = null ;\r\n    var newSquare        = null ;\r\n    let stage, transformer      ; \r\n\r\n    function getColorFromSpan(clickedSpan) {\r\n        var color = window.getComputedStyle(clickedSpan).backgroundColor ;\r\n        return color ;\r\n    }\r\n\r\n    export default {\r\n        name    : 'SideBar',\r\n\r\n        data() {\r\n            return {\r\n                file: \"\"\r\n            }\r\n        },\r\n            \r\n        methods : {\r\n            \r\n            // undo : async function (){\r\n            //     stage = new Konva.Stage({\r\n            //         container : 'container',\r\n            //         width     : window.innerWidth,\r\n            //         height    : window.innerHeight,\r\n            //     }) ;\r\n\r\n            //     stage.add(layer) ;\r\n                \r\n            //     //get history from backend\r\n            //     history= ;\r\n            //     //get array of objects of r=the desired state\r\n            //     desiredState = await fetch();\r\n                \r\n            //     for(let i=0;i<len(desiredState);i++){\r\n            //         if (desiredState[i] instanceof Konva.Rect){\r\n            //             newRectangle   = new Konva.Rect({\r\n            //                 x            : //,\r\n            //                 y            : //,\r\n            //                 width        : //,\r\n            //                 height       : //,\r\n            //                 fill         : //,\r\n            //                 stroke       : //,\r\n            //                 strokeWidth  : //,\r\n            //             }) ;\r\n            //             layer.add(newRectangle ) ;\r\n            //         } \r\n            //         else if (desiredState[i] instanceof Konva.Circle){\r\n            //             newCircle = new Konva.Circle({\r\n            //                 x           : //,\r\n            //                 y           : //,\r\n            //                 radius      : //,\r\n            //                 fill        : //,\r\n            //                 stroke      : //,\r\n            //                 strokeWidth : //,\r\n            //             }) ;\r\n            //             layer.add(newCircle) ;\r\n            //         } \r\n            //         if (desiredState[i] instanceof Konva.Ellipse){\r\n            //             newEllipse   = new Konva.Ellipse({\r\n            //                 x            : //,\r\n            //                 y            : //,\r\n            //                 radiusX      : //,\r\n            //                 radiusY      : //,\r\n            //                 fill         : //,\r\n            //                 stroke       : //,\r\n            //                 strokeWidth  : //,\r\n            //             }) ;\r\n            //             layer.add(newEllipse) ;\r\n            //         } \r\n            //         if (desiredState[i] instanceof Konva.Line){\r\n            //             newLine = new Konva.Line({\r\n            //                 points      : ,\r\n            //                 closed      : ,\r\n            //                 stroke      : ,\r\n            //                 strokeWidth : ,\r\n            //             }); \r\n            //             layer.add(newLine) ;\r\n            //         }\t\t\r\n            //     }\r\n            //     layer.draw() ;\r\n\r\n\r\n            // },\r\n\r\n            async saveData(e){\r\n                \r\n                e.preventDefault();\r\n\r\n                const userInfo = document.querySelector(\".saveForm\");\r\n                let formData = new FormData(userInfo);\r\n\r\n\r\n                var object = {};\r\n                formData.forEach((value, key) => {\r\n\r\n                    if( key === \"JSON\" )\r\n                        object[\"format\"] = 1\r\n                    else if( key === \"XML\" )\r\n                        object[\"format\"] = 2\r\n                    else if( key === \"BOTH\" )\r\n                        object[\"format\"] = 3\r\n                    else{\r\n\r\n                        let loc = value.substring(1, value.length-1 )\r\n\r\n                        if( loc.includes(\"\\\\Users\") )\r\n                            \r\n                            object[key] = loc\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                var json = JSON.stringify(object);\r\n                \r\n                if( formData.get(\"saveLoc\") ){\r\n                    await fetch( 'http://localhost:8080/function/save', {\r\n                        method: 'post',\r\n                        headers: {\r\n                            'Content-type': \"application/json; charset=UTF-8\"\r\n                        },\r\n                        body: json,\r\n                    });\r\n                }\r\n            \r\n            },\r\n\r\n            async loadData(){\r\n                \r\n                const result = await fetch('http://localhost:8080/function/load', {\r\n                    method: 'post',\r\n                    headers: {\r\n                        'Contect-type': 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: this.file\r\n                });\r\n                \r\n                console.log( result )\r\n\r\n                // const paint = result.json();\r\n\r\n                // console.log(paint)\r\n\r\n                // this.shapes = paint['program']\r\n\r\n            },\r\n\r\n            move: function () {\r\n                var stage = new Konva.Stage({\r\n                    container: 'container',\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n\r\n                stage.add(layer);\r\n\r\n                stage.on('click', function (e) {\r\n                    var clickedShape = e.target;\r\n\r\n                    if (!(clickedShape instanceof Konva.Shape)) {\r\n                        console.log('Clicked on an unknown shape');\r\n                        return;\r\n                    }\r\n\r\n                    clickedShape.draggable(!clickedShape.draggable());\r\n\r\n                    if (clickedShape instanceof Konva.Line) {\r\n                        clickedShape.on('click', () => {\r\n                            clickedShape.draggable(!clickedShape.draggable());\r\n                            layer.draw();\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n\r\n            deleteShape : function (){\r\n\r\n                stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : window.innerWidth,\r\n                    height    : window.innerHeight,\r\n                }) ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                stage.on('click', function (e) {\r\n                    \r\n                    var clickedShape = e.target ;\r\n                    \r\n                    if (clickedShape instanceof Konva.Rect || clickedShape instanceof Konva.Circle || clickedShape instanceof Konva.Line || clickedShape instanceof Konva.Ellipse ) {\r\n                        clickedShape.remove() ;\r\n                        layer.draw() ;\r\n                    } \r\n                    else {\r\n                        console.log('Clicked on an unknown shape to be deleted') ;\r\n                    }\r\n                    \r\n                }) ;\r\n\r\n            },\r\n\r\n            copySelectedShape: function () {\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : window.innerWidth,\r\n                    height    : window.innerHeight,\r\n                }) ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var clickedShape = null ;\r\n                var newShape     = null ;\r\n\r\n                stage.on('click', function (e) {\r\n                    clickedShape = e.target ;\r\n\r\n                    if (!(clickedShape instanceof Konva.Shape)) {\r\n                        console.log('Clicked on an unknown shape to be copied');\r\n                        return ;\r\n                    }\r\n\r\n                    if (\r\n                        clickedShape instanceof Konva.Rect ||\r\n                        clickedShape instanceof Konva.Circle ||\r\n                        clickedShape instanceof Konva.Ellipse ||\r\n                        (clickedShape instanceof Konva.Line && clickedShape.points.length === 4)\r\n                    ) \r\n                    {\r\n                        newShape = clickedShape.clone({ x: clickedShape.x(), y: clickedShape.y() });\r\n                    } \r\n                    else if (clickedShape instanceof Konva.Line) {\r\n                        var points = clickedShape.points().slice() ;\r\n                        newShape   = new Konva.Line({\r\n                            points      : [points[0]+20, points[1]+50 ,points[2]+20, points[3]+50] ,\r\n                            closed      : true, \r\n                            stroke      : clickedShape.stroke(),\r\n                            strokeWidth : clickedShape.strokeWidth(),\r\n                        }) ;\r\n                        layer.add(newShape) ;\r\n                        layer.draw() ;\r\n                        return ;\r\n                    } \r\n                    else {\r\n                        console.log('Clicked on an unknown shape to be copied') ;\r\n                        return ;\r\n                    }\r\n\r\n                    var pointerPos = stage.getPointerPosition() ;\r\n                    newShape.x(pointerPos.x) ;\r\n                    newShape.y(pointerPos.y) ;\r\n                    layer.add(newShape) ;\r\n                    layer.draw() ;\r\n                }) ;\r\n            },\r\n\r\n\r\n            resize : function() {\r\n\r\n                stage = new Konva.Stage({\r\n                    container: 'container',\r\n                    width: window.innerWidth,\r\n                    height: window.innerHeight,\r\n                });\r\n\r\n                stage.add(layer);\r\n\r\n                transformer = new Konva.Transformer({\r\n                    enabledAnchors: ['top-right', 'top-left', 'bottom-right', 'bottom-left'],\r\n                    rotateEnabled: false\r\n                });\r\n                \r\n                layer.add(transformer);\r\n\r\n                stage.draw();\r\n\r\n                stage.on('click', (e) => this.selectShape(e.target)) ;\r\n\r\n            },\r\n\r\n            selectShape(shape) {\r\n                if (shape) {\r\n                    transformer.attachTo(shape);\r\n\r\n                    const shapeType = shape.getClassName() ;\r\n\r\n                    switch (shapeType) {\r\n                        case 'Rect'  :\r\n                        case 'Square':\r\n\r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n\r\n                        case 'Circle'  :\r\n                        case 'Ellipse' :\r\n  \r\n                        transformer.nodes([shape]) ;\r\n                            break ;\r\n                        \r\n                        case 'Line':\r\n                            \r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n                        case 'RegularPolygon':\r\n                            \r\n                            transformer.nodes([shape]) ;\r\n                            break ;\r\n\r\n                        default :\r\n                            break ;\r\n\r\n                    }\r\n\r\n                    layer.draw() ;\r\n                }\r\n            },\r\n\r\n            deselectShape() {\r\n            \r\n                transformer.detach() ;\r\n                layer.draw() ;\r\n            },\r\n                \r\n            changeColor(newShape, selectedColorSpan, layer) {\r\n                if (newShape && selectedColorSpan) {\r\n                    var color = getColorFromSpan(selectedColorSpan) ;\r\n                    newShape.fill(color) ;\r\n                    layer.draw() ;\r\n                }\r\n            },\r\n\r\n            drawLine: function () {\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let line = document.querySelector(\".line\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                line.style.left = \"-11%\" ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var point1, point2 ;\r\n\r\n                stage.on('mousedown', function () {\r\n\r\n                    if (!point1) {\r\n                        point1 = stage.getPointerPosition() ;\r\n                    } \r\n                    else {\r\n                        point2 = stage.getPointerPosition() ;\r\n\r\n                        newLine = new Konva.Line({\r\n                            points      : [point1.x, point1.y, point2.x, point2.y],\r\n                            stroke      : 'black',\r\n                            strokeWidth : 5,\r\n                        });\r\n\r\n                        layer.add(newLine) ;\r\n                        \r\n                        if (newLine){\r\n\r\n                            const lineData = {\r\n                                shape       : \"line\",\r\n                                points      : [point1.x, point1.y, point2.x, point2.y],\r\n                                stroke      : 'black',\r\n                                strokeWidth : 5, \r\n                            } ;\r\n                            \r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(lineData),\r\n                            })\r\n                        }\r\n\r\n                        point1 = null ;\r\n                        point2 = null ;\r\n                    \r\n                    }\r\n\r\n                }) ;\r\n        \r\n            },\r\n\r\n            drawCircle() {\r\n                \r\n                var width  = window.innerWidth;\r\n                var height = window.innerHeight;\r\n\r\n                let circle = document.querySelector(\".circle\") ;\r\n                let radius = document.querySelector(\"#radius\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                circle.style.left = \"-11%\" ;\r\n\r\n                radius = parseFloat(radius.value);\r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', () => {\r\n                    var pos = stage.getPointerPosition();\r\n                    newCircle = new Konva.Circle({\r\n                        x           : pos.x,\r\n                        y           : pos.y,\r\n                        radius      : radius,\r\n                        fill        : 'white',\r\n                        stroke      : 'black',\r\n                        strokeWidth : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newCircle) ;\r\n\r\n                    if (newCircle){\r\n                        \r\n                        const CircleData = {\r\n                            shape       : 'circle',\r\n                            x           : pos.x,\r\n                            y           : pos.y,\r\n                            radius      : radius,\r\n                            fill        : 'white',\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(CircleData),\r\n                        })\r\n                        \r\n                        newCircle.on('transformend', () => {\r\n                            \r\n                            const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                            const updatedCircleData = {\r\n                                shape       : 'circle',\r\n                                x           : newCircle.position().x,\r\n                                y           : newCircle.position().y,\r\n                                radius      : updatedRadius,\r\n                                fill        : newCircle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method  : 'POST',\r\n                                headers : {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedCircleData),\r\n                            }) ;\r\n                        \r\n                        }) ;    \r\n                    }\r\n    \r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newCircle, selectedColorSpan, layer) ;\r\n                        \r\n                        if (newCircle){\r\n\r\n                            const updatedRadius = newCircle.radius() * newCircle.scaleX() ;\r\n\r\n                            const updatedCircleData = {\r\n                                shape       : 'circle',\r\n                                x           : newCircle.position().x,\r\n                                y           : newCircle.position().y,\r\n                                radius      : updatedRadius,\r\n                                fill        : newCircle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method  : 'POST',\r\n                                headers : {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedCircleData),\r\n                            }) ;\r\n\r\n                        }\r\n\r\n                    }) ; \r\n\r\n                }) ;\r\n\r\n            },\r\n\r\n            drawEllipse : function (){\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let ellipse = document.querySelector(\".ellipse\") ;\r\n                let radiusX = document.querySelector(\"#radiusX\") ;\r\n                let radiusY = document.querySelector(\"#radiusY\") ;\r\n\r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                ellipse.style.left = \"-11%\"  ;\r\n\r\n                radiusX = parseFloat(radiusX.value) ;\r\n                radiusY = parseFloat(radiusY.value) ; \r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                    newEllipse   = new Konva.Ellipse({\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        radiusX      : radiusX,\r\n                        radiusY      : radiusY,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newEllipse) ;\r\n\r\n                    if (newEllipse){\r\n\r\n                        const EllipseData = {\r\n                            shape       : 'ellipse',\r\n                            x           : pos.x,\r\n                            y           : pos.y,\r\n                            radiusX     : radiusX,\r\n                            radiusY     : radiusY,\r\n                            fill        : 'white',\r\n                            stroke      : 'black',\r\n                            strokeWidth : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(EllipseData),\r\n                        })\r\n\r\n                        \r\n                        newEllipse.on('transformend', () => {\r\n\r\n                            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                            const updatedEllipseData = {\r\n                                shape       : 'ellipse',\r\n                                x           : newEllipse.position().x,\r\n                                y           : newEllipse.position().y,\r\n                                radiusX     : updatedRadiusX,\r\n                                radiusY     : updatedRadiusY,\r\n                                fill        : newEllipse.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            };\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedEllipseData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    }\r\n\r\n                }) ;\r\n                                \r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newEllipse, selectedColorSpan, layer) ;\r\n                        \r\n                        if (newEllipse){\r\n\r\n                            const updatedRadiusX = newEllipse.radiusX() * newEllipse.scaleX() ;\r\n                            const updatedRadiusY = newEllipse.radiusY() * newEllipse.scaleY() ;\r\n\r\n                            const updatedEllipseData = {\r\n                                shape       : 'ellipse',\r\n                                x           : newEllipse.position().x,\r\n                                y           : newEllipse.position().y,\r\n                                radiusX     : updatedRadiusX,\r\n                                radiusY     : updatedRadiusY,\r\n                                fill        : newEllipse.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            };\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedEllipseData),\r\n                            }) ;\r\n\r\n                        }  \r\n                            \r\n                    }) ; \r\n\r\n                }) ;\r\n\r\n            },\r\n\r\n            drawTriangle : function(){\r\n\r\n                var width  = window.innerWidth  ;\r\n                var height = window.innerHeight ;\r\n\r\n                let triangle = document.querySelector(\".triangle\") ;\r\n\r\n                var stage = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : width,\r\n                    height    : height,\r\n                }) ;\r\n\r\n                triangle.style.left = \"-11%\" ;\r\n\r\n                stage.add(layer) ;\r\n\r\n                var point1, point2, point3 ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newRectangle = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n\r\n                    if (!point1) \r\n                        point1 = stage.getPointerPosition() ;\r\n                    \r\n                    else if (!point2)\r\n                        point2 = stage.getPointerPosition() ;\r\n\r\n                    else {\r\n                        point3 = stage.getPointerPosition() ;\r\n\r\n                            newTriangle = new Konva.Line({\r\n                                points      : [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\r\n                                closed      : true,\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            });  \r\n\r\n                        layer.add(newTriangle) ;\r\n\r\n                        if (newTriangle){    \r\n\r\n                            const TriangleData = {\r\n                                shape       : 'triangle',\r\n                                points      : [point1.x, point1.y, point2.x, point2.y, point3.x, point3.y],\r\n                                closed      : true,\r\n                                fill        : 'white',\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(TriangleData),\r\n                            })\r\n\r\n                            \r\n                            newTriangle.on('transformend', () => {\r\n\r\n                                const scaleX = newTriangle.scaleX() ;\r\n                                const scaleY = newTriangle.scaleY() ;\r\n\r\n                                const originalPoints = [\r\n                                    newTriangle.points()[0],\r\n                                    newTriangle.points()[1],\r\n                                    newTriangle.points()[2],\r\n                                    newTriangle.points()[3],\r\n                                    newTriangle.points()[4],\r\n                                    newTriangle.points()[5]\r\n                                ] ;\r\n\r\n                                const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                                    const updatedTriangleData = {\r\n                                        shape       : 'triangle',\r\n                                        points      : updatedPoints,                                \r\n                                        closed      : true,\r\n                                        fill        : newTriangle.fill(),\r\n                                        stroke      : 'black',\r\n                                        strokeWidth : 2,\r\n                                    } ;\r\n\r\n                                    fetch('http://localhost:8080/', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            'Content-Type': 'application/json',\r\n                                        },\r\n                                        body: JSON.stringify(updatedTriangleData),\r\n                                    }) ;\r\n                            \r\n                            }) ;\r\n                        \r\n                        }   \r\n\r\n                        point1 = null ;\r\n                        point2 = null ;\r\n                        point3 = null ;\r\n\r\n                    }\r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newTriangle, selectedColorSpan, layer) ;\r\n\r\n                        if(newTriangle){\r\n\r\n                            const scaleX = newTriangle.scaleX() ;\r\n                            const scaleY = newTriangle.scaleY() ;\r\n\r\n                            const originalPoints = [\r\n                                newTriangle.points()[0],\r\n                                newTriangle.points()[1],\r\n                                newTriangle.points()[2],\r\n                                newTriangle.points()[3],\r\n                                newTriangle.points()[4],\r\n                                newTriangle.points()[5]\r\n                            ] ;\r\n\r\n                            const updatedPoints = originalPoints.map((point, index) => index % 2 === 0 ? point * scaleX : point * scaleY) ;\r\n\r\n                            const updatedTriangleData = {\r\n                                shape       : 'triangle',\r\n                                points      : updatedPoints,                                \r\n                                closed      : true,\r\n                                fill        : newTriangle.fill(),\r\n                                stroke      : 'black',\r\n                                strokeWidth : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedTriangleData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ;\r\n                     \r\n                }) ;\r\n\r\n                point1 = null ;\r\n                point2 = null ;\r\n                point3 = null ;\r\n\r\n            },\r\n\r\n            drawRectangle : function(){\r\n\r\n                var Width  = window.innerWidth  ;\r\n                var Height = window.innerHeight ;\r\n\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let width     = document.querySelector(\"#width\")     ;\r\n                let height    = document.querySelector(\"#height\")    ;\r\n\r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : Width,\r\n                    height    : Height,\r\n                }) ;\r\n\r\n                rectangle.style.left = \"-11%\" ;\r\n\r\n                width  = parseFloat(width.value)  ;\r\n                height = parseFloat(height.value) ; \r\n\r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n\r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newSquare    = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                        newRectangle   = new Konva.Rect({\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        width        : width,\r\n                        height       : height,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newRectangle) ;\r\n\r\n                    if (newRectangle){\r\n\r\n                        const RectangleData = {\r\n                            shape        : 'rectangle',\r\n                            x            : pos.x,\r\n                            y            : pos.y,\r\n                            width        : width,\r\n                            height       : height,\r\n                            fill         : 'white',\r\n                            stroke       : 'black',\r\n                            strokeWidth  : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(RectangleData),\r\n                        })\r\n\r\n                        \r\n                        newRectangle.on('transformend', () => {\r\n\r\n                            const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                            const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                            const updatedRectangleData = {\r\n                                shape        : 'rectangle',\r\n                                x            : newRectangle.position().x,\r\n                                y            : newRectangle.position().y,\r\n                                width        : updatedWidth,\r\n                                height       : updatedHeight,\r\n                                fill         : newRectangle.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedRectangleData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    } \r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newRectangle, selectedColorSpan, layer) ;\r\n\r\n                        if (newTriangle){\r\n                        \r\n                            const updatedWidth  = newRectangle.width()  * newRectangle.scaleX() ;\r\n                            const updatedHeight = newRectangle.height() * newRectangle.scaleY() ;\r\n\r\n                            const updatedRectangleData = {\r\n                                shape        : 'rectangle',\r\n                                x            : newRectangle.position().x,\r\n                                y            : newRectangle.position().y,\r\n                                width        : updatedWidth,\r\n                                height       : updatedHeight,\r\n                                fill         : newRectangle.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedRectangleData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ; \r\n                        \r\n                }) ;\r\n\r\n            },\r\n\r\n            drawSquare : function(){\r\n\r\n                var Width  = window.innerWidth  ;\r\n                var Height = window.innerHeight ;\r\n\r\n                let square = document.querySelector(\".square\") ;\r\n                let length = document.querySelector(\"#length\") ;\r\n                \r\n                var stage     = new Konva.Stage({\r\n                    container : 'container',\r\n                    width     : Width,\r\n                    height    : Height,\r\n                }) ;\r\n\r\n                square.style.left = \"-11%\" ;\r\n\r\n                length = parseFloat(length.value) ;\r\n                \r\n                stage.add(layer) ;\r\n\r\n                var selectedColorSpan = null ;\r\n                \r\n                newCircle    = null ;\r\n                newEllipse   = null ;\r\n                newTriangle  = null ;\r\n                newRectangle = null ;\r\n\r\n                stage.on('mousedown', function () {\r\n                    var pos = stage.getPointerPosition() ;\r\n                        newSquare   = new Konva.Rect({\r\n                        x            : pos.x,\r\n                        y            : pos.y,\r\n                        width        : length,\r\n                        height       : length,\r\n                        fill         : 'white',\r\n                        stroke       : 'black',\r\n                        strokeWidth  : 2,\r\n                    }) ;\r\n\r\n                    layer.add(newSquare) ;\r\n\r\n                    if (newSquare){\r\n\r\n                        const SquareData = {\r\n                            shape        : 'square',\r\n                            x            : pos.x,\r\n                            y            : pos.y,\r\n                            width        : length,\r\n                            height       : length,\r\n                            fill         : 'white',\r\n                            stroke       : 'black',\r\n                            strokeWidth  : 2,\r\n                        } ;\r\n                            \r\n                        fetch('http://localhost:8080/', {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(SquareData),\r\n                        })\r\n                    \r\n                        newSquare.on('transformend', () => {\r\n\r\n                            const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                            \r\n                            const updatedSquareData = {\r\n                                shape        : 'square',\r\n                                x            : newSquare.position().x,\r\n                                y            : newSquare.position().y,\r\n                                width        : updatedLength,\r\n                                height       : updatedLength,\r\n                                fill         : newSquare.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedSquareData),\r\n                            }) ;\r\n\r\n                        }) ;\r\n\r\n                    }    \r\n\r\n                }) ;\r\n\r\n                var colorSpans = document.querySelectorAll('.color-span') ;\r\n\r\n                colorSpans.forEach((span) => {\r\n                    span.addEventListener('click', () => {\r\n                        selectedColorSpan = span ;\r\n                        this.changeColor(newSquare, selectedColorSpan, layer) ;\r\n\r\n                        if (newSquare){\r\n\r\n                            const updatedLength  = newSquare.width() * newSquare.scaleX() ;\r\n                            \r\n                            const updatedSquareData = {\r\n                                shape        : 'square',\r\n                                x            : newSquare.position().x,\r\n                                y            : newSquare.position().y,\r\n                                width        : updatedLength,\r\n                                height       : updatedLength,\r\n                                fill         : newSquare.fill(),\r\n                                stroke       : 'black',\r\n                                strokeWidth  : 2,\r\n                            } ;\r\n\r\n                            fetch('http://localhost:8080/', {\r\n                                method: 'POST',\r\n                                headers: {\r\n                                    'Content-Type': 'application/json',\r\n                                },\r\n                                body: JSON.stringify(updatedSquareData),\r\n                            }) ;\r\n\r\n                        }    \r\n\r\n                    }) ; \r\n\r\n                }) \r\n\r\n            },\r\n            \r\n            showHideShapeBar : function (){\r\n                // let loadXML      = document.querySelector('.loadXML')      ;\r\n                let loadJSON     = document.querySelector('.loadFile')     ;\r\n                let saveXML      = document.querySelector('.saveXML')      ;\r\n                let saveJSON     = document.querySelector('.saveJSON')     ;\r\n                let colorPalette = document.querySelector('.colorPalette') ;\r\n                let shapeBar     = document.querySelector('.shapeBar')     ;\r\n                let line         = document.querySelector(\".line\")         ;\r\n                let circle       = document.querySelector(\".circle\")       ;   \r\n                let ellipse      = document.querySelector(\".ellipse\")      ;\r\n                let triangle     = document.querySelector(\".triangle\")     ;\r\n                let rectangle    = document.querySelector(\".rectangle\")    ;\r\n                let square       = document.querySelector(\".square\")       ; \r\n\r\n                if (colorPalette.style.opacity === \"1\"){ \r\n\r\n                    colorPalette.style.opacity = \"0\" ;\r\n\r\n                    if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\"){ \r\n\r\n                        // loadXML.style.left  = \"-35%\" ;\r\n                        loadJSON.style.left = \"-35%\" ;\r\n\r\n                        saveXML.style.left  = \"-35%\" ;\r\n                        saveJSON.style.left = \"-35%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"5%\" ;\r\n                        }, 600) ;\r\n                \r\n                    }\r\n\r\n                    else{\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"5%\"   ;\r\n                        }, 500) ;\r\n                    }\r\n\r\n                }\r\n\r\n                else if (loadXML.style.left === \"5%\" || saveXML.style.left === \"5%\"){ \r\n\r\n                    loadXML.style.left  = \"-35%\" ;\r\n                    loadJSON.style.left = \"-35%\" ;\r\n\r\n                    saveXML.style.left  = \"-35%\" ;\r\n                    saveJSON.style.left = \"-35%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"5%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n                \r\n                else if (line.style.left === \"12%\"){\r\n\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\"\r\n\r\n                    setTimeout(() => {\r\n                        shapeBar.style.left = \"-2%\"   ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else{\r\n                    if (shapeBar.style.left === \"5%\")\r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    else\r\n                        shapeBar.style.left = \"5%\"   ;\r\n                }\r\n\r\n            },\r\n\r\n            showHideColorPalette : function (){\r\n                let colorPalette = document.querySelector('.colorPalette') ;\r\n                let shapeBar     = document.querySelector('.shapeBar')     ;\r\n                let line         = document.querySelector(\".line\")         ;\r\n                let circle       = document.querySelector(\".circle\")       ;   \r\n                let ellipse      = document.querySelector(\".ellipse\")      ;\r\n                let triangle     = document.querySelector(\".triangle\")     ;\r\n                let rectangle    = document.querySelector(\".rectangle\")    ;\r\n                let square       = document.querySelector(\".square\")       ; \r\n                \r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 400) ;\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            colorPalette.style.opacity = \"1\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n                \r\n                else{\r\n                    if (colorPalette.style.opacity === \"1\") \r\n                        colorPalette.style.opacity = \"0\" ;\r\n                    else \r\n                        colorPalette.style.opacity = \"1\" ;\r\n                }\r\n            \r\n            },\r\n\r\n            showHideLineOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        line.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (line.style.left === \"12%\")\r\n                        line.style.left = \"-11%\" ;\r\n                    else\r\n                        line.style.left = \"12%\"\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideCircleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        circle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (circle.style.left === \"12%\")\r\n                        circle.style.left = \"-11%\" ;\r\n                    else\r\n                        circle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideEllipseOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        ellipse.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (ellipse.style.left === \"12%\")\r\n                        ellipse.style.left = \"-11%\" ;\r\n                    else\r\n                        ellipse.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideTriangleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        triangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (triangle.style.left === \"12%\")\r\n                        triangle.style.left = \"-11%\" ;\r\n                    else\r\n                        triangle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideSave : function(){\r\n\r\n                let saveXML   = document.querySelector('.saveXML')   ;\r\n                let saveJSON  = document.querySelector('.saveJSON')  ;\r\n                let shapeBar  = document.querySelector('.shapeBar')  ;\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;   \r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ; \r\n\r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            saveXML.style.left  = \"5%\" ;\r\n                            saveJSON.style.left = \"5%\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n\r\n                else{\r\n                    if (saveXML.style.left === \"5%\" ){\r\n\r\n                        saveXML.style.left  = \"-35%\" ;\r\n                        saveJSON.style.left = \"-35%\" ;\r\n                    } \r\n                    else{\r\n                        saveXML.style.left  = \"5%\" ;\r\n                        saveJSON.style.left = \"5%\" ;\r\n                    }\r\n\r\n                }\r\n\r\n                },\r\n\r\n\r\n            showHideLoad : function(){\r\n\r\n                let loadXML   = document.querySelector('.loadXML')   ;\r\n                let loadJSON  = document.querySelector('.loadJSON')  ;\r\n                let shapeBar  = document.querySelector('.shapeBar')  ;\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;   \r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ; \r\n                \r\n                if (shapeBar.style.left === \"5%\"){\r\n\r\n                    if (line.style.left === \"12%\"){\r\n                    \r\n                        line.style.left = \"-11%\" ;\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (circle.style.left === \"12%\"){\r\n                        circle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (ellipse.style.left === \"12%\"){\r\n                        ellipse.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else if (triangle.style.left === \"12%\"){\r\n                        triangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (rectangle.style.left === \"12%\"){\r\n                        rectangle.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n\r\n                    }\r\n\r\n                    else if (square.style.left === \"12%\"){\r\n                        square.style.left = \"-11%\"\r\n\r\n                        setTimeout(() => {\r\n                            shapeBar.style.left = \"-2%\"   ;\r\n                        }, 200) ;\r\n\r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 700) ;\r\n\r\n                    }\r\n\r\n                    else{\r\n                        \r\n                        shapeBar.style.left = \"-2%\" ;\r\n                    \r\n                        setTimeout(() => {\r\n                            loadXML.style.left  = \"5%\" ;\r\n                            loadJSON.style.left = \"5%\" ;\r\n                        }, 200) ;\r\n\r\n                    }\r\n                    \r\n                }\r\n                \r\n                else{\r\n                    if (loadXML.style.left === \"5%\" ){\r\n\r\n                        loadXML.style.left  = \"-35%\" ;\r\n                        loadJSON.style.left = \"-35%\" ;\r\n                    } \r\n                    else{\r\n                        loadXML.style.left  = \"5%\" ;\r\n                        loadJSON.style.left = \"5%\" ;\r\n                    }\r\n\r\n                }\r\n\r\n            },\r\n\r\n            showHideRectangleOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (square.style.left === \"12%\"){\r\n                    square.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        rectangle.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (rectangle.style.left === \"12%\")\r\n                        rectangle.style.left = \"-11%\" ;\r\n                    else\r\n                        rectangle.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            },\r\n\r\n            showHideSquareOption : function(){\r\n                let line      = document.querySelector(\".line\")      ;\r\n                let circle    = document.querySelector(\".circle\")    ;\r\n                let ellipse   = document.querySelector(\".ellipse\")   ;\r\n                let triangle  = document.querySelector(\".triangle\")  ;\r\n                let rectangle = document.querySelector(\".rectangle\") ;\r\n                let square    = document.querySelector(\".square\")    ;\r\n            \r\n                if (line.style.left === \"12%\"){\r\n                    line.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (circle.style.left === \"12%\"){\r\n                    \r\n                    circle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (ellipse.style.left === \"12%\"){\r\n                    ellipse.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (triangle.style.left === \"12%\"){\r\n                    triangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else if (rectangle.style.left === \"12%\"){\r\n                    rectangle.style.left = \"-11%\" ;\r\n\r\n                    setTimeout(() => {\r\n                        square.style.left = \"12%\" ;\r\n                    }, 200) ;\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    if (square.style.left === \"12%\")\r\n                        square.style.left = \"-11%\" ;\r\n                    else\r\n                        square.style.left = \"12%\"  ;\r\n\r\n                }\r\n            \r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n</script>\r\n  \r\n<style scoped>\r\n    \r\n    @import url('https://fonts.googleapis.com/css2?family=Goldman&display=swap');\r\n\r\n    .save div{\r\n        width       : 35%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left 1s   ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .saveXML{\r\n        left : -35% ;\r\n        top  : 65%  ;\r\n    }\r\n\r\n    .saveJSON{\r\n        left : -35% ;\r\n        top  : 73%  ;   \r\n    }\r\n\r\n    .load div{\r\n        width       : 35%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left 1s   ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .loadXML{\r\n        left : -35% ;\r\n        top  : 92%  ;\r\n    }\r\n\r\n    .loadJSON{\r\n\r\n        left : -35% ;\r\n        top  : 84%  ;   \r\n    }\r\n\r\n    .colorPalette{\r\n        left             : 5.5%         ;\r\n        top              : 15%          ;\r\n        width            : 220px        ;\r\n        height           : 170px        ;\r\n        border           : 1px solid    ;\r\n        position         : fixed        ;\r\n        border-radius    : 10px         ;\r\n        opacity          : 0            ;\r\n        transition       : opacity .5s  ;\r\n        background-color : white      ;\r\n    }  \r\n    .colorPalette span {\r\n        display       : inline-block ;\r\n        width         : 25px         ;\r\n        height        : 25px         ;\r\n        margin        : 5px          ;\r\n        border-radius : 5px          ;\r\n    }\r\n\r\n    .black {\r\n        background-color : black ;\r\n    }\r\n\r\n    .gray {\r\n        background-color : rgb(80, 80, 80) ;\r\n    }\r\n\r\n    .intermediateGray{\r\n        background-color : gray ;\r\n    }\r\n\r\n    .lightGray{\r\n        background-color : rgb(150, 150, 150) ;\r\n    }\r\n\r\n    .veryLightGray{\r\n        background-color : gainsboro ;\r\n    }\r\n\r\n    .white{\r\n        background-color : white    ;\r\n        border           : .1px solid ;\r\n    }\r\n\r\n    .red{\r\n        background-color : red ;\r\n    }\r\n\r\n    .lightRed{\r\n        background-color : rgb(255, 58, 91) ;\r\n    }\r\n\r\n    .pink{\r\n        background-color : rgb(255, 103, 247) ;\r\n    }\r\n\r\n    .lightPurple{\r\n        background-color : rgb(218, 110, 218) ;\r\n    }\r\n\r\n    .intermediatePurple{\r\n        background-color : rgb(167, 72, 255) ;\r\n    }\r\n\r\n    .purple{\r\n        background-color : rgb(94, 22, 177) ;\r\n    }\r\n\r\n    .sky{\r\n        background-color : rgb(2, 138, 192) ;\r\n    }\r\n\r\n    .intermediateSky{\r\n        background-color : rgb(87, 192, 233) ;\r\n    }\r\n\r\n    .lightSky{\r\n        background-color : rgb(127, 255, 255) ;\r\n    }\r\n\r\n    .lightBlue{\r\n        background-color : rgb(23, 186, 250) ;\r\n    }\r\n\r\n    .intermediateBlue{\r\n        background-color : rgb(74, 131, 255) ;\r\n    }\r\n\r\n    .blue{\r\n        background-color : rgb(18, 93, 255) ;\r\n    }\r\n\r\n    .green{\r\n        background-color : rgb(1, 177, 1) ;\r\n    }\r\n\r\n    .intermediateGreen{\r\n        background-color : rgb(147, 219, 40) ;\r\n    }\r\n\r\n    .lightGreen{\r\n        background-color : rgb(201, 255, 121)  ;\r\n    }\r\n\r\n    .yellow{\r\n        background-color : yellow ;\r\n    }\r\n\r\n    .lightOrange{\r\n        background-color : rgb(255, 205, 111) ;\r\n    }\r\n\r\n    .orange{\r\n        background-color : orange ;\r\n    }\r\n\r\n    .colorPalette span:hover{\r\n        opacity    : .6           ;\r\n        transition : opacity .2s  ;\r\n    }\r\n\r\n    .colorPalette span:active{\r\n        opacity    : .3          ;\r\n        transition : opacity .2s ;\r\n    }\r\n\r\n    .options div{\r\n        width       : 15%       ;\r\n        border      : 3px solid ;\r\n        padding     : 20px      ;\r\n        position    : fixed     ;\r\n        transition  : left .4s  ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n        background-color           : white ;\r\n        border-top-right-radius    : 20px    ;\r\n        border-bottom-right-radius : 20px    ;\r\n    }\r\n\r\n    .options input{\r\n        width       : 60%  ;\r\n        margin      : 1px  ;\r\n        margin-left : 10px ;\r\n        font-family : 'Goldman', sans-serif  ;\r\n    }\r\n\r\n    .options .btn {\r\n        margin-top  : 5%  ;\r\n        margin-left : 70% ;\r\n    }\r\n\r\n    .options .line{\r\n        top      : 10%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .circle{\r\n        top      : 26.5%  ;\r\n        left     : -11%   ;\r\n    \r\n    }\r\n\r\n    .options .ellipse{\r\n        top      : 40%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .triangle{\r\n        top      : 55.5%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .rectangle{\r\n        top      : 71%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .options .square{\r\n        top      : 87%  ;\r\n        left     : -11% ;\r\n    }\r\n\r\n    .shapeBar{\r\n        background-color : rgb(30, 30, 30) ;\r\n        top              : 10%      ;\r\n        left             : -2%      ;\r\n        width            : 7%       ;\r\n        height           : 90vh     ;\r\n        z-index          : 2px      ;\r\n        position         : fixed    ;\r\n        transition       : left .4s ;\r\n    }\r\n    .shapeBar div{\r\n        height          : 17%    ;\r\n        display         : flex   ;\r\n        align-items     : center ;\r\n        justify-content : center ;\r\n    }\r\n\r\n    .shapeBar div:hover{\r\n        background-color : rgb(50, 50, 50)    ;\r\n        transition       : background-color .3s ;\r\n    }\r\n\r\n    .shapeBar div:active{\r\n        background-color: gray ;\r\n        transition      : background-color.2s ;\r\n    }\r\n\r\n    .sideBar{\r\n        background-color : black ;\r\n        top              : 10%     ;\r\n        width            : 5%      ;\r\n        height           : 90vh    ;\r\n        position         : fixed   ;\r\n    }\r\n    .sideBar div{\r\n        height          : 10%    ;\r\n        display         : flex   ;\r\n        align-items     : center ;\r\n        justify-content : center ;\r\n    }\r\n\r\n    .sideBar div:hover{\r\n        background-color : rgb(20, 20, 20)    ;\r\n        transition       : background-color .3s ;\r\n    }\r\n\r\n    .sideBar div:active{\r\n        background-color : gray ;\r\n        transition       : background-color.2s ;\r\n    }\r\n\r\n    #container{\r\n        left             : 5%     ;\r\n        top              : 10%    ;\r\n        width            : 95%    ;\r\n        height           : 100%   ;\r\n        position         : fixed  ;\r\n    }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}